var Da = Object.defineProperty;
var Ur = (r) => {
  throw TypeError(r);
};
var qa = (r, e, t) => e in r ? Da(r, e, { enumerable: !0, configurable: !0, writable: !0, value: t }) : r[e] = t;
var L = (r, e, t) => qa(r, typeof e != "symbol" ? e + "" : e, t), qt = (r, e, t) => e.has(r) || Ur("Cannot " + t);
var M = (r, e, t) => (qt(r, e, "read from private field"), t ? t.call(r) : e.get(r)), he = (r, e, t) => e.has(r) ? Ur("Cannot add the same private member more than once") : e instanceof WeakSet ? e.add(r) : e.set(r, t), Ce = (r, e, t, n) => (qt(r, e, "write to private field"), n ? n.call(r, t) : e.set(r, t), t), V = (r, e, t) => (qt(r, e, "access private method"), t);
import S from "maplibre-gl";
import { Language as Ba, getLanguageInfoFromCode as Gr, config as Bt, MapStyle as Ge, mapStylePresetList as Ut, expandMapStyle as Ua, MapStyleVariant as Ga, ReferenceMapStyle as Va, toLanguageInfo as Vr, getLanguageInfoFromFlag as Ha, geolocation as Hr } from "@maptiler/client";
import { MapStyle as nc, MapStyleVariant as ac, ReferenceMapStyle as oc, ServiceError as ic, areSameLanguages as sc, bufferToPixelDataBrowser as lc, circumferenceAtLatitude as uc, coordinates as cc, data as pc, elevation as fc, expandMapStyle as dc, geocoding as yc, geolocation as mc, getAutoLanguage as hc, getBufferToPixelDataParser as gc, getLanguageInfoFromCode as vc, getLanguageInfoFromFlag as bc, getLanguageInfoFromKey as wc, getTileCache as Sc, isLanguageInfo as xc, mapStylePresetList as kc, math as Lc, misc as Cc, staticMaps as Ac, styleToStyle as Tc, toLanguageInfo as Ic } from "@maptiler/client";
import Ka from "events";
import { v4 as Wa } from "uuid";
import { Base64 as Za } from "js-base64";
const _ = {
  /**
   * Language mode to display labels in both the local language and the language of the visitor's device, concatenated.
   * Note that if those two languages are the same, labels won't be duplicated.
   */
  VISITOR: {
    code: null,
    flag: "visitor",
    name: "Visitor",
    latin: !0,
    isMode: !0,
    geocoding: !1
  },
  /**
   * Language mode to display labels in both the local language and English, concatenated.
   * Note that if those two languages are the same, labels won't be duplicated.
   */
  VISITOR_ENGLISH: {
    code: null,
    flag: "visitor_en",
    name: "Visitor English",
    latin: !0,
    isMode: !0,
    geocoding: !1
  },
  /**
   * Language mode to display labels in a language enforced in the style.
   */
  STYLE: {
    code: null,
    flag: "style",
    name: "Style",
    latin: !1,
    isMode: !0,
    geocoding: !1
  },
  /**
   * Language mode to display labels in a language enforced in the style. The language cannot be further modified.
   */
  STYLE_LOCK: {
    code: null,
    flag: "style_lock",
    name: "Style Lock",
    latin: !1,
    isMode: !0,
    geocoding: !1
  },
  ...Ba
};
function Kr() {
  if (typeof navigator > "u") {
    const e = Intl.DateTimeFormat().resolvedOptions().locale.split("-")[0], t = Gr(e);
    return t || _.ENGLISH;
  }
  return Array.from(new Set(navigator.languages.map((e) => e.split("-")[0]))).map((e) => Gr(e)).filter((e) => e)[0] ?? _.LOCAL;
}
const G = {
  maptilerLogoURL: "https://api.maptiler.com/resources/logo.svg",
  maptilerURL: "https://www.maptiler.com/",
  maptilerApiHost: "api.maptiler.com",
  telemetryURL: "https://api.maptiler.com/metrics",
  rtlPluginURL: "https://cdn.maptiler.com/mapbox-gl-rtl-text/v0.2.3/mapbox-gl-rtl-text.min.js",
  primaryLanguage: _.STYLE,
  secondaryLanguage: _.LOCAL,
  terrainSourceURL: "https://api.maptiler.com/tiles/terrain-rgb-v2/tiles.json",
  terrainSourceId: "maptiler-terrain"
};
Object.freeze(G);
const gr = Wa();
class Ja extends Ka {
  constructor() {
    super(...arguments);
    /**
     * The primary language. By default, the language of the web browser is used.
     */
    L(this, "primaryLanguage", G.primaryLanguage);
    /**
     * The secondary language, to overwrite the default language defined in the map style.
     * This settings is highly dependant on the style compatibility and may not work in most cases.
     */
    L(this, "secondaryLanguage");
    /**
     * Setting on whether of not the SDK runs with a session logic.
     * A "session" is started at the initialization of the SDK and finished when the browser
     * page is being refreshed.
     * When `session` is enabled (default: true), the extra URL param `mtsid` is added to queries
     * on the MapTiler Cloud API. This allows MapTiler to enable "session based billing".
     */
    L(this, "session", !0);
    /**
     * Enables client-side caching of requests for tiles and fonts.
     * The cached requests persist multiple browser sessions and will be reused when possible.
     * Works only for requests to the MapTiler Cloud API when sessions are enabled.
     */
    L(this, "caching", !0);
    /**
     * Telemetry is enabled by default but can be opted-out by setting this value to `false`.
     * The telemetry is very valuable to the team at MapTiler because it shares information
     * about where to add the extra effort. It also helps spotting some incompatibility issues
     * that may arise between the SDK and a specific version of a module.
     *
     * It consists in sending metrics about usage of the following features:
     * - SDK version [string]
     * - API key [string]
     * - MapTiler sesion ID (if opted-in) [string]
     * - if tile caching is enabled [boolean]
     * - if language specified at initialization [boolean]
     * - if terrain is activated at initialization [boolean]
     * - if globe projection is activated at initialization [boolean]
     *
     * In addition, each official module will be added to a list, alongside its version number.
     */
    L(this, "telemetry", !0);
    /**
     * Unit to be used
     */
    L(this, "_unit", "metric");
    /**
     * MapTiler Cloud API key
     */
    L(this, "_apiKey", "");
  }
  /**
   * Set the unit system
   */
  set unit(t) {
    this._unit = t, this.emit("unit", t);
  }
  /**
   * Get the unit system
   */
  get unit() {
    return this._unit;
  }
  /**
   * Set the MapTiler Cloud API key
   */
  set apiKey(t) {
    this._apiKey = t, Bt.apiKey = t, this.emit("apiKey", t);
  }
  /**
   * Get the MapTiler Cloud API key
   */
  get apiKey() {
    return this._apiKey;
  }
  /**
   * Set a the custom fetch function to replace the default one
   */
  set fetch(t) {
    Bt.fetch = t;
  }
  /**
   * Get the fetch fucntion
   */
  get fetch() {
    return Bt.fetch;
  }
}
const F = new Ja(), er = "localcache_source", tr = "localcache", Ya = "maptiler_sdk", Xa = 1e3, Qa = 100, rr = typeof caches < "u", { addProtocol: Wr } = S;
function eo(r, e) {
  if (rr && F.caching && F.session && r.host === G.maptilerApiHost) {
    if (e === "Source" && r.href.includes("tiles.json"))
      return r.href.replace("https://", `${er}://`);
    if (e === "Tile" || e === "Glyphs")
      return r.href.replace("https://", `${tr}://`);
  }
  return r.href;
}
let Gt;
async function En() {
  return Gt || (Gt = await caches.open(Ya)), Gt;
}
let Zr = 0;
async function to() {
  const r = await En(), e = await r.keys(), t = e.slice(0, Math.max(e.length - Xa, 0));
  for (const n of t)
    r.delete(n);
}
function ro() {
  Wr(
    er,
    async (r, e) => {
      if (!r.url) throw new Error("");
      r.url = r.url.replace(`${er}://`, "https://");
      const t = r;
      t.signal = e.signal;
      const n = await fetch(r.url, t), a = await n.json();
      return a.tiles && a.tiles.length > 0 && (a.tiles[0] += `&last-modified=${n.headers.get("Last-Modified")}`), {
        data: a,
        cacheControl: n.headers.get("Cache-Control"),
        expires: n.headers.get("Expires")
      };
    }
  ), Wr(tr, async (r, e) => {
    if (!r.url) throw new Error("");
    r.url = r.url.replace(`${tr}://`, "https://");
    const t = new URL(r.url), n = new URL(t);
    n.searchParams.delete("mtsid"), n.searchParams.delete("key");
    const a = n.toString(), o = new URL(t);
    o.searchParams.delete("last-modified");
    const i = o.toString(), s = async (y) => ({
      data: await y.arrayBuffer(),
      cacheControl: y.headers.get("Cache-Control"),
      expires: y.headers.get("Expires")
    }), l = await En(), u = await l.match(a);
    if (u)
      return s(u);
    const c = r;
    c.signal = e.signal;
    const p = await fetch(i, c);
    return p.status >= 200 && p.status < 300 && (l.put(a, p.clone()).catch(() => {
    }), ++Zr > Qa && (to(), Zr = 0)), s(p);
  });
}
function no() {
  if (typeof window > "u") return;
  const r = S.getRTLTextPluginStatus();
  if (r === "unavailable" || r === "requested")
    try {
      S.setRTLTextPlugin(G.rtlPluginURL, !0);
    } catch {
    }
}
function ao(r, e) {
  for (const t of r)
    typeof e[t] == "function" && (e[t] = e[t].bind(e));
}
function Jr(r, e) {
  let t = null;
  try {
    t = new URL(r);
  } catch {
    return {
      url: r
    };
  }
  return t.host === G.maptilerApiHost && (t.searchParams.has("key") || t.searchParams.append("key", F.apiKey), F.session && t.searchParams.append("mtsid", gr)), {
    url: eo(t, e)
  };
}
function Yr(r) {
  return (e, t) => {
    if (r != null) {
      const n = r(e, t), a = Jr((n == null ? void 0 : n.url) ?? "", t);
      return {
        ...n,
        ...a
      };
    }
    return Jr(e, t);
  };
}
function Mn() {
  return Math.random().toString(36).substring(2);
}
function kt(r) {
  return /^[0-9a-fA-F]{8}\b-[0-9a-fA-F]{4}\b-[0-9a-fA-F]{4}\b-[0-9a-fA-F]{4}\b-[0-9a-fA-F]{12}$/gi.test(r);
}
function oo(r) {
  try {
    return JSON.parse(r);
  } catch {
  }
  return null;
}
function io() {
  return document.createElement("canvas").getContext("webgl2") ? null : typeof WebGL2RenderingContext < "u" ? "Graphic rendering with WebGL2 has been disabled or is not supported by your graphic card. The map cannot be displayed." : "Your browser does not support graphic rendering with WebGL2. The map cannot be displayed.";
}
function so(r) {
  const e = io();
  if (!e) return;
  let t = null;
  if (typeof r == "string" ? t = document.getElementById(r) : r instanceof HTMLElement && (t = r), !t)
    throw new Error("The Map container must be provided.");
  const n = document.createElement("div");
  throw n.innerHTML = e, n.classList.add("webgl-warning-div"), t.appendChild(n), new Error(e);
}
function El(r) {
  const e = "The WebGL context was lost.", t = r.getContainer(), n = document.createElement("div");
  n.innerHTML = e, n.classList.add("webgl-warning-div"), t.appendChild(n);
}
function Xr(r, e) {
  return !(!Array.isArray(r) || r.length !== 2 || r[0] !== "get" || typeof r[1] != "string" || e && !r[1].startsWith("name:") || !e && r[1] !== "name");
}
function lo(r, e, t) {
  const n = structuredClone(r), a = (o) => {
    if (typeof o != "string")
      for (let i = 0; i < o.length; i += 1)
        Xr(o[i], t) ? o[i] = structuredClone(e) : a(o[i]);
  };
  return Xr(n, t) ? e : (a(n), n);
}
function uo(r, e) {
  const t = e ? /\{name:\S+\}/ : /\{name\}/;
  return {
    contains: t.test(r),
    exactMatch: new RegExp(`^${t.source}$`).test(r)
  };
}
function co(r, e, t) {
  const n = t ? /\{name:\S+\}/ : /\{name\}/, a = r.split(n);
  return ["concat", ...a.flatMap((s, l) => l === a.length - 1 ? [s] : [s, e])];
}
function po(r) {
  var n;
  const e = /\{name(?::(?<language>\S+))?\}/g, t = [];
  for (; ; ) {
    const a = e.exec(r);
    if (!a) break;
    const o = ((n = a.groups) == null ? void 0 : n.language) ?? null;
    t.push(o);
  }
  return t;
}
function fo(r) {
  return !Array.isArray(r) || r.length !== 2 || r[0] !== "get" || typeof r[1] != "string" ? null : r[1].trim() === "name" ? {
    isLanguage: !0,
    localization: null
  } : r[1].trim().startsWith("name:") ? {
    isLanguage: !0,
    localization: r[1].trim().split(":").pop()
  } : null;
}
function yo(r) {
  const e = [], t = structuredClone(r), n = (a) => {
    if (typeof a != "string")
      for (let o = 0; o < a.length; o += 1) {
        const i = fo(a[o]);
        i ? e.push(i.localization) : n(a[o]);
      }
  };
  return n([t]), e;
}
function mo(r, e) {
  const t = [];
  for (const o of r) {
    if (o.type !== "symbol")
      continue;
    const i = o, { id: s, layout: l } = i;
    if (!l || !("text-field" in l))
      continue;
    const u = e.getLayoutProperty(s, "text-field");
    if (u)
      if (typeof u == "string") {
        const c = po(u);
        t.push(c);
      } else {
        const c = yo(u);
        t.push(c);
      }
  }
  const n = t.flat(), a = {
    unlocalized: 0,
    localized: {}
  };
  for (const o of n)
    o === null ? a.unlocalized += 1 : (o in a.localized || (a.localized[o] = 0), a.localized[o] += 1);
  return a;
}
let Ml = class extends S.Marker {
  addTo(e) {
    return super.addTo(e);
  }
};
class zl extends S.Popup {
  addTo(e) {
    return super.addTo(e);
  }
}
class Pl extends S.Style {
  constructor(e, t = {}) {
    super(e, t);
  }
}
class Rl extends S.CanvasSource {
  onAdd(e) {
    super.onAdd(e);
  }
}
class $l extends S.GeoJSONSource {
  onAdd(e) {
    super.onAdd(e);
  }
}
class jl extends S.ImageSource {
  onAdd(e) {
    super.onAdd(e);
  }
}
class Ol extends S.RasterTileSource {
  onAdd(e) {
    super.onAdd(e);
  }
}
class Nl extends S.RasterDEMTileSource {
  onAdd(e) {
    super.onAdd(e);
  }
}
class Fl extends S.VectorTileSource {
  onAdd(e) {
    super.onAdd(e);
  }
}
class Dl extends S.VideoSource {
  onAdd(e) {
    super.onAdd(e);
  }
}
class ho extends S.NavigationControl {
  onAdd(e) {
    return super.onAdd(e);
  }
}
class go extends S.GeolocateControl {
  onAdd(e) {
    return super.onAdd(e);
  }
}
class ql extends S.AttributionControl {
  onAdd(e) {
    return super.onAdd(e);
  }
}
class vo extends S.LogoControl {
  onAdd(e) {
    return super.onAdd(e);
  }
}
class bo extends S.ScaleControl {
  onAdd(e) {
    return super.onAdd(e);
  }
}
class wo extends S.FullscreenControl {
  onAdd(e) {
    return super.onAdd(e);
  }
}
class Bl extends S.TerrainControl {
  onAdd(e) {
    return super.onAdd(e);
  }
}
class Ul extends S.BoxZoomHandler {
  constructor(e, t) {
    super(e, t);
  }
}
class Gl extends S.ScrollZoomHandler {
  constructor(e, t) {
    super(e, t);
  }
}
class Vl extends S.CooperativeGesturesHandler {
  constructor(e, t) {
    super(e, t);
  }
}
class Hl extends S.KeyboardHandler {
  constructor(e) {
    super(e);
  }
}
class Kl extends S.TwoFingersTouchPitchHandler {
  constructor(e) {
    super(e);
  }
}
class Wl extends S.MapWheelEvent {
  constructor(e, t, n) {
    super(e, t, n);
  }
}
class Zl extends S.MapTouchEvent {
  constructor(e, t, n) {
    super(e, t, n);
  }
}
class Jl extends S.MapMouseEvent {
  constructor(e, t, n, a = {}) {
    super(e, t, n, a);
  }
}
class Qr extends vo {
  constructor(t = {}) {
    super(t);
    L(this, "logoURL", "");
    L(this, "linkURL", "");
    this.logoURL = t.logoURL ?? G.maptilerLogoURL, this.linkURL = t.linkURL ?? G.maptilerURL;
  }
  onAdd(t) {
    this._map = t, this._compact = this.options.compact ?? !1, this._container = window.document.createElement("div"), this._container.className = "maplibregl-ctrl";
    const n = window.document.createElement("a");
    return n.style.backgroundRepeat = "no-repeat", n.style.cursor = "pointer", n.style.display = "block", n.style.height = "23px", n.style.margin = "0 0 -4px -4px", n.style.overflow = "hidden", n.style.width = "88px", n.style.backgroundImage = `url(${this.logoURL})`, n.style.backgroundSize = "100px 30px", n.style.width = "100px", n.style.height = "30px", n.target = "_blank", n.rel = "noopener", n.href = this.linkURL, n.setAttribute("aria-label", "MapTiler logo"), n.setAttribute("rel", "noopener"), this._container.appendChild(n), this._container.style.display = "block", this._map.on("resize", this._updateCompact), this._updateCompact(), this._container;
  }
}
var So = 8, xo = {
  version: {
    required: !0,
    type: "enum",
    values: [
      8
    ]
  },
  name: {
    type: "string"
  },
  metadata: {
    type: "*"
  },
  center: {
    type: "array",
    value: "number"
  },
  centerAltitude: {
    type: "number"
  },
  zoom: {
    type: "number"
  },
  bearing: {
    type: "number",
    default: 0,
    period: 360,
    units: "degrees"
  },
  pitch: {
    type: "number",
    default: 0,
    units: "degrees"
  },
  roll: {
    type: "number",
    default: 0,
    units: "degrees"
  },
  state: {
    type: "state",
    default: {}
  },
  light: {
    type: "light"
  },
  sky: {
    type: "sky"
  },
  projection: {
    type: "projection"
  },
  terrain: {
    type: "terrain"
  },
  sources: {
    required: !0,
    type: "sources"
  },
  sprite: {
    type: "sprite"
  },
  glyphs: {
    type: "string"
  },
  transition: {
    type: "transition"
  },
  layers: {
    required: !0,
    type: "array",
    value: "layer"
  }
}, ko = {
  "*": {
    type: "source"
  }
}, Lo = [
  "source_vector",
  "source_raster",
  "source_raster_dem",
  "source_geojson",
  "source_video",
  "source_image"
], Co = {
  type: {
    required: !0,
    type: "enum",
    values: {
      vector: {}
    }
  },
  url: {
    type: "string"
  },
  tiles: {
    type: "array",
    value: "string"
  },
  bounds: {
    type: "array",
    value: "number",
    length: 4,
    default: [
      -180,
      -85.051129,
      180,
      85.051129
    ]
  },
  scheme: {
    type: "enum",
    values: {
      xyz: {},
      tms: {}
    },
    default: "xyz"
  },
  minzoom: {
    type: "number",
    default: 0
  },
  maxzoom: {
    type: "number",
    default: 22
  },
  attribution: {
    type: "string"
  },
  promoteId: {
    type: "promoteId"
  },
  volatile: {
    type: "boolean",
    default: !1
  },
  "*": {
    type: "*"
  }
}, Ao = {
  type: {
    required: !0,
    type: "enum",
    values: {
      raster: {}
    }
  },
  url: {
    type: "string"
  },
  tiles: {
    type: "array",
    value: "string"
  },
  bounds: {
    type: "array",
    value: "number",
    length: 4,
    default: [
      -180,
      -85.051129,
      180,
      85.051129
    ]
  },
  minzoom: {
    type: "number",
    default: 0
  },
  maxzoom: {
    type: "number",
    default: 22
  },
  tileSize: {
    type: "number",
    default: 512,
    units: "pixels"
  },
  scheme: {
    type: "enum",
    values: {
      xyz: {},
      tms: {}
    },
    default: "xyz"
  },
  attribution: {
    type: "string"
  },
  volatile: {
    type: "boolean",
    default: !1
  },
  "*": {
    type: "*"
  }
}, To = {
  type: {
    required: !0,
    type: "enum",
    values: {
      "raster-dem": {}
    }
  },
  url: {
    type: "string"
  },
  tiles: {
    type: "array",
    value: "string"
  },
  bounds: {
    type: "array",
    value: "number",
    length: 4,
    default: [
      -180,
      -85.051129,
      180,
      85.051129
    ]
  },
  minzoom: {
    type: "number",
    default: 0
  },
  maxzoom: {
    type: "number",
    default: 22
  },
  tileSize: {
    type: "number",
    default: 512,
    units: "pixels"
  },
  attribution: {
    type: "string"
  },
  encoding: {
    type: "enum",
    values: {
      terrarium: {},
      mapbox: {},
      custom: {}
    },
    default: "mapbox"
  },
  redFactor: {
    type: "number",
    default: 1
  },
  blueFactor: {
    type: "number",
    default: 1
  },
  greenFactor: {
    type: "number",
    default: 1
  },
  baseShift: {
    type: "number",
    default: 0
  },
  volatile: {
    type: "boolean",
    default: !1
  },
  "*": {
    type: "*"
  }
}, Io = {
  type: {
    required: !0,
    type: "enum",
    values: {
      geojson: {}
    }
  },
  data: {
    required: !0,
    type: "*"
  },
  maxzoom: {
    type: "number",
    default: 18
  },
  attribution: {
    type: "string"
  },
  buffer: {
    type: "number",
    default: 128,
    maximum: 512,
    minimum: 0
  },
  filter: {
    type: "*"
  },
  tolerance: {
    type: "number",
    default: 0.375
  },
  cluster: {
    type: "boolean",
    default: !1
  },
  clusterRadius: {
    type: "number",
    default: 50,
    minimum: 0
  },
  clusterMaxZoom: {
    type: "number"
  },
  clusterMinPoints: {
    type: "number"
  },
  clusterProperties: {
    type: "*"
  },
  lineMetrics: {
    type: "boolean",
    default: !1
  },
  generateId: {
    type: "boolean",
    default: !1
  },
  promoteId: {
    type: "promoteId"
  }
}, Eo = {
  type: {
    required: !0,
    type: "enum",
    values: {
      video: {}
    }
  },
  urls: {
    required: !0,
    type: "array",
    value: "string"
  },
  coordinates: {
    required: !0,
    type: "array",
    length: 4,
    value: {
      type: "array",
      length: 2,
      value: "number"
    }
  }
}, Mo = {
  type: {
    required: !0,
    type: "enum",
    values: {
      image: {}
    }
  },
  url: {
    required: !0,
    type: "string"
  },
  coordinates: {
    required: !0,
    type: "array",
    length: 4,
    value: {
      type: "array",
      length: 2,
      value: "number"
    }
  }
}, _o = {
  id: {
    type: "string",
    required: !0
  },
  type: {
    type: "enum",
    values: {
      fill: {},
      line: {},
      symbol: {},
      circle: {},
      heatmap: {},
      "fill-extrusion": {},
      raster: {},
      hillshade: {},
      "color-relief": {},
      background: {}
    },
    required: !0
  },
  metadata: {
    type: "*"
  },
  source: {
    type: "string"
  },
  "source-layer": {
    type: "string"
  },
  minzoom: {
    type: "number",
    minimum: 0,
    maximum: 24
  },
  maxzoom: {
    type: "number",
    minimum: 0,
    maximum: 24
  },
  filter: {
    type: "filter"
  },
  layout: {
    type: "layout"
  },
  paint: {
    type: "paint"
  }
}, zo = [
  "layout_fill",
  "layout_line",
  "layout_circle",
  "layout_heatmap",
  "layout_fill-extrusion",
  "layout_symbol",
  "layout_raster",
  "layout_hillshade",
  "layout_color-relief",
  "layout_background"
], Po = {
  visibility: {
    type: "enum",
    values: {
      visible: {},
      none: {}
    },
    default: "visible",
    "property-type": "constant"
  }
}, Ro = {
  "fill-sort-key": {
    type: "number",
    expression: {
      interpolated: !1,
      parameters: [
        "zoom",
        "feature"
      ]
    },
    "property-type": "data-driven"
  },
  visibility: {
    type: "enum",
    values: {
      visible: {},
      none: {}
    },
    default: "visible",
    "property-type": "constant"
  }
}, $o = {
  "circle-sort-key": {
    type: "number",
    expression: {
      interpolated: !1,
      parameters: [
        "zoom",
        "feature"
      ]
    },
    "property-type": "data-driven"
  },
  visibility: {
    type: "enum",
    values: {
      visible: {},
      none: {}
    },
    default: "visible",
    "property-type": "constant"
  }
}, jo = {
  visibility: {
    type: "enum",
    values: {
      visible: {},
      none: {}
    },
    default: "visible",
    "property-type": "constant"
  }
}, Oo = {
  "line-cap": {
    type: "enum",
    values: {
      butt: {},
      round: {},
      square: {}
    },
    default: "butt",
    expression: {
      interpolated: !1,
      parameters: [
        "zoom"
      ]
    },
    "property-type": "data-constant"
  },
  "line-join": {
    type: "enum",
    values: {
      bevel: {},
      round: {},
      miter: {}
    },
    default: "miter",
    expression: {
      interpolated: !1,
      parameters: [
        "zoom",
        "feature"
      ]
    },
    "property-type": "data-driven"
  },
  "line-miter-limit": {
    type: "number",
    default: 2,
    requires: [
      {
        "line-join": "miter"
      }
    ],
    expression: {
      interpolated: !0,
      parameters: [
        "zoom"
      ]
    },
    "property-type": "data-constant"
  },
  "line-round-limit": {
    type: "number",
    default: 1.05,
    requires: [
      {
        "line-join": "round"
      }
    ],
    expression: {
      interpolated: !0,
      parameters: [
        "zoom"
      ]
    },
    "property-type": "data-constant"
  },
  "line-sort-key": {
    type: "number",
    expression: {
      interpolated: !1,
      parameters: [
        "zoom",
        "feature"
      ]
    },
    "property-type": "data-driven"
  },
  visibility: {
    type: "enum",
    values: {
      visible: {},
      none: {}
    },
    default: "visible",
    "property-type": "constant"
  }
}, No = {
  "symbol-placement": {
    type: "enum",
    values: {
      point: {},
      line: {},
      "line-center": {}
    },
    default: "point",
    expression: {
      interpolated: !1,
      parameters: [
        "zoom"
      ]
    },
    "property-type": "data-constant"
  },
  "symbol-spacing": {
    type: "number",
    default: 250,
    minimum: 1,
    units: "pixels",
    requires: [
      {
        "symbol-placement": "line"
      }
    ],
    expression: {
      interpolated: !0,
      parameters: [
        "zoom"
      ]
    },
    "property-type": "data-constant"
  },
  "symbol-avoid-edges": {
    type: "boolean",
    default: !1,
    expression: {
      interpolated: !1,
      parameters: [
        "zoom"
      ]
    },
    "property-type": "data-constant"
  },
  "symbol-sort-key": {
    type: "number",
    expression: {
      interpolated: !1,
      parameters: [
        "zoom",
        "feature"
      ]
    },
    "property-type": "data-driven"
  },
  "symbol-z-order": {
    type: "enum",
    values: {
      auto: {},
      "viewport-y": {},
      source: {}
    },
    default: "auto",
    expression: {
      interpolated: !1,
      parameters: [
        "zoom"
      ]
    },
    "property-type": "data-constant"
  },
  "icon-allow-overlap": {
    type: "boolean",
    default: !1,
    requires: [
      "icon-image",
      {
        "!": "icon-overlap"
      }
    ],
    expression: {
      interpolated: !1,
      parameters: [
        "zoom"
      ]
    },
    "property-type": "data-constant"
  },
  "icon-overlap": {
    type: "enum",
    values: {
      never: {},
      always: {},
      cooperative: {}
    },
    requires: [
      "icon-image"
    ],
    expression: {
      interpolated: !1,
      parameters: [
        "zoom"
      ]
    },
    "property-type": "data-constant"
  },
  "icon-ignore-placement": {
    type: "boolean",
    default: !1,
    requires: [
      "icon-image"
    ],
    expression: {
      interpolated: !1,
      parameters: [
        "zoom"
      ]
    },
    "property-type": "data-constant"
  },
  "icon-optional": {
    type: "boolean",
    default: !1,
    requires: [
      "icon-image",
      "text-field"
    ],
    expression: {
      interpolated: !1,
      parameters: [
        "zoom"
      ]
    },
    "property-type": "data-constant"
  },
  "icon-rotation-alignment": {
    type: "enum",
    values: {
      map: {},
      viewport: {},
      auto: {}
    },
    default: "auto",
    requires: [
      "icon-image"
    ],
    expression: {
      interpolated: !1,
      parameters: [
        "zoom"
      ]
    },
    "property-type": "data-constant"
  },
  "icon-size": {
    type: "number",
    default: 1,
    minimum: 0,
    units: "factor of the original icon size",
    requires: [
      "icon-image"
    ],
    expression: {
      interpolated: !0,
      parameters: [
        "zoom",
        "feature"
      ]
    },
    "property-type": "data-driven"
  },
  "icon-text-fit": {
    type: "enum",
    values: {
      none: {},
      width: {},
      height: {},
      both: {}
    },
    default: "none",
    requires: [
      "icon-image",
      "text-field"
    ],
    expression: {
      interpolated: !1,
      parameters: [
        "zoom"
      ]
    },
    "property-type": "data-constant"
  },
  "icon-text-fit-padding": {
    type: "array",
    value: "number",
    length: 4,
    default: [
      0,
      0,
      0,
      0
    ],
    units: "pixels",
    requires: [
      "icon-image",
      "text-field",
      {
        "icon-text-fit": [
          "both",
          "width",
          "height"
        ]
      }
    ],
    expression: {
      interpolated: !0,
      parameters: [
        "zoom"
      ]
    },
    "property-type": "data-constant"
  },
  "icon-image": {
    type: "resolvedImage",
    tokens: !0,
    expression: {
      interpolated: !1,
      parameters: [
        "zoom",
        "feature"
      ]
    },
    "property-type": "data-driven"
  },
  "icon-rotate": {
    type: "number",
    default: 0,
    period: 360,
    units: "degrees",
    requires: [
      "icon-image"
    ],
    expression: {
      interpolated: !0,
      parameters: [
        "zoom",
        "feature"
      ]
    },
    "property-type": "data-driven"
  },
  "icon-padding": {
    type: "padding",
    default: [
      2
    ],
    units: "pixels",
    requires: [
      "icon-image"
    ],
    expression: {
      interpolated: !0,
      parameters: [
        "zoom",
        "feature"
      ]
    },
    "property-type": "data-driven"
  },
  "icon-keep-upright": {
    type: "boolean",
    default: !1,
    requires: [
      "icon-image",
      {
        "icon-rotation-alignment": "map"
      },
      {
        "symbol-placement": [
          "line",
          "line-center"
        ]
      }
    ],
    expression: {
      interpolated: !1,
      parameters: [
        "zoom"
      ]
    },
    "property-type": "data-constant"
  },
  "icon-offset": {
    type: "array",
    value: "number",
    length: 2,
    default: [
      0,
      0
    ],
    requires: [
      "icon-image"
    ],
    expression: {
      interpolated: !0,
      parameters: [
        "zoom",
        "feature"
      ]
    },
    "property-type": "data-driven"
  },
  "icon-anchor": {
    type: "enum",
    values: {
      center: {},
      left: {},
      right: {},
      top: {},
      bottom: {},
      "top-left": {},
      "top-right": {},
      "bottom-left": {},
      "bottom-right": {}
    },
    default: "center",
    requires: [
      "icon-image"
    ],
    expression: {
      interpolated: !1,
      parameters: [
        "zoom",
        "feature"
      ]
    },
    "property-type": "data-driven"
  },
  "icon-pitch-alignment": {
    type: "enum",
    values: {
      map: {},
      viewport: {},
      auto: {}
    },
    default: "auto",
    requires: [
      "icon-image"
    ],
    expression: {
      interpolated: !1,
      parameters: [
        "zoom"
      ]
    },
    "property-type": "data-constant"
  },
  "text-pitch-alignment": {
    type: "enum",
    values: {
      map: {},
      viewport: {},
      auto: {}
    },
    default: "auto",
    requires: [
      "text-field"
    ],
    expression: {
      interpolated: !1,
      parameters: [
        "zoom"
      ]
    },
    "property-type": "data-constant"
  },
  "text-rotation-alignment": {
    type: "enum",
    values: {
      map: {},
      viewport: {},
      "viewport-glyph": {},
      auto: {}
    },
    default: "auto",
    requires: [
      "text-field"
    ],
    expression: {
      interpolated: !1,
      parameters: [
        "zoom"
      ]
    },
    "property-type": "data-constant"
  },
  "text-field": {
    type: "formatted",
    default: "",
    tokens: !0,
    expression: {
      interpolated: !1,
      parameters: [
        "zoom",
        "feature"
      ]
    },
    "property-type": "data-driven"
  },
  "text-font": {
    type: "array",
    value: "string",
    default: [
      "Open Sans Regular",
      "Arial Unicode MS Regular"
    ],
    requires: [
      "text-field"
    ],
    expression: {
      interpolated: !1,
      parameters: [
        "zoom",
        "feature"
      ]
    },
    "property-type": "data-driven"
  },
  "text-size": {
    type: "number",
    default: 16,
    minimum: 0,
    units: "pixels",
    requires: [
      "text-field"
    ],
    expression: {
      interpolated: !0,
      parameters: [
        "zoom",
        "feature"
      ]
    },
    "property-type": "data-driven"
  },
  "text-max-width": {
    type: "number",
    default: 10,
    minimum: 0,
    units: "ems",
    requires: [
      "text-field"
    ],
    expression: {
      interpolated: !0,
      parameters: [
        "zoom",
        "feature"
      ]
    },
    "property-type": "data-driven"
  },
  "text-line-height": {
    type: "number",
    default: 1.2,
    units: "ems",
    requires: [
      "text-field"
    ],
    expression: {
      interpolated: !0,
      parameters: [
        "zoom"
      ]
    },
    "property-type": "data-constant"
  },
  "text-letter-spacing": {
    type: "number",
    default: 0,
    units: "ems",
    requires: [
      "text-field"
    ],
    expression: {
      interpolated: !0,
      parameters: [
        "zoom",
        "feature"
      ]
    },
    "property-type": "data-driven"
  },
  "text-justify": {
    type: "enum",
    values: {
      auto: {},
      left: {},
      center: {},
      right: {}
    },
    default: "center",
    requires: [
      "text-field"
    ],
    expression: {
      interpolated: !1,
      parameters: [
        "zoom",
        "feature"
      ]
    },
    "property-type": "data-driven"
  },
  "text-radial-offset": {
    type: "number",
    units: "ems",
    default: 0,
    requires: [
      "text-field"
    ],
    "property-type": "data-driven",
    expression: {
      interpolated: !0,
      parameters: [
        "zoom",
        "feature"
      ]
    }
  },
  "text-variable-anchor": {
    type: "array",
    value: "enum",
    values: {
      center: {},
      left: {},
      right: {},
      top: {},
      bottom: {},
      "top-left": {},
      "top-right": {},
      "bottom-left": {},
      "bottom-right": {}
    },
    requires: [
      "text-field",
      {
        "symbol-placement": [
          "point"
        ]
      }
    ],
    expression: {
      interpolated: !1,
      parameters: [
        "zoom"
      ]
    },
    "property-type": "data-constant"
  },
  "text-variable-anchor-offset": {
    type: "variableAnchorOffsetCollection",
    requires: [
      "text-field",
      {
        "symbol-placement": [
          "point"
        ]
      }
    ],
    expression: {
      interpolated: !0,
      parameters: [
        "zoom",
        "feature"
      ]
    },
    "property-type": "data-driven"
  },
  "text-anchor": {
    type: "enum",
    values: {
      center: {},
      left: {},
      right: {},
      top: {},
      bottom: {},
      "top-left": {},
      "top-right": {},
      "bottom-left": {},
      "bottom-right": {}
    },
    default: "center",
    requires: [
      "text-field",
      {
        "!": "text-variable-anchor"
      }
    ],
    expression: {
      interpolated: !1,
      parameters: [
        "zoom",
        "feature"
      ]
    },
    "property-type": "data-driven"
  },
  "text-max-angle": {
    type: "number",
    default: 45,
    units: "degrees",
    requires: [
      "text-field",
      {
        "symbol-placement": [
          "line",
          "line-center"
        ]
      }
    ],
    expression: {
      interpolated: !0,
      parameters: [
        "zoom"
      ]
    },
    "property-type": "data-constant"
  },
  "text-writing-mode": {
    type: "array",
    value: "enum",
    values: {
      horizontal: {},
      vertical: {}
    },
    requires: [
      "text-field",
      {
        "symbol-placement": [
          "point"
        ]
      }
    ],
    expression: {
      interpolated: !1,
      parameters: [
        "zoom"
      ]
    },
    "property-type": "data-constant"
  },
  "text-rotate": {
    type: "number",
    default: 0,
    period: 360,
    units: "degrees",
    requires: [
      "text-field"
    ],
    expression: {
      interpolated: !0,
      parameters: [
        "zoom",
        "feature"
      ]
    },
    "property-type": "data-driven"
  },
  "text-padding": {
    type: "number",
    default: 2,
    minimum: 0,
    units: "pixels",
    requires: [
      "text-field"
    ],
    expression: {
      interpolated: !0,
      parameters: [
        "zoom"
      ]
    },
    "property-type": "data-constant"
  },
  "text-keep-upright": {
    type: "boolean",
    default: !0,
    requires: [
      "text-field",
      {
        "text-rotation-alignment": "map"
      },
      {
        "symbol-placement": [
          "line",
          "line-center"
        ]
      }
    ],
    expression: {
      interpolated: !1,
      parameters: [
        "zoom"
      ]
    },
    "property-type": "data-constant"
  },
  "text-transform": {
    type: "enum",
    values: {
      none: {},
      uppercase: {},
      lowercase: {}
    },
    default: "none",
    requires: [
      "text-field"
    ],
    expression: {
      interpolated: !1,
      parameters: [
        "zoom",
        "feature"
      ]
    },
    "property-type": "data-driven"
  },
  "text-offset": {
    type: "array",
    value: "number",
    units: "ems",
    length: 2,
    default: [
      0,
      0
    ],
    requires: [
      "text-field",
      {
        "!": "text-radial-offset"
      }
    ],
    expression: {
      interpolated: !0,
      parameters: [
        "zoom",
        "feature"
      ]
    },
    "property-type": "data-driven"
  },
  "text-allow-overlap": {
    type: "boolean",
    default: !1,
    requires: [
      "text-field",
      {
        "!": "text-overlap"
      }
    ],
    expression: {
      interpolated: !1,
      parameters: [
        "zoom"
      ]
    },
    "property-type": "data-constant"
  },
  "text-overlap": {
    type: "enum",
    values: {
      never: {},
      always: {},
      cooperative: {}
    },
    requires: [
      "text-field"
    ],
    expression: {
      interpolated: !1,
      parameters: [
        "zoom"
      ]
    },
    "property-type": "data-constant"
  },
  "text-ignore-placement": {
    type: "boolean",
    default: !1,
    requires: [
      "text-field"
    ],
    expression: {
      interpolated: !1,
      parameters: [
        "zoom"
      ]
    },
    "property-type": "data-constant"
  },
  "text-optional": {
    type: "boolean",
    default: !1,
    requires: [
      "text-field",
      "icon-image"
    ],
    expression: {
      interpolated: !1,
      parameters: [
        "zoom"
      ]
    },
    "property-type": "data-constant"
  },
  visibility: {
    type: "enum",
    values: {
      visible: {},
      none: {}
    },
    default: "visible",
    "property-type": "constant"
  }
}, Fo = {
  visibility: {
    type: "enum",
    values: {
      visible: {},
      none: {}
    },
    default: "visible",
    "property-type": "constant"
  }
}, Do = {
  visibility: {
    type: "enum",
    values: {
      visible: {},
      none: {}
    },
    default: "visible",
    "property-type": "constant"
  }
}, qo = {
  type: "array",
  value: "*"
}, Bo = {
  type: "enum",
  values: {
    "==": {},
    "!=": {},
    ">": {},
    ">=": {},
    "<": {},
    "<=": {},
    in: {},
    "!in": {},
    all: {},
    any: {},
    none: {},
    has: {},
    "!has": {}
  }
}, Uo = {
  type: "enum",
  values: {
    Point: {},
    LineString: {},
    Polygon: {}
  }
}, Go = {
  type: "array",
  minimum: 0,
  maximum: 24,
  value: [
    "number",
    "color"
  ],
  length: 2
}, Vo = {
  type: "array",
  value: "*",
  minimum: 1
}, Ho = {
  anchor: {
    type: "enum",
    default: "viewport",
    values: {
      map: {},
      viewport: {}
    },
    "property-type": "data-constant",
    transition: !1,
    expression: {
      interpolated: !1,
      parameters: [
        "zoom"
      ]
    }
  },
  position: {
    type: "array",
    default: [
      1.15,
      210,
      30
    ],
    length: 3,
    value: "number",
    "property-type": "data-constant",
    transition: !0,
    expression: {
      interpolated: !0,
      parameters: [
        "zoom"
      ]
    }
  },
  color: {
    type: "color",
    "property-type": "data-constant",
    default: "#ffffff",
    expression: {
      interpolated: !0,
      parameters: [
        "zoom"
      ]
    },
    transition: !0
  },
  intensity: {
    type: "number",
    "property-type": "data-constant",
    default: 0.5,
    minimum: 0,
    maximum: 1,
    expression: {
      interpolated: !0,
      parameters: [
        "zoom"
      ]
    },
    transition: !0
  }
}, Ko = {
  "sky-color": {
    type: "color",
    "property-type": "data-constant",
    default: "#88C6FC",
    expression: {
      interpolated: !0,
      parameters: [
        "zoom"
      ]
    },
    transition: !0
  },
  "horizon-color": {
    type: "color",
    "property-type": "data-constant",
    default: "#ffffff",
    expression: {
      interpolated: !0,
      parameters: [
        "zoom"
      ]
    },
    transition: !0
  },
  "fog-color": {
    type: "color",
    "property-type": "data-constant",
    default: "#ffffff",
    expression: {
      interpolated: !0,
      parameters: [
        "zoom"
      ]
    },
    transition: !0
  },
  "fog-ground-blend": {
    type: "number",
    "property-type": "data-constant",
    default: 0.5,
    minimum: 0,
    maximum: 1,
    expression: {
      interpolated: !0,
      parameters: [
        "zoom"
      ]
    },
    transition: !0
  },
  "horizon-fog-blend": {
    type: "number",
    "property-type": "data-constant",
    default: 0.8,
    minimum: 0,
    maximum: 1,
    expression: {
      interpolated: !0,
      parameters: [
        "zoom"
      ]
    },
    transition: !0
  },
  "sky-horizon-blend": {
    type: "number",
    "property-type": "data-constant",
    default: 0.8,
    minimum: 0,
    maximum: 1,
    expression: {
      interpolated: !0,
      parameters: [
        "zoom"
      ]
    },
    transition: !0
  },
  "atmosphere-blend": {
    type: "number",
    "property-type": "data-constant",
    default: 0.8,
    minimum: 0,
    maximum: 1,
    expression: {
      interpolated: !0,
      parameters: [
        "zoom"
      ]
    },
    transition: !0
  }
}, Wo = {
  source: {
    type: "string",
    required: !0
  },
  exaggeration: {
    type: "number",
    minimum: 0,
    default: 1
  }
}, Zo = {
  type: {
    type: "projectionDefinition",
    default: "mercator",
    "property-type": "data-constant",
    transition: !1,
    expression: {
      interpolated: !0,
      parameters: [
        "zoom"
      ]
    }
  }
}, Jo = [
  "paint_fill",
  "paint_line",
  "paint_circle",
  "paint_heatmap",
  "paint_fill-extrusion",
  "paint_symbol",
  "paint_raster",
  "paint_hillshade",
  "paint_color-relief",
  "paint_background"
], Yo = {
  "fill-antialias": {
    type: "boolean",
    default: !0,
    expression: {
      interpolated: !1,
      parameters: [
        "zoom"
      ]
    },
    "property-type": "data-constant"
  },
  "fill-opacity": {
    type: "number",
    default: 1,
    minimum: 0,
    maximum: 1,
    transition: !0,
    expression: {
      interpolated: !0,
      parameters: [
        "zoom",
        "feature",
        "feature-state"
      ]
    },
    "property-type": "data-driven"
  },
  "fill-color": {
    type: "color",
    default: "#000000",
    transition: !0,
    requires: [
      {
        "!": "fill-pattern"
      }
    ],
    expression: {
      interpolated: !0,
      parameters: [
        "zoom",
        "feature",
        "feature-state"
      ]
    },
    "property-type": "data-driven"
  },
  "fill-outline-color": {
    type: "color",
    transition: !0,
    requires: [
      {
        "!": "fill-pattern"
      },
      {
        "fill-antialias": !0
      }
    ],
    expression: {
      interpolated: !0,
      parameters: [
        "zoom",
        "feature",
        "feature-state"
      ]
    },
    "property-type": "data-driven"
  },
  "fill-translate": {
    type: "array",
    value: "number",
    length: 2,
    default: [
      0,
      0
    ],
    transition: !0,
    units: "pixels",
    expression: {
      interpolated: !0,
      parameters: [
        "zoom"
      ]
    },
    "property-type": "data-constant"
  },
  "fill-translate-anchor": {
    type: "enum",
    values: {
      map: {},
      viewport: {}
    },
    default: "map",
    requires: [
      "fill-translate"
    ],
    expression: {
      interpolated: !1,
      parameters: [
        "zoom"
      ]
    },
    "property-type": "data-constant"
  },
  "fill-pattern": {
    type: "resolvedImage",
    transition: !0,
    expression: {
      interpolated: !1,
      parameters: [
        "zoom",
        "feature"
      ]
    },
    "property-type": "cross-faded-data-driven"
  }
}, Xo = {
  "line-opacity": {
    type: "number",
    default: 1,
    minimum: 0,
    maximum: 1,
    transition: !0,
    expression: {
      interpolated: !0,
      parameters: [
        "zoom",
        "feature",
        "feature-state"
      ]
    },
    "property-type": "data-driven"
  },
  "line-color": {
    type: "color",
    default: "#000000",
    transition: !0,
    requires: [
      {
        "!": "line-pattern"
      }
    ],
    expression: {
      interpolated: !0,
      parameters: [
        "zoom",
        "feature",
        "feature-state"
      ]
    },
    "property-type": "data-driven"
  },
  "line-translate": {
    type: "array",
    value: "number",
    length: 2,
    default: [
      0,
      0
    ],
    transition: !0,
    units: "pixels",
    expression: {
      interpolated: !0,
      parameters: [
        "zoom"
      ]
    },
    "property-type": "data-constant"
  },
  "line-translate-anchor": {
    type: "enum",
    values: {
      map: {},
      viewport: {}
    },
    default: "map",
    requires: [
      "line-translate"
    ],
    expression: {
      interpolated: !1,
      parameters: [
        "zoom"
      ]
    },
    "property-type": "data-constant"
  },
  "line-width": {
    type: "number",
    default: 1,
    minimum: 0,
    transition: !0,
    units: "pixels",
    expression: {
      interpolated: !0,
      parameters: [
        "zoom",
        "feature",
        "feature-state"
      ]
    },
    "property-type": "data-driven"
  },
  "line-gap-width": {
    type: "number",
    default: 0,
    minimum: 0,
    transition: !0,
    units: "pixels",
    expression: {
      interpolated: !0,
      parameters: [
        "zoom",
        "feature",
        "feature-state"
      ]
    },
    "property-type": "data-driven"
  },
  "line-offset": {
    type: "number",
    default: 0,
    transition: !0,
    units: "pixels",
    expression: {
      interpolated: !0,
      parameters: [
        "zoom",
        "feature",
        "feature-state"
      ]
    },
    "property-type": "data-driven"
  },
  "line-blur": {
    type: "number",
    default: 0,
    minimum: 0,
    transition: !0,
    units: "pixels",
    expression: {
      interpolated: !0,
      parameters: [
        "zoom",
        "feature",
        "feature-state"
      ]
    },
    "property-type": "data-driven"
  },
  "line-dasharray": {
    type: "array",
    value: "number",
    minimum: 0,
    transition: !0,
    units: "line widths",
    requires: [
      {
        "!": "line-pattern"
      }
    ],
    expression: {
      interpolated: !1,
      parameters: [
        "zoom"
      ]
    },
    "property-type": "cross-faded"
  },
  "line-pattern": {
    type: "resolvedImage",
    transition: !0,
    expression: {
      interpolated: !1,
      parameters: [
        "zoom",
        "feature"
      ]
    },
    "property-type": "cross-faded-data-driven"
  },
  "line-gradient": {
    type: "color",
    transition: !1,
    requires: [
      {
        "!": "line-dasharray"
      },
      {
        "!": "line-pattern"
      },
      {
        source: "geojson",
        has: {
          lineMetrics: !0
        }
      }
    ],
    expression: {
      interpolated: !0,
      parameters: [
        "line-progress"
      ]
    },
    "property-type": "color-ramp"
  }
}, Qo = {
  "circle-radius": {
    type: "number",
    default: 5,
    minimum: 0,
    transition: !0,
    units: "pixels",
    expression: {
      interpolated: !0,
      parameters: [
        "zoom",
        "feature",
        "feature-state"
      ]
    },
    "property-type": "data-driven"
  },
  "circle-color": {
    type: "color",
    default: "#000000",
    transition: !0,
    expression: {
      interpolated: !0,
      parameters: [
        "zoom",
        "feature",
        "feature-state"
      ]
    },
    "property-type": "data-driven"
  },
  "circle-blur": {
    type: "number",
    default: 0,
    transition: !0,
    expression: {
      interpolated: !0,
      parameters: [
        "zoom",
        "feature",
        "feature-state"
      ]
    },
    "property-type": "data-driven"
  },
  "circle-opacity": {
    type: "number",
    default: 1,
    minimum: 0,
    maximum: 1,
    transition: !0,
    expression: {
      interpolated: !0,
      parameters: [
        "zoom",
        "feature",
        "feature-state"
      ]
    },
    "property-type": "data-driven"
  },
  "circle-translate": {
    type: "array",
    value: "number",
    length: 2,
    default: [
      0,
      0
    ],
    transition: !0,
    units: "pixels",
    expression: {
      interpolated: !0,
      parameters: [
        "zoom"
      ]
    },
    "property-type": "data-constant"
  },
  "circle-translate-anchor": {
    type: "enum",
    values: {
      map: {},
      viewport: {}
    },
    default: "map",
    requires: [
      "circle-translate"
    ],
    expression: {
      interpolated: !1,
      parameters: [
        "zoom"
      ]
    },
    "property-type": "data-constant"
  },
  "circle-pitch-scale": {
    type: "enum",
    values: {
      map: {},
      viewport: {}
    },
    default: "map",
    expression: {
      interpolated: !1,
      parameters: [
        "zoom"
      ]
    },
    "property-type": "data-constant"
  },
  "circle-pitch-alignment": {
    type: "enum",
    values: {
      map: {},
      viewport: {}
    },
    default: "viewport",
    expression: {
      interpolated: !1,
      parameters: [
        "zoom"
      ]
    },
    "property-type": "data-constant"
  },
  "circle-stroke-width": {
    type: "number",
    default: 0,
    minimum: 0,
    transition: !0,
    units: "pixels",
    expression: {
      interpolated: !0,
      parameters: [
        "zoom",
        "feature",
        "feature-state"
      ]
    },
    "property-type": "data-driven"
  },
  "circle-stroke-color": {
    type: "color",
    default: "#000000",
    transition: !0,
    expression: {
      interpolated: !0,
      parameters: [
        "zoom",
        "feature",
        "feature-state"
      ]
    },
    "property-type": "data-driven"
  },
  "circle-stroke-opacity": {
    type: "number",
    default: 1,
    minimum: 0,
    maximum: 1,
    transition: !0,
    expression: {
      interpolated: !0,
      parameters: [
        "zoom",
        "feature",
        "feature-state"
      ]
    },
    "property-type": "data-driven"
  }
}, ei = {
  "heatmap-radius": {
    type: "number",
    default: 30,
    minimum: 1,
    transition: !0,
    units: "pixels",
    expression: {
      interpolated: !0,
      parameters: [
        "zoom",
        "feature",
        "feature-state"
      ]
    },
    "property-type": "data-driven"
  },
  "heatmap-weight": {
    type: "number",
    default: 1,
    minimum: 0,
    transition: !1,
    expression: {
      interpolated: !0,
      parameters: [
        "zoom",
        "feature",
        "feature-state"
      ]
    },
    "property-type": "data-driven"
  },
  "heatmap-intensity": {
    type: "number",
    default: 1,
    minimum: 0,
    transition: !0,
    expression: {
      interpolated: !0,
      parameters: [
        "zoom"
      ]
    },
    "property-type": "data-constant"
  },
  "heatmap-color": {
    type: "color",
    default: [
      "interpolate",
      [
        "linear"
      ],
      [
        "heatmap-density"
      ],
      0,
      "rgba(0, 0, 255, 0)",
      0.1,
      "royalblue",
      0.3,
      "cyan",
      0.5,
      "lime",
      0.7,
      "yellow",
      1,
      "red"
    ],
    transition: !1,
    expression: {
      interpolated: !0,
      parameters: [
        "heatmap-density"
      ]
    },
    "property-type": "color-ramp"
  },
  "heatmap-opacity": {
    type: "number",
    default: 1,
    minimum: 0,
    maximum: 1,
    transition: !0,
    expression: {
      interpolated: !0,
      parameters: [
        "zoom"
      ]
    },
    "property-type": "data-constant"
  }
}, ti = {
  "icon-opacity": {
    type: "number",
    default: 1,
    minimum: 0,
    maximum: 1,
    transition: !0,
    requires: [
      "icon-image"
    ],
    expression: {
      interpolated: !0,
      parameters: [
        "zoom",
        "feature",
        "feature-state"
      ]
    },
    "property-type": "data-driven"
  },
  "icon-color": {
    type: "color",
    default: "#000000",
    transition: !0,
    requires: [
      "icon-image"
    ],
    expression: {
      interpolated: !0,
      parameters: [
        "zoom",
        "feature",
        "feature-state"
      ]
    },
    "property-type": "data-driven"
  },
  "icon-halo-color": {
    type: "color",
    default: "rgba(0, 0, 0, 0)",
    transition: !0,
    requires: [
      "icon-image"
    ],
    expression: {
      interpolated: !0,
      parameters: [
        "zoom",
        "feature",
        "feature-state"
      ]
    },
    "property-type": "data-driven"
  },
  "icon-halo-width": {
    type: "number",
    default: 0,
    minimum: 0,
    transition: !0,
    units: "pixels",
    requires: [
      "icon-image"
    ],
    expression: {
      interpolated: !0,
      parameters: [
        "zoom",
        "feature",
        "feature-state"
      ]
    },
    "property-type": "data-driven"
  },
  "icon-halo-blur": {
    type: "number",
    default: 0,
    minimum: 0,
    transition: !0,
    units: "pixels",
    requires: [
      "icon-image"
    ],
    expression: {
      interpolated: !0,
      parameters: [
        "zoom",
        "feature",
        "feature-state"
      ]
    },
    "property-type": "data-driven"
  },
  "icon-translate": {
    type: "array",
    value: "number",
    length: 2,
    default: [
      0,
      0
    ],
    transition: !0,
    units: "pixels",
    requires: [
      "icon-image"
    ],
    expression: {
      interpolated: !0,
      parameters: [
        "zoom"
      ]
    },
    "property-type": "data-constant"
  },
  "icon-translate-anchor": {
    type: "enum",
    values: {
      map: {},
      viewport: {}
    },
    default: "map",
    requires: [
      "icon-image",
      "icon-translate"
    ],
    expression: {
      interpolated: !1,
      parameters: [
        "zoom"
      ]
    },
    "property-type": "data-constant"
  },
  "text-opacity": {
    type: "number",
    default: 1,
    minimum: 0,
    maximum: 1,
    transition: !0,
    requires: [
      "text-field"
    ],
    expression: {
      interpolated: !0,
      parameters: [
        "zoom",
        "feature",
        "feature-state"
      ]
    },
    "property-type": "data-driven"
  },
  "text-color": {
    type: "color",
    default: "#000000",
    transition: !0,
    overridable: !0,
    requires: [
      "text-field"
    ],
    expression: {
      interpolated: !0,
      parameters: [
        "zoom",
        "feature",
        "feature-state"
      ]
    },
    "property-type": "data-driven"
  },
  "text-halo-color": {
    type: "color",
    default: "rgba(0, 0, 0, 0)",
    transition: !0,
    requires: [
      "text-field"
    ],
    expression: {
      interpolated: !0,
      parameters: [
        "zoom",
        "feature",
        "feature-state"
      ]
    },
    "property-type": "data-driven"
  },
  "text-halo-width": {
    type: "number",
    default: 0,
    minimum: 0,
    transition: !0,
    units: "pixels",
    requires: [
      "text-field"
    ],
    expression: {
      interpolated: !0,
      parameters: [
        "zoom",
        "feature",
        "feature-state"
      ]
    },
    "property-type": "data-driven"
  },
  "text-halo-blur": {
    type: "number",
    default: 0,
    minimum: 0,
    transition: !0,
    units: "pixels",
    requires: [
      "text-field"
    ],
    expression: {
      interpolated: !0,
      parameters: [
        "zoom",
        "feature",
        "feature-state"
      ]
    },
    "property-type": "data-driven"
  },
  "text-translate": {
    type: "array",
    value: "number",
    length: 2,
    default: [
      0,
      0
    ],
    transition: !0,
    units: "pixels",
    requires: [
      "text-field"
    ],
    expression: {
      interpolated: !0,
      parameters: [
        "zoom"
      ]
    },
    "property-type": "data-constant"
  },
  "text-translate-anchor": {
    type: "enum",
    values: {
      map: {},
      viewport: {}
    },
    default: "map",
    requires: [
      "text-field",
      "text-translate"
    ],
    expression: {
      interpolated: !1,
      parameters: [
        "zoom"
      ]
    },
    "property-type": "data-constant"
  }
}, ri = {
  "raster-opacity": {
    type: "number",
    default: 1,
    minimum: 0,
    maximum: 1,
    transition: !0,
    expression: {
      interpolated: !0,
      parameters: [
        "zoom"
      ]
    },
    "property-type": "data-constant"
  },
  "raster-hue-rotate": {
    type: "number",
    default: 0,
    period: 360,
    transition: !0,
    units: "degrees",
    expression: {
      interpolated: !0,
      parameters: [
        "zoom"
      ]
    },
    "property-type": "data-constant"
  },
  "raster-brightness-min": {
    type: "number",
    default: 0,
    minimum: 0,
    maximum: 1,
    transition: !0,
    expression: {
      interpolated: !0,
      parameters: [
        "zoom"
      ]
    },
    "property-type": "data-constant"
  },
  "raster-brightness-max": {
    type: "number",
    default: 1,
    minimum: 0,
    maximum: 1,
    transition: !0,
    expression: {
      interpolated: !0,
      parameters: [
        "zoom"
      ]
    },
    "property-type": "data-constant"
  },
  "raster-saturation": {
    type: "number",
    default: 0,
    minimum: -1,
    maximum: 1,
    transition: !0,
    expression: {
      interpolated: !0,
      parameters: [
        "zoom"
      ]
    },
    "property-type": "data-constant"
  },
  "raster-contrast": {
    type: "number",
    default: 0,
    minimum: -1,
    maximum: 1,
    transition: !0,
    expression: {
      interpolated: !0,
      parameters: [
        "zoom"
      ]
    },
    "property-type": "data-constant"
  },
  "raster-resampling": {
    type: "enum",
    values: {
      linear: {},
      nearest: {}
    },
    default: "linear",
    expression: {
      interpolated: !1,
      parameters: [
        "zoom"
      ]
    },
    "property-type": "data-constant"
  },
  "raster-fade-duration": {
    type: "number",
    default: 300,
    minimum: 0,
    transition: !1,
    units: "milliseconds",
    expression: {
      interpolated: !0,
      parameters: [
        "zoom"
      ]
    },
    "property-type": "data-constant"
  }
}, ni = {
  "hillshade-illumination-direction": {
    type: "numberArray",
    default: 335,
    minimum: 0,
    maximum: 359,
    transition: !1,
    expression: {
      interpolated: !0,
      parameters: [
        "zoom"
      ]
    },
    "property-type": "data-constant"
  },
  "hillshade-illumination-altitude": {
    type: "numberArray",
    default: 45,
    minimum: 0,
    maximum: 90,
    transition: !1,
    expression: {
      interpolated: !0,
      parameters: [
        "zoom"
      ]
    },
    "property-type": "data-constant"
  },
  "hillshade-illumination-anchor": {
    type: "enum",
    values: {
      map: {},
      viewport: {}
    },
    default: "viewport",
    expression: {
      interpolated: !1,
      parameters: [
        "zoom"
      ]
    },
    "property-type": "data-constant"
  },
  "hillshade-exaggeration": {
    type: "number",
    default: 0.5,
    minimum: 0,
    maximum: 1,
    transition: !0,
    expression: {
      interpolated: !0,
      parameters: [
        "zoom"
      ]
    },
    "property-type": "data-constant"
  },
  "hillshade-shadow-color": {
    type: "colorArray",
    default: "#000000",
    transition: !0,
    expression: {
      interpolated: !0,
      parameters: [
        "zoom"
      ]
    },
    "property-type": "data-constant"
  },
  "hillshade-highlight-color": {
    type: "colorArray",
    default: "#FFFFFF",
    transition: !0,
    expression: {
      interpolated: !0,
      parameters: [
        "zoom"
      ]
    },
    "property-type": "data-constant"
  },
  "hillshade-accent-color": {
    type: "color",
    default: "#000000",
    transition: !0,
    expression: {
      interpolated: !0,
      parameters: [
        "zoom"
      ]
    },
    "property-type": "data-constant"
  },
  "hillshade-method": {
    type: "enum",
    values: {
      standard: {},
      basic: {},
      combined: {},
      igor: {},
      multidirectional: {}
    },
    default: "standard",
    expression: {
      interpolated: !1,
      parameters: [
        "zoom"
      ]
    },
    "property-type": "data-constant"
  }
}, ai = {
  "background-color": {
    type: "color",
    default: "#000000",
    transition: !0,
    requires: [
      {
        "!": "background-pattern"
      }
    ],
    expression: {
      interpolated: !0,
      parameters: [
        "zoom"
      ]
    },
    "property-type": "data-constant"
  },
  "background-pattern": {
    type: "resolvedImage",
    transition: !0,
    expression: {
      interpolated: !1,
      parameters: [
        "zoom"
      ]
    },
    "property-type": "cross-faded"
  },
  "background-opacity": {
    type: "number",
    default: 1,
    minimum: 0,
    maximum: 1,
    transition: !0,
    expression: {
      interpolated: !0,
      parameters: [
        "zoom"
      ]
    },
    "property-type": "data-constant"
  }
}, oi = {
  duration: {
    type: "number",
    default: 300,
    minimum: 0,
    units: "milliseconds"
  },
  delay: {
    type: "number",
    default: 0,
    minimum: 0,
    units: "milliseconds"
  }
}, ii = {
  "*": {
    type: "string"
  }
}, si = {
  $version: So,
  $root: xo,
  sources: ko,
  source: Lo,
  source_vector: Co,
  source_raster: Ao,
  source_raster_dem: To,
  source_geojson: Io,
  source_video: Eo,
  source_image: Mo,
  layer: _o,
  layout: zo,
  layout_background: Po,
  layout_fill: Ro,
  layout_circle: $o,
  layout_heatmap: jo,
  "layout_fill-extrusion": {
    visibility: {
      type: "enum",
      values: {
        visible: {},
        none: {}
      },
      default: "visible",
      "property-type": "constant"
    }
  },
  layout_line: Oo,
  layout_symbol: No,
  layout_raster: Fo,
  layout_hillshade: Do,
  "layout_color-relief": {
    visibility: {
      type: "enum",
      values: {
        visible: {},
        none: {}
      },
      default: "visible",
      "property-type": "constant"
    }
  },
  filter: qo,
  filter_operator: Bo,
  geometry_type: Uo,
  function: {
    expression: {
      type: "expression"
    },
    stops: {
      type: "array",
      value: "function_stop"
    },
    base: {
      type: "number",
      default: 1,
      minimum: 0
    },
    property: {
      type: "string",
      default: "$zoom"
    },
    type: {
      type: "enum",
      values: {
        identity: {},
        exponential: {},
        interval: {},
        categorical: {}
      },
      default: "exponential"
    },
    colorSpace: {
      type: "enum",
      values: {
        rgb: {},
        lab: {},
        hcl: {}
      },
      default: "rgb"
    },
    default: {
      type: "*",
      required: !1
    }
  },
  function_stop: Go,
  expression: Vo,
  light: Ho,
  sky: Ko,
  terrain: Wo,
  projection: Zo,
  paint: Jo,
  paint_fill: Yo,
  "paint_fill-extrusion": {
    "fill-extrusion-opacity": {
      type: "number",
      default: 1,
      minimum: 0,
      maximum: 1,
      transition: !0,
      expression: {
        interpolated: !0,
        parameters: [
          "zoom"
        ]
      },
      "property-type": "data-constant"
    },
    "fill-extrusion-color": {
      type: "color",
      default: "#000000",
      transition: !0,
      requires: [
        {
          "!": "fill-extrusion-pattern"
        }
      ],
      expression: {
        interpolated: !0,
        parameters: [
          "zoom",
          "feature",
          "feature-state"
        ]
      },
      "property-type": "data-driven"
    },
    "fill-extrusion-translate": {
      type: "array",
      value: "number",
      length: 2,
      default: [
        0,
        0
      ],
      transition: !0,
      units: "pixels",
      expression: {
        interpolated: !0,
        parameters: [
          "zoom"
        ]
      },
      "property-type": "data-constant"
    },
    "fill-extrusion-translate-anchor": {
      type: "enum",
      values: {
        map: {},
        viewport: {}
      },
      default: "map",
      requires: [
        "fill-extrusion-translate"
      ],
      expression: {
        interpolated: !1,
        parameters: [
          "zoom"
        ]
      },
      "property-type": "data-constant"
    },
    "fill-extrusion-pattern": {
      type: "resolvedImage",
      transition: !0,
      expression: {
        interpolated: !1,
        parameters: [
          "zoom",
          "feature"
        ]
      },
      "property-type": "cross-faded-data-driven"
    },
    "fill-extrusion-height": {
      type: "number",
      default: 0,
      minimum: 0,
      units: "meters",
      transition: !0,
      expression: {
        interpolated: !0,
        parameters: [
          "zoom",
          "feature",
          "feature-state"
        ]
      },
      "property-type": "data-driven"
    },
    "fill-extrusion-base": {
      type: "number",
      default: 0,
      minimum: 0,
      units: "meters",
      transition: !0,
      requires: [
        "fill-extrusion-height"
      ],
      expression: {
        interpolated: !0,
        parameters: [
          "zoom",
          "feature",
          "feature-state"
        ]
      },
      "property-type": "data-driven"
    },
    "fill-extrusion-vertical-gradient": {
      type: "boolean",
      default: !0,
      transition: !1,
      expression: {
        interpolated: !1,
        parameters: [
          "zoom"
        ]
      },
      "property-type": "data-constant"
    }
  },
  paint_line: Xo,
  paint_circle: Qo,
  paint_heatmap: ei,
  paint_symbol: ti,
  paint_raster: ri,
  paint_hillshade: ni,
  "paint_color-relief": {
    "color-relief-opacity": {
      type: "number",
      default: 1,
      minimum: 0,
      maximum: 1,
      transition: !0,
      expression: {
        interpolated: !0,
        parameters: [
          "zoom"
        ]
      },
      "property-type": "data-constant"
    },
    "color-relief-color": {
      type: "color",
      transition: !1,
      expression: {
        interpolated: !0,
        parameters: [
          "elevation"
        ]
      },
      "property-type": "color-ramp"
    }
  },
  paint_background: ai,
  transition: oi,
  "property-type": {
    "data-driven": {
      type: "property-type"
    },
    "cross-faded": {
      type: "property-type"
    },
    "cross-faded-data-driven": {
      type: "property-type"
    },
    "color-ramp": {
      type: "property-type"
    },
    "data-constant": {
      type: "property-type"
    },
    constant: {
      type: "property-type"
    }
  },
  promoteId: ii
};
class h {
  constructor(e, t, n, a) {
    this.message = (e ? `${e}: ` : "") + n, a && (this.identifier = a), t != null && t.__line__ && (this.line = t.__line__);
  }
}
function yt(r, ...e) {
  for (const t of e)
    for (const n in t)
      r[n] = t[n];
  return r;
}
class ue extends Error {
  constructor(e, t) {
    super(t), this.message = t, this.key = e;
  }
}
class vr {
  constructor(e, t = []) {
    this.parent = e, this.bindings = {};
    for (const [n, a] of t)
      this.bindings[n] = a;
  }
  concat(e) {
    return new vr(this, e);
  }
  get(e) {
    if (this.bindings[e])
      return this.bindings[e];
    if (this.parent)
      return this.parent.get(e);
    throw new Error(`${e} not found in scope.`);
  }
  has(e) {
    return this.bindings[e] ? !0 : this.parent ? this.parent.has(e) : !1;
  }
}
const Lt = { kind: "null" }, g = { kind: "number" }, I = { kind: "string" }, A = { kind: "boolean" }, ce = { kind: "color" }, Ct = { kind: "projectionDefinition" }, Ie = { kind: "object" }, C = { kind: "value" }, li = { kind: "error" }, At = { kind: "collator" }, Tt = { kind: "formatted" }, It = { kind: "padding" }, Ke = { kind: "colorArray" }, Et = { kind: "numberArray" }, tt = { kind: "resolvedImage" }, Mt = { kind: "variableAnchorOffsetCollection" };
function Z(r, e) {
  return {
    kind: "array",
    itemType: r,
    N: e
  };
}
function O(r) {
  if (r.kind === "array") {
    const e = O(r.itemType);
    return typeof r.N == "number" ? `array<${e}, ${r.N}>` : r.itemType.kind === "value" ? "array" : `array<${e}>`;
  } else
    return r.kind;
}
const ui = [
  Lt,
  g,
  I,
  A,
  ce,
  Ct,
  Tt,
  Ie,
  Z(C),
  It,
  Et,
  Ke,
  tt,
  Mt
];
function We(r, e) {
  if (e.kind === "error")
    return null;
  if (r.kind === "array") {
    if (e.kind === "array" && (e.N === 0 && e.itemType.kind === "value" || !We(r.itemType, e.itemType)) && (typeof r.N != "number" || r.N === e.N))
      return null;
  } else {
    if (r.kind === e.kind)
      return null;
    if (r.kind === "value") {
      for (const t of ui)
        if (!We(t, e))
          return null;
    }
  }
  return `Expected ${O(r)} but found ${O(e)} instead.`;
}
function br(r, e) {
  return e.some((t) => t.kind === r.kind);
}
function Ee(r, e) {
  return e.some((t) => t === "null" ? r === null : t === "array" ? Array.isArray(r) : t === "object" ? r && !Array.isArray(r) && typeof r == "object" : t === typeof r);
}
function ge(r, e) {
  return r.kind === "array" && e.kind === "array" ? r.itemType.kind === e.itemType.kind && typeof r.N == "number" : r.kind === e.kind;
}
const _n = 0.96422, zn = 1, Pn = 0.82521, Rn = 4 / 29, Oe = 6 / 29, $n = 3 * Oe * Oe, ci = Oe * Oe * Oe, pi = Math.PI / 180, fi = 180 / Math.PI;
function jn(r) {
  return r = r % 360, r < 0 && (r += 360), r;
}
function On([r, e, t, n]) {
  r = Vt(r), e = Vt(e), t = Vt(t);
  let a, o;
  const i = Ht((0.2225045 * r + 0.7168786 * e + 0.0606169 * t) / zn);
  r === e && e === t ? a = o = i : (a = Ht((0.4360747 * r + 0.3850649 * e + 0.1430804 * t) / _n), o = Ht((0.0139322 * r + 0.0971045 * e + 0.7141733 * t) / Pn));
  const s = 116 * i - 16;
  return [s < 0 ? 0 : s, 500 * (a - i), 200 * (i - o), n];
}
function Vt(r) {
  return r <= 0.04045 ? r / 12.92 : Math.pow((r + 0.055) / 1.055, 2.4);
}
function Ht(r) {
  return r > ci ? Math.pow(r, 1 / 3) : r / $n + Rn;
}
function Nn([r, e, t, n]) {
  let a = (r + 16) / 116, o = isNaN(e) ? a : a + e / 500, i = isNaN(t) ? a : a - t / 200;
  return a = zn * Wt(a), o = _n * Wt(o), i = Pn * Wt(i), [
    Kt(3.1338561 * o - 1.6168667 * a - 0.4906146 * i),
    // D50 -> sRGB
    Kt(-0.9787684 * o + 1.9161415 * a + 0.033454 * i),
    Kt(0.0719453 * o - 0.2289914 * a + 1.4052427 * i),
    n
  ];
}
function Kt(r) {
  return r = r <= 304e-5 ? 12.92 * r : 1.055 * Math.pow(r, 1 / 2.4) - 0.055, r < 0 ? 0 : r > 1 ? 1 : r;
}
function Wt(r) {
  return r > Oe ? r * r * r : $n * (r - Rn);
}
function di(r) {
  const [e, t, n, a] = On(r), o = Math.sqrt(t * t + n * n);
  return [Math.round(o * 1e4) ? jn(Math.atan2(n, t) * fi) : NaN, o, e, a];
}
function yi([r, e, t, n]) {
  return r = isNaN(r) ? 0 : r * pi, Nn([t, Math.cos(r) * e, Math.sin(r) * e, n]);
}
function mi([r, e, t, n]) {
  r = jn(r), e /= 100, t /= 100;
  function a(o) {
    const i = (o + r / 30) % 12, s = e * Math.min(t, 1 - t);
    return t - s * Math.max(-1, Math.min(i - 3, 9 - i, 1));
  }
  return [a(0), a(8), a(4), n];
}
const hi = Object.hasOwn || function(e, t) {
  return Object.prototype.hasOwnProperty.call(e, t);
};
function Ve(r, e) {
  return hi(r, e) ? r[e] : void 0;
}
function gi(r) {
  if (r = r.toLowerCase().trim(), r === "transparent")
    return [0, 0, 0, 0];
  const e = Ve(vi, r);
  if (e) {
    const [a, o, i] = e;
    return [a / 255, o / 255, i / 255, 1];
  }
  if (r.startsWith("#") && /^#(?:[0-9a-f]{3,4}|[0-9a-f]{6}|[0-9a-f]{8})$/.test(r)) {
    const o = r.length < 6 ? 1 : 2;
    let i = 1;
    return [
      lt(r.slice(i, i += o)),
      lt(r.slice(i, i += o)),
      lt(r.slice(i, i += o)),
      lt(r.slice(i, i + o) || "ff")
    ];
  }
  if (r.startsWith("rgb")) {
    const a = /^rgba?\(\s*([\de.+-]+)(%)?(?:\s+|\s*(,)\s*)([\de.+-]+)(%)?(?:\s+|\s*(,)\s*)([\de.+-]+)(%)?(?:\s*([,\/])\s*([\de.+-]+)(%)?)?\s*\)$/, o = r.match(a);
    if (o) {
      const [
        i,
        // eslint-disable-line @typescript-eslint/no-unused-vars
        s,
        // <numeric>
        l,
        // %         (optional)
        u,
        // ,         (optional)
        c,
        // <numeric>
        p,
        // %         (optional)
        y,
        // ,         (optional)
        f,
        // <numeric>
        d,
        // %         (optional)
        m,
        // ,|/       (optional)
        v,
        // <numeric> (optional)
        w
        // %         (optional)
      ] = o, b = [u || " ", y || " ", m].join("");
      if (b === "  " || b === "  /" || b === ",," || b === ",,,") {
        const T = [l, p, d].join(""), j = T === "%%%" ? 100 : T === "" ? 255 : 0;
        if (j) {
          const $ = [
            $e(+s / j, 0, 1),
            $e(+c / j, 0, 1),
            $e(+f / j, 0, 1),
            v ? en(+v, w) : 1
          ];
          if (tn($))
            return $;
        }
      }
      return;
    }
  }
  const t = /^hsla?\(\s*([\de.+-]+)(?:deg)?(?:\s+|\s*(,)\s*)([\de.+-]+)%(?:\s+|\s*(,)\s*)([\de.+-]+)%(?:\s*([,\/])\s*([\de.+-]+)(%)?)?\s*\)$/, n = r.match(t);
  if (n) {
    const [
      a,
      // eslint-disable-line @typescript-eslint/no-unused-vars
      o,
      // <numeric>
      i,
      // ,         (optional)
      s,
      // <numeric>
      l,
      // ,         (optional)
      u,
      // <numeric>
      c,
      // ,|/       (optional)
      p,
      // <numeric> (optional)
      y
      // %         (optional)
    ] = n, f = [i || " ", l || " ", c].join("");
    if (f === "  " || f === "  /" || f === ",," || f === ",,,") {
      const d = [
        +o,
        $e(+s, 0, 100),
        $e(+u, 0, 100),
        p ? en(+p, y) : 1
      ];
      if (tn(d))
        return mi(d);
    }
  }
}
function lt(r) {
  return parseInt(r.padEnd(2, r), 16) / 255;
}
function en(r, e) {
  return $e(e ? r / 100 : r, 0, 1);
}
function $e(r, e, t) {
  return Math.min(Math.max(e, r), t);
}
function tn(r) {
  return !r.some(Number.isNaN);
}
const vi = {
  aliceblue: [240, 248, 255],
  antiquewhite: [250, 235, 215],
  aqua: [0, 255, 255],
  aquamarine: [127, 255, 212],
  azure: [240, 255, 255],
  beige: [245, 245, 220],
  bisque: [255, 228, 196],
  black: [0, 0, 0],
  blanchedalmond: [255, 235, 205],
  blue: [0, 0, 255],
  blueviolet: [138, 43, 226],
  brown: [165, 42, 42],
  burlywood: [222, 184, 135],
  cadetblue: [95, 158, 160],
  chartreuse: [127, 255, 0],
  chocolate: [210, 105, 30],
  coral: [255, 127, 80],
  cornflowerblue: [100, 149, 237],
  cornsilk: [255, 248, 220],
  crimson: [220, 20, 60],
  cyan: [0, 255, 255],
  darkblue: [0, 0, 139],
  darkcyan: [0, 139, 139],
  darkgoldenrod: [184, 134, 11],
  darkgray: [169, 169, 169],
  darkgreen: [0, 100, 0],
  darkgrey: [169, 169, 169],
  darkkhaki: [189, 183, 107],
  darkmagenta: [139, 0, 139],
  darkolivegreen: [85, 107, 47],
  darkorange: [255, 140, 0],
  darkorchid: [153, 50, 204],
  darkred: [139, 0, 0],
  darksalmon: [233, 150, 122],
  darkseagreen: [143, 188, 143],
  darkslateblue: [72, 61, 139],
  darkslategray: [47, 79, 79],
  darkslategrey: [47, 79, 79],
  darkturquoise: [0, 206, 209],
  darkviolet: [148, 0, 211],
  deeppink: [255, 20, 147],
  deepskyblue: [0, 191, 255],
  dimgray: [105, 105, 105],
  dimgrey: [105, 105, 105],
  dodgerblue: [30, 144, 255],
  firebrick: [178, 34, 34],
  floralwhite: [255, 250, 240],
  forestgreen: [34, 139, 34],
  fuchsia: [255, 0, 255],
  gainsboro: [220, 220, 220],
  ghostwhite: [248, 248, 255],
  gold: [255, 215, 0],
  goldenrod: [218, 165, 32],
  gray: [128, 128, 128],
  green: [0, 128, 0],
  greenyellow: [173, 255, 47],
  grey: [128, 128, 128],
  honeydew: [240, 255, 240],
  hotpink: [255, 105, 180],
  indianred: [205, 92, 92],
  indigo: [75, 0, 130],
  ivory: [255, 255, 240],
  khaki: [240, 230, 140],
  lavender: [230, 230, 250],
  lavenderblush: [255, 240, 245],
  lawngreen: [124, 252, 0],
  lemonchiffon: [255, 250, 205],
  lightblue: [173, 216, 230],
  lightcoral: [240, 128, 128],
  lightcyan: [224, 255, 255],
  lightgoldenrodyellow: [250, 250, 210],
  lightgray: [211, 211, 211],
  lightgreen: [144, 238, 144],
  lightgrey: [211, 211, 211],
  lightpink: [255, 182, 193],
  lightsalmon: [255, 160, 122],
  lightseagreen: [32, 178, 170],
  lightskyblue: [135, 206, 250],
  lightslategray: [119, 136, 153],
  lightslategrey: [119, 136, 153],
  lightsteelblue: [176, 196, 222],
  lightyellow: [255, 255, 224],
  lime: [0, 255, 0],
  limegreen: [50, 205, 50],
  linen: [250, 240, 230],
  magenta: [255, 0, 255],
  maroon: [128, 0, 0],
  mediumaquamarine: [102, 205, 170],
  mediumblue: [0, 0, 205],
  mediumorchid: [186, 85, 211],
  mediumpurple: [147, 112, 219],
  mediumseagreen: [60, 179, 113],
  mediumslateblue: [123, 104, 238],
  mediumspringgreen: [0, 250, 154],
  mediumturquoise: [72, 209, 204],
  mediumvioletred: [199, 21, 133],
  midnightblue: [25, 25, 112],
  mintcream: [245, 255, 250],
  mistyrose: [255, 228, 225],
  moccasin: [255, 228, 181],
  navajowhite: [255, 222, 173],
  navy: [0, 0, 128],
  oldlace: [253, 245, 230],
  olive: [128, 128, 0],
  olivedrab: [107, 142, 35],
  orange: [255, 165, 0],
  orangered: [255, 69, 0],
  orchid: [218, 112, 214],
  palegoldenrod: [238, 232, 170],
  palegreen: [152, 251, 152],
  paleturquoise: [175, 238, 238],
  palevioletred: [219, 112, 147],
  papayawhip: [255, 239, 213],
  peachpuff: [255, 218, 185],
  peru: [205, 133, 63],
  pink: [255, 192, 203],
  plum: [221, 160, 221],
  powderblue: [176, 224, 230],
  purple: [128, 0, 128],
  rebeccapurple: [102, 51, 153],
  red: [255, 0, 0],
  rosybrown: [188, 143, 143],
  royalblue: [65, 105, 225],
  saddlebrown: [139, 69, 19],
  salmon: [250, 128, 114],
  sandybrown: [244, 164, 96],
  seagreen: [46, 139, 87],
  seashell: [255, 245, 238],
  sienna: [160, 82, 45],
  silver: [192, 192, 192],
  skyblue: [135, 206, 235],
  slateblue: [106, 90, 205],
  slategray: [112, 128, 144],
  slategrey: [112, 128, 144],
  snow: [255, 250, 250],
  springgreen: [0, 255, 127],
  steelblue: [70, 130, 180],
  tan: [210, 180, 140],
  teal: [0, 128, 128],
  thistle: [216, 191, 216],
  tomato: [255, 99, 71],
  turquoise: [64, 224, 208],
  violet: [238, 130, 238],
  wheat: [245, 222, 179],
  white: [255, 255, 255],
  whitesmoke: [245, 245, 245],
  yellow: [255, 255, 0],
  yellowgreen: [154, 205, 50]
};
function Se(r, e, t) {
  return r + t * (e - r);
}
function Ne(r, e, t) {
  return r.map((n, a) => Se(n, e[a], t));
}
class P {
  /**
   * @param r Red component premultiplied by `alpha` 0..1
   * @param g Green component premultiplied by `alpha` 0..1
   * @param b Blue component premultiplied by `alpha` 0..1
   * @param [alpha=1] Alpha component 0..1
   * @param [premultiplied=true] Whether the `r`, `g` and `b` values have already
   * been multiplied by alpha. If `true` nothing happens if `false` then they will
   * be multiplied automatically.
   */
  constructor(e, t, n, a = 1, o = !0) {
    this.r = e, this.g = t, this.b = n, this.a = a, o || (this.r *= a, this.g *= a, this.b *= a, a || this.overwriteGetter("rgb", [e, t, n, a]));
  }
  /**
   * Parses CSS color strings and converts colors to sRGB color space if needed.
   * Officially supported color formats:
   * - keyword, e.g. 'aquamarine' or 'steelblue'
   * - hex (with 3, 4, 6 or 8 digits), e.g. '#f0f' or '#e9bebea9'
   * - rgb and rgba, e.g. 'rgb(0,240,120)' or 'rgba(0%,94%,47%,0.1)' or 'rgb(0 240 120 / .3)'
   * - hsl and hsla, e.g. 'hsl(0,0%,83%)' or 'hsla(0,0%,83%,.5)' or 'hsl(0 0% 83% / 20%)'
   *
   * @param input CSS color string to parse.
   * @returns A `Color` instance, or `undefined` if the input is not a valid color string.
   */
  static parse(e) {
    if (e instanceof P)
      return e;
    if (typeof e != "string")
      return;
    const t = gi(e);
    if (t)
      return new P(...t, !1);
  }
  /**
   * Used in color interpolation and by 'to-rgba' expression.
   *
   * @returns Gien color, with reversed alpha blending, in sRGB color space.
   */
  get rgb() {
    const { r: e, g: t, b: n, a } = this, o = a || 1 / 0;
    return this.overwriteGetter("rgb", [e / o, t / o, n / o, a]);
  }
  /**
   * Used in color interpolation.
   *
   * @returns Gien color, with reversed alpha blending, in HCL color space.
   */
  get hcl() {
    return this.overwriteGetter("hcl", di(this.rgb));
  }
  /**
   * Used in color interpolation.
   *
   * @returns Gien color, with reversed alpha blending, in LAB color space.
   */
  get lab() {
    return this.overwriteGetter("lab", On(this.rgb));
  }
  /**
   * Lazy getter pattern. When getter is called for the first time lazy value
   * is calculated and then overwrites getter function in given object instance.
   *
   * @example:
   * const redColor = Color.parse('red');
   * let x = redColor.hcl; // this will invoke `get hcl()`, which will calculate
   * // the value of red in HCL space and invoke this `overwriteGetter` function
   * // which in turn will set a field with a key 'hcl' in the `redColor` object.
   * // In other words it will override `get hcl()` from its `Color` prototype
   * // with its own property: hcl = [calculated red value in hcl].
   * let y = redColor.hcl; // next call will no longer invoke getter but simply
   * // return the previously calculated value
   * x === y; // true - `x` is exactly the same object as `y`
   *
   * @param getterKey Getter key
   * @param lazyValue Lazily calculated value to be memoized by current instance
   * @private
   */
  overwriteGetter(e, t) {
    return Object.defineProperty(this, e, { value: t }), t;
  }
  /**
   * Used by 'to-string' expression.
   *
   * @returns Serialized color in format `rgba(r,g,b,a)`
   * where r,g,b are numbers within 0..255 and alpha is number within 1..0
   *
   * @example
   * var purple = new Color.parse('purple');
   * purple.toString; // = "rgba(128,0,128,1)"
   * var translucentGreen = new Color.parse('rgba(26, 207, 26, .73)');
   * translucentGreen.toString(); // = "rgba(26,207,26,0.73)"
   */
  toString() {
    const [e, t, n, a] = this.rgb;
    return `rgba(${[e, t, n].map((o) => Math.round(o * 255)).join(",")},${a})`;
  }
  static interpolate(e, t, n, a = "rgb") {
    switch (a) {
      case "rgb": {
        const [o, i, s, l] = Ne(e.rgb, t.rgb, n);
        return new P(o, i, s, l, !1);
      }
      case "hcl": {
        const [o, i, s, l] = e.hcl, [u, c, p, y] = t.hcl;
        let f, d;
        if (!isNaN(o) && !isNaN(u)) {
          let T = u - o;
          u > o && T > 180 ? T -= 360 : u < o && o - u > 180 && (T += 360), f = o + n * T;
        } else isNaN(o) ? isNaN(u) ? f = NaN : (f = u, (s === 1 || s === 0) && (d = c)) : (f = o, (p === 1 || p === 0) && (d = i));
        const [m, v, w, b] = yi([
          f,
          d ?? Se(i, c, n),
          Se(s, p, n),
          Se(l, y, n)
        ]);
        return new P(m, v, w, b, !1);
      }
      case "lab": {
        const [o, i, s, l] = Nn(Ne(e.lab, t.lab, n));
        return new P(o, i, s, l, !1);
      }
    }
  }
}
P.black = new P(0, 0, 0, 1);
P.white = new P(1, 1, 1, 1);
P.transparent = new P(0, 0, 0, 0);
P.red = new P(1, 0, 0, 1);
class wr {
  constructor(e, t, n) {
    e ? this.sensitivity = t ? "variant" : "case" : this.sensitivity = t ? "accent" : "base", this.locale = n, this.collator = new Intl.Collator(this.locale ? this.locale : [], { sensitivity: this.sensitivity, usage: "search" });
  }
  compare(e, t) {
    return this.collator.compare(e, t);
  }
  resolvedLocale() {
    return new Intl.Collator(this.locale ? this.locale : []).resolvedOptions().locale;
  }
}
const bi = ["bottom", "center", "top"];
class nr {
  constructor(e, t, n, a, o, i) {
    this.text = e, this.image = t, this.scale = n, this.fontStack = a, this.textColor = o, this.verticalAlign = i;
  }
}
class de {
  constructor(e) {
    this.sections = e;
  }
  static fromString(e) {
    return new de([new nr(e, null, null, null, null, null)]);
  }
  isEmpty() {
    return this.sections.length === 0 ? !0 : !this.sections.some((e) => e.text.length !== 0 || e.image && e.image.name.length !== 0);
  }
  static factory(e) {
    return e instanceof de ? e : de.fromString(e);
  }
  toString() {
    return this.sections.length === 0 ? "" : this.sections.map((e) => e.text).join("");
  }
}
class X {
  constructor(e) {
    this.values = e.slice();
  }
  /**
   * Numeric padding values
   * @param input A padding value
   * @returns A `Padding` instance, or `undefined` if the input is not a valid padding value.
   */
  static parse(e) {
    if (e instanceof X)
      return e;
    if (typeof e == "number")
      return new X([e, e, e, e]);
    if (Array.isArray(e) && !(e.length < 1 || e.length > 4)) {
      for (const t of e)
        if (typeof t != "number")
          return;
      switch (e.length) {
        case 1:
          e = [e[0], e[0], e[0], e[0]];
          break;
        case 2:
          e = [e[0], e[1], e[0], e[1]];
          break;
        case 3:
          e = [e[0], e[1], e[2], e[1]];
          break;
      }
      return new X(e);
    }
  }
  toString() {
    return JSON.stringify(this.values);
  }
  static interpolate(e, t, n) {
    return new X(Ne(e.values, t.values, n));
  }
}
class Q {
  constructor(e) {
    this.values = e.slice();
  }
  /**
   * Numeric NumberArray values
   * @param input A NumberArray value
   * @returns A `NumberArray` instance, or `undefined` if the input is not a valid NumberArray value.
   */
  static parse(e) {
    if (e instanceof Q)
      return e;
    if (typeof e == "number")
      return new Q([e]);
    if (Array.isArray(e)) {
      for (const t of e)
        if (typeof t != "number")
          return;
      return new Q(e);
    }
  }
  toString() {
    return JSON.stringify(this.values);
  }
  static interpolate(e, t, n) {
    return new Q(Ne(e.values, t.values, n));
  }
}
class K {
  constructor(e) {
    this.values = e.slice();
  }
  /**
   * ColorArray values
   * @param input A ColorArray value
   * @returns A `ColorArray` instance, or `undefined` if the input is not a valid ColorArray value.
   */
  static parse(e) {
    if (e instanceof K)
      return e;
    if (typeof e == "string") {
      const n = P.parse(e);
      return n ? new K([n]) : void 0;
    }
    if (!Array.isArray(e))
      return;
    const t = [];
    for (const n of e) {
      if (typeof n != "string")
        return;
      const a = P.parse(n);
      if (!a)
        return;
      t.push(a);
    }
    return new K(t);
  }
  toString() {
    return JSON.stringify(this.values);
  }
  static interpolate(e, t, n, a = "rgb") {
    const o = [];
    if (e.values.length != t.values.length)
      throw new Error(`colorArray: Arrays have mismatched length (${e.values.length} vs. ${t.values.length}), cannot interpolate.`);
    for (let i = 0; i < e.values.length; i++)
      o.push(P.interpolate(e.values[i], t.values[i], n, a));
    return new K(o);
  }
}
class N extends Error {
  constructor(e) {
    super(e), this.name = "RuntimeError";
  }
  toJSON() {
    return this.message;
  }
}
const wi = /* @__PURE__ */ new Set(["center", "left", "right", "top", "bottom", "top-left", "top-right", "bottom-left", "bottom-right"]);
class oe {
  constructor(e) {
    this.values = e.slice();
  }
  static parse(e) {
    if (e instanceof oe)
      return e;
    if (!(!Array.isArray(e) || e.length < 1 || e.length % 2 !== 0)) {
      for (let t = 0; t < e.length; t += 2) {
        const n = e[t], a = e[t + 1];
        if (typeof n != "string" || !wi.has(n) || !Array.isArray(a) || a.length !== 2 || typeof a[0] != "number" || typeof a[1] != "number")
          return;
      }
      return new oe(e);
    }
  }
  toString() {
    return JSON.stringify(this.values);
  }
  static interpolate(e, t, n) {
    const a = e.values, o = t.values;
    if (a.length !== o.length)
      throw new N(`Cannot interpolate values of different length. from: ${e.toString()}, to: ${t.toString()}`);
    const i = [];
    for (let s = 0; s < a.length; s += 2) {
      if (a[s] !== o[s])
        throw new N(`Cannot interpolate values containing mismatched anchors. from[${s}]: ${a[s]}, to[${s}]: ${o[s]}`);
      i.push(a[s]);
      const [l, u] = a[s + 1], [c, p] = o[s + 1];
      i.push([Se(l, c, n), Se(u, p, n)]);
    }
    return new oe(i);
  }
}
class ke {
  constructor(e) {
    this.name = e.name, this.available = e.available;
  }
  toString() {
    return this.name;
  }
  static fromString(e) {
    return e ? new ke({ name: e, available: !1 }) : null;
  }
}
class re {
  constructor(e, t, n) {
    this.from = e, this.to = t, this.transition = n;
  }
  static interpolate(e, t, n) {
    return new re(e, t, n);
  }
  static parse(e) {
    if (e instanceof re)
      return e;
    if (Array.isArray(e) && e.length === 3 && typeof e[0] == "string" && typeof e[1] == "string" && typeof e[2] == "number")
      return new re(e[0], e[1], e[2]);
    if (typeof e == "object" && typeof e.from == "string" && typeof e.to == "string" && typeof e.transition == "number")
      return new re(e.from, e.to, e.transition);
    if (typeof e == "string")
      return new re(e, e, 1);
  }
}
function Fn(r, e, t, n) {
  return typeof r == "number" && r >= 0 && r <= 255 && typeof e == "number" && e >= 0 && e <= 255 && typeof t == "number" && t >= 0 && t <= 255 ? typeof n > "u" || typeof n == "number" && n >= 0 && n <= 1 ? null : `Invalid rgba value [${[r, e, t, n].join(", ")}]: 'a' must be between 0 and 1.` : `Invalid rgba value [${(typeof n == "number" ? [r, e, t, n] : [r, e, t]).join(", ")}]: 'r', 'g', and 'b' must be between 0 and 255.`;
}
function Ze(r) {
  if (r === null || typeof r == "string" || typeof r == "boolean" || typeof r == "number" || r instanceof re || r instanceof P || r instanceof wr || r instanceof de || r instanceof X || r instanceof Q || r instanceof K || r instanceof oe || r instanceof ke)
    return !0;
  if (Array.isArray(r)) {
    for (const e of r)
      if (!Ze(e))
        return !1;
    return !0;
  } else if (typeof r == "object") {
    for (const e in r)
      if (!Ze(r[e]))
        return !1;
    return !0;
  } else
    return !1;
}
function q(r) {
  if (r === null)
    return Lt;
  if (typeof r == "string")
    return I;
  if (typeof r == "boolean")
    return A;
  if (typeof r == "number")
    return g;
  if (r instanceof P)
    return ce;
  if (r instanceof re)
    return Ct;
  if (r instanceof wr)
    return At;
  if (r instanceof de)
    return Tt;
  if (r instanceof X)
    return It;
  if (r instanceof Q)
    return Et;
  if (r instanceof K)
    return Ke;
  if (r instanceof oe)
    return Mt;
  if (r instanceof ke)
    return tt;
  if (Array.isArray(r)) {
    const e = r.length;
    let t;
    for (const n of r) {
      const a = q(n);
      if (!t)
        t = a;
      else {
        if (t === a)
          continue;
        t = C;
        break;
      }
    }
    return Z(t || C, e);
  } else
    return Ie;
}
function He(r) {
  const e = typeof r;
  return r === null ? "" : e === "string" || e === "number" || e === "boolean" ? String(r) : r instanceof P || r instanceof re || r instanceof de || r instanceof X || r instanceof Q || r instanceof K || r instanceof oe || r instanceof ke ? r.toString() : JSON.stringify(r);
}
class Fe {
  constructor(e, t) {
    this.type = e, this.value = t;
  }
  static parse(e, t) {
    if (e.length !== 2)
      return t.error(`'literal' expression requires exactly one argument, but found ${e.length - 1} instead.`);
    if (!Ze(e[1]))
      return t.error("invalid value");
    const n = e[1];
    let a = q(n);
    const o = t.expectedType;
    return a.kind === "array" && a.N === 0 && o && o.kind === "array" && (typeof o.N != "number" || o.N === 0) && (a = o), new Fe(a, n);
  }
  evaluate() {
    return this.value;
  }
  eachChild() {
  }
  outputDefined() {
    return !0;
  }
}
const ut = {
  string: I,
  number: g,
  boolean: A,
  object: Ie
};
class ne {
  constructor(e, t) {
    this.type = e, this.args = t;
  }
  static parse(e, t) {
    if (e.length < 2)
      return t.error("Expected at least one argument.");
    let n = 1, a;
    const o = e[0];
    if (o === "array") {
      let s;
      if (e.length > 2) {
        const u = e[1];
        if (typeof u != "string" || !(u in ut) || u === "object")
          return t.error('The item type argument of "array" must be one of string, number, boolean', 1);
        s = ut[u], n++;
      } else
        s = C;
      let l;
      if (e.length > 3) {
        if (e[2] !== null && (typeof e[2] != "number" || e[2] < 0 || e[2] !== Math.floor(e[2])))
          return t.error('The length argument to "array" must be a positive integer literal', 2);
        l = e[2], n++;
      }
      a = Z(s, l);
    } else {
      if (!ut[o])
        throw new Error(`Types doesn't contain name = ${o}`);
      a = ut[o];
    }
    const i = [];
    for (; n < e.length; n++) {
      const s = t.parse(e[n], n, C);
      if (!s)
        return null;
      i.push(s);
    }
    return new ne(a, i);
  }
  evaluate(e) {
    for (let t = 0; t < this.args.length; t++) {
      const n = this.args[t].evaluate(e);
      if (We(this.type, q(n))) {
        if (t === this.args.length - 1)
          throw new N(`Expected value to be of type ${O(this.type)}, but found ${O(q(n))} instead.`);
      } else return n;
    }
    throw new Error();
  }
  eachChild(e) {
    this.args.forEach(e);
  }
  outputDefined() {
    return this.args.every((e) => e.outputDefined());
  }
}
const rn = {
  "to-boolean": A,
  "to-color": ce,
  "to-number": g,
  "to-string": I
};
class we {
  constructor(e, t) {
    this.type = e, this.args = t;
  }
  static parse(e, t) {
    if (e.length < 2)
      return t.error("Expected at least one argument.");
    const n = e[0];
    if (!rn[n])
      throw new Error(`Can't parse ${n} as it is not part of the known types`);
    if ((n === "to-boolean" || n === "to-string") && e.length !== 2)
      return t.error("Expected one argument.");
    const a = rn[n], o = [];
    for (let i = 1; i < e.length; i++) {
      const s = t.parse(e[i], i, C);
      if (!s)
        return null;
      o.push(s);
    }
    return new we(a, o);
  }
  evaluate(e) {
    switch (this.type.kind) {
      case "boolean":
        return !!this.args[0].evaluate(e);
      case "color": {
        let t, n;
        for (const a of this.args) {
          if (t = a.evaluate(e), n = null, t instanceof P)
            return t;
          if (typeof t == "string") {
            const o = e.parseColor(t);
            if (o)
              return o;
          } else if (Array.isArray(t) && (t.length < 3 || t.length > 4 ? n = `Invalid rgba value ${JSON.stringify(t)}: expected an array containing either three or four numeric values.` : n = Fn(t[0], t[1], t[2], t[3]), !n))
            return new P(t[0] / 255, t[1] / 255, t[2] / 255, t[3]);
        }
        throw new N(n || `Could not parse color from value '${typeof t == "string" ? t : JSON.stringify(t)}'`);
      }
      case "padding": {
        let t;
        for (const n of this.args) {
          t = n.evaluate(e);
          const a = X.parse(t);
          if (a)
            return a;
        }
        throw new N(`Could not parse padding from value '${typeof t == "string" ? t : JSON.stringify(t)}'`);
      }
      case "numberArray": {
        let t;
        for (const n of this.args) {
          t = n.evaluate(e);
          const a = Q.parse(t);
          if (a)
            return a;
        }
        throw new N(`Could not parse numberArray from value '${typeof t == "string" ? t : JSON.stringify(t)}'`);
      }
      case "colorArray": {
        let t;
        for (const n of this.args) {
          t = n.evaluate(e);
          const a = K.parse(t);
          if (a)
            return a;
        }
        throw new N(`Could not parse colorArray from value '${typeof t == "string" ? t : JSON.stringify(t)}'`);
      }
      case "variableAnchorOffsetCollection": {
        let t;
        for (const n of this.args) {
          t = n.evaluate(e);
          const a = oe.parse(t);
          if (a)
            return a;
        }
        throw new N(`Could not parse variableAnchorOffsetCollection from value '${typeof t == "string" ? t : JSON.stringify(t)}'`);
      }
      case "number": {
        let t = null;
        for (const n of this.args) {
          if (t = n.evaluate(e), t === null)
            return 0;
          const a = Number(t);
          if (!isNaN(a))
            return a;
        }
        throw new N(`Could not convert ${JSON.stringify(t)} to number.`);
      }
      case "formatted":
        return de.fromString(He(this.args[0].evaluate(e)));
      case "resolvedImage":
        return ke.fromString(He(this.args[0].evaluate(e)));
      case "projectionDefinition":
        return this.args[0].evaluate(e);
      default:
        return He(this.args[0].evaluate(e));
    }
  }
  eachChild(e) {
    this.args.forEach(e);
  }
  outputDefined() {
    return this.args.every((e) => e.outputDefined());
  }
}
const Si = ["Unknown", "Point", "LineString", "Polygon"];
class Dn {
  constructor() {
    this.globals = null, this.feature = null, this.featureState = null, this.formattedSection = null, this._parseColorCache = /* @__PURE__ */ new Map(), this.availableImages = null, this.canonical = null;
  }
  id() {
    return this.feature && "id" in this.feature ? this.feature.id : null;
  }
  geometryType() {
    return this.feature ? typeof this.feature.type == "number" ? Si[this.feature.type] : this.feature.type : null;
  }
  geometry() {
    return this.feature && "geometry" in this.feature ? this.feature.geometry : null;
  }
  canonicalID() {
    return this.canonical;
  }
  properties() {
    return this.feature && this.feature.properties || {};
  }
  parseColor(e) {
    let t = this._parseColorCache.get(e);
    return t || (t = P.parse(e), this._parseColorCache.set(e, t)), t;
  }
}
class _t {
  constructor(e, t, n = [], a, o = new vr(), i = []) {
    this.registry = e, this.path = n, this.key = n.map((s) => `[${s}]`).join(""), this.scope = o, this.errors = i, this.expectedType = a, this._isConstant = t;
  }
  /**
   * @param expr the JSON expression to parse
   * @param index the optional argument index if this expression is an argument of a parent expression that's being parsed
   * @param options
   * @param options.omitTypeAnnotations set true to omit inferred type annotations.  Caller beware: with this option set, the parsed expression's type will NOT satisfy `expectedType` if it would normally be wrapped in an inferred annotation.
   * @private
   */
  parse(e, t, n, a, o = {}) {
    return t ? this.concat(t, n, a)._parse(e, o) : this._parse(e, o);
  }
  _parse(e, t) {
    (e === null || typeof e == "string" || typeof e == "boolean" || typeof e == "number") && (e = ["literal", e]);
    function n(a, o, i) {
      return i === "assert" ? new ne(o, [a]) : i === "coerce" ? new we(o, [a]) : a;
    }
    if (Array.isArray(e)) {
      if (e.length === 0)
        return this.error('Expected an array with at least one element. If you wanted a literal array, use ["literal", []].');
      const a = e[0];
      if (typeof a != "string")
        return this.error(`Expression name must be a string, but found ${typeof a} instead. If you wanted a literal array, use ["literal", [...]].`, 0), null;
      const o = this.registry[a];
      if (o) {
        let i = o.parse(e, this);
        if (!i)
          return null;
        if (this.expectedType) {
          const s = this.expectedType, l = i.type;
          if ((s.kind === "string" || s.kind === "number" || s.kind === "boolean" || s.kind === "object" || s.kind === "array") && l.kind === "value")
            i = n(i, s, t.typeAnnotation || "assert");
          else if (s.kind === "projectionDefinition" && ["string", "array"].includes(l.kind) || ["color", "formatted", "resolvedImage"].includes(s.kind) && ["value", "string"].includes(l.kind) || ["padding", "numberArray"].includes(s.kind) && ["value", "number", "array"].includes(l.kind) || s.kind === "colorArray" && ["value", "string", "array"].includes(l.kind) || s.kind === "variableAnchorOffsetCollection" && ["value", "array"].includes(l.kind))
            i = n(i, s, t.typeAnnotation || "coerce");
          else if (this.checkSubtype(s, l))
            return null;
        }
        if (!(i instanceof Fe) && i.type.kind !== "resolvedImage" && this._isConstant(i)) {
          const s = new Dn();
          try {
            i = new Fe(i.type, i.evaluate(s));
          } catch (l) {
            return this.error(l.message), null;
          }
        }
        return i;
      }
      return this.error(`Unknown expression "${a}". If you wanted a literal array, use ["literal", [...]].`, 0);
    } else return typeof e > "u" ? this.error("'undefined' value invalid. Use null instead.") : typeof e == "object" ? this.error('Bare objects invalid. Use ["literal", {...}] instead.') : this.error(`Expected an array, but found ${typeof e} instead.`);
  }
  /**
   * Returns a copy of this context suitable for parsing the subexpression at
   * index `index`, optionally appending to 'let' binding map.
   *
   * Note that `errors` property, intended for collecting errors while
   * parsing, is copied by reference rather than cloned.
   * @private
   */
  concat(e, t, n) {
    const a = typeof e == "number" ? this.path.concat(e) : this.path, o = n ? this.scope.concat(n) : this.scope;
    return new _t(this.registry, this._isConstant, a, t || null, o, this.errors);
  }
  /**
   * Push a parsing (or type checking) error into the `this.errors`
   * @param error The message
   * @param keys Optionally specify the source of the error at a child
   * of the current expression at `this.key`.
   * @private
   */
  error(e, ...t) {
    const n = `${this.key}${t.map((a) => `[${a}]`).join("")}`;
    this.errors.push(new ue(n, e));
  }
  /**
   * Returns null if `t` is a subtype of `expected`; otherwise returns an
   * error message and also pushes it to `this.errors`.
   * @param expected The expected type
   * @param t The actual type
   * @returns null if `t` is a subtype of `expected`; otherwise returns an error message
   */
  checkSubtype(e, t) {
    const n = We(e, t);
    return n && this.error(n), n;
  }
}
class zt {
  constructor(e, t) {
    this.type = t.type, this.bindings = [].concat(e), this.result = t;
  }
  evaluate(e) {
    return this.result.evaluate(e);
  }
  eachChild(e) {
    for (const t of this.bindings)
      e(t[1]);
    e(this.result);
  }
  static parse(e, t) {
    if (e.length < 4)
      return t.error(`Expected at least 3 arguments, but found ${e.length - 1} instead.`);
    const n = [];
    for (let o = 1; o < e.length - 1; o += 2) {
      const i = e[o];
      if (typeof i != "string")
        return t.error(`Expected string, but found ${typeof i} instead.`, o);
      if (/[^a-zA-Z0-9_]/.test(i))
        return t.error("Variable names must contain only alphanumeric characters or '_'.", o);
      const s = t.parse(e[o + 1], o + 1);
      if (!s)
        return null;
      n.push([i, s]);
    }
    const a = t.parse(e[e.length - 1], e.length - 1, t.expectedType, n);
    return a ? new zt(n, a) : null;
  }
  outputDefined() {
    return this.result.outputDefined();
  }
}
class Pt {
  constructor(e, t) {
    this.type = t.type, this.name = e, this.boundExpression = t;
  }
  static parse(e, t) {
    if (e.length !== 2 || typeof e[1] != "string")
      return t.error("'var' expression requires exactly one string literal argument.");
    const n = e[1];
    return t.scope.has(n) ? new Pt(n, t.scope.get(n)) : t.error(`Unknown variable "${n}". Make sure "${n}" has been bound in an enclosing "let" expression before using it.`, 1);
  }
  evaluate(e) {
    return this.boundExpression.evaluate(e);
  }
  eachChild() {
  }
  outputDefined() {
    return !1;
  }
}
class Sr {
  constructor(e, t, n) {
    this.type = e, this.index = t, this.input = n;
  }
  static parse(e, t) {
    if (e.length !== 3)
      return t.error(`Expected 2 arguments, but found ${e.length - 1} instead.`);
    const n = t.parse(e[1], 1, g), a = t.parse(e[2], 2, Z(t.expectedType || C));
    if (!n || !a)
      return null;
    const o = a.type;
    return new Sr(o.itemType, n, a);
  }
  evaluate(e) {
    const t = this.index.evaluate(e), n = this.input.evaluate(e);
    if (t < 0)
      throw new N(`Array index out of bounds: ${t} < 0.`);
    if (t >= n.length)
      throw new N(`Array index out of bounds: ${t} > ${n.length - 1}.`);
    if (t !== Math.floor(t))
      throw new N(`Array index must be an integer, but found ${t} instead.`);
    return n[t];
  }
  eachChild(e) {
    e(this.index), e(this.input);
  }
  outputDefined() {
    return !1;
  }
}
class xr {
  constructor(e, t) {
    this.type = A, this.needle = e, this.haystack = t;
  }
  static parse(e, t) {
    if (e.length !== 3)
      return t.error(`Expected 2 arguments, but found ${e.length - 1} instead.`);
    const n = t.parse(e[1], 1, C), a = t.parse(e[2], 2, C);
    return !n || !a ? null : br(n.type, [A, I, g, Lt, C]) ? new xr(n, a) : t.error(`Expected first argument to be of type boolean, string, number or null, but found ${O(n.type)} instead`);
  }
  evaluate(e) {
    const t = this.needle.evaluate(e), n = this.haystack.evaluate(e);
    if (!n)
      return !1;
    if (!Ee(t, ["boolean", "string", "number", "null"]))
      throw new N(`Expected first argument to be of type boolean, string, number or null, but found ${O(q(t))} instead.`);
    if (!Ee(n, ["string", "array"]))
      throw new N(`Expected second argument to be of type array or string, but found ${O(q(n))} instead.`);
    return n.indexOf(t) >= 0;
  }
  eachChild(e) {
    e(this.needle), e(this.haystack);
  }
  outputDefined() {
    return !0;
  }
}
class mt {
  constructor(e, t, n) {
    this.type = g, this.needle = e, this.haystack = t, this.fromIndex = n;
  }
  static parse(e, t) {
    if (e.length <= 2 || e.length >= 5)
      return t.error(`Expected 3 or 4 arguments, but found ${e.length - 1} instead.`);
    const n = t.parse(e[1], 1, C), a = t.parse(e[2], 2, C);
    if (!n || !a)
      return null;
    if (!br(n.type, [A, I, g, Lt, C]))
      return t.error(`Expected first argument to be of type boolean, string, number or null, but found ${O(n.type)} instead`);
    if (e.length === 4) {
      const o = t.parse(e[3], 3, g);
      return o ? new mt(n, a, o) : null;
    } else
      return new mt(n, a);
  }
  evaluate(e) {
    const t = this.needle.evaluate(e), n = this.haystack.evaluate(e);
    if (!Ee(t, ["boolean", "string", "number", "null"]))
      throw new N(`Expected first argument to be of type boolean, string, number or null, but found ${O(q(t))} instead.`);
    let a;
    if (this.fromIndex && (a = this.fromIndex.evaluate(e)), Ee(n, ["string"])) {
      const o = n.indexOf(t, a);
      return o === -1 ? -1 : [...n.slice(0, o)].length;
    } else {
      if (Ee(n, ["array"]))
        return n.indexOf(t, a);
      throw new N(`Expected second argument to be of type array or string, but found ${O(q(n))} instead.`);
    }
  }
  eachChild(e) {
    e(this.needle), e(this.haystack), this.fromIndex && e(this.fromIndex);
  }
  outputDefined() {
    return !1;
  }
}
class kr {
  constructor(e, t, n, a, o, i) {
    this.inputType = e, this.type = t, this.input = n, this.cases = a, this.outputs = o, this.otherwise = i;
  }
  static parse(e, t) {
    if (e.length < 5)
      return t.error(`Expected at least 4 arguments, but found only ${e.length - 1}.`);
    if (e.length % 2 !== 1)
      return t.error("Expected an even number of arguments.");
    let n, a;
    t.expectedType && t.expectedType.kind !== "value" && (a = t.expectedType);
    const o = {}, i = [];
    for (let u = 2; u < e.length - 1; u += 2) {
      let c = e[u];
      const p = e[u + 1];
      Array.isArray(c) || (c = [c]);
      const y = t.concat(u);
      if (c.length === 0)
        return y.error("Expected at least one branch label.");
      for (const d of c) {
        if (typeof d != "number" && typeof d != "string")
          return y.error("Branch labels must be numbers or strings.");
        if (typeof d == "number" && Math.abs(d) > Number.MAX_SAFE_INTEGER)
          return y.error(`Branch labels must be integers no larger than ${Number.MAX_SAFE_INTEGER}.`);
        if (typeof d == "number" && Math.floor(d) !== d)
          return y.error("Numeric branch labels must be integer values.");
        if (!n)
          n = q(d);
        else if (y.checkSubtype(n, q(d)))
          return null;
        if (typeof o[String(d)] < "u")
          return y.error("Branch labels must be unique.");
        o[String(d)] = i.length;
      }
      const f = t.parse(p, u, a);
      if (!f)
        return null;
      a = a || f.type, i.push(f);
    }
    const s = t.parse(e[1], 1, C);
    if (!s)
      return null;
    const l = t.parse(e[e.length - 1], e.length - 1, a);
    return !l || s.type.kind !== "value" && t.concat(1).checkSubtype(n, s.type) ? null : new kr(n, a, s, o, i, l);
  }
  evaluate(e) {
    const t = this.input.evaluate(e);
    return (q(t) === this.inputType && this.outputs[this.cases[t]] || this.otherwise).evaluate(e);
  }
  eachChild(e) {
    e(this.input), this.outputs.forEach(e), e(this.otherwise);
  }
  outputDefined() {
    return this.outputs.every((e) => e.outputDefined()) && this.otherwise.outputDefined();
  }
}
class Lr {
  constructor(e, t, n) {
    this.type = e, this.branches = t, this.otherwise = n;
  }
  static parse(e, t) {
    if (e.length < 4)
      return t.error(`Expected at least 3 arguments, but found only ${e.length - 1}.`);
    if (e.length % 2 !== 0)
      return t.error("Expected an odd number of arguments.");
    let n;
    t.expectedType && t.expectedType.kind !== "value" && (n = t.expectedType);
    const a = [];
    for (let i = 1; i < e.length - 1; i += 2) {
      const s = t.parse(e[i], i, A);
      if (!s)
        return null;
      const l = t.parse(e[i + 1], i + 1, n);
      if (!l)
        return null;
      a.push([s, l]), n = n || l.type;
    }
    const o = t.parse(e[e.length - 1], e.length - 1, n);
    if (!o)
      return null;
    if (!n)
      throw new Error("Can't infer output type");
    return new Lr(n, a, o);
  }
  evaluate(e) {
    for (const [t, n] of this.branches)
      if (t.evaluate(e))
        return n.evaluate(e);
    return this.otherwise.evaluate(e);
  }
  eachChild(e) {
    for (const [t, n] of this.branches)
      e(t), e(n);
    e(this.otherwise);
  }
  outputDefined() {
    return this.branches.every(([e, t]) => t.outputDefined()) && this.otherwise.outputDefined();
  }
}
class ht {
  constructor(e, t, n, a) {
    this.type = e, this.input = t, this.beginIndex = n, this.endIndex = a;
  }
  static parse(e, t) {
    if (e.length <= 2 || e.length >= 5)
      return t.error(`Expected 3 or 4 arguments, but found ${e.length - 1} instead.`);
    const n = t.parse(e[1], 1, C), a = t.parse(e[2], 2, g);
    if (!n || !a)
      return null;
    if (!br(n.type, [Z(C), I, C]))
      return t.error(`Expected first argument to be of type array or string, but found ${O(n.type)} instead`);
    if (e.length === 4) {
      const o = t.parse(e[3], 3, g);
      return o ? new ht(n.type, n, a, o) : null;
    } else
      return new ht(n.type, n, a);
  }
  evaluate(e) {
    const t = this.input.evaluate(e), n = this.beginIndex.evaluate(e);
    let a;
    if (this.endIndex && (a = this.endIndex.evaluate(e)), Ee(t, ["string"]))
      return [...t].slice(n, a).join("");
    if (Ee(t, ["array"]))
      return t.slice(n, a);
    throw new N(`Expected first argument to be of type array or string, but found ${O(q(t))} instead.`);
  }
  eachChild(e) {
    e(this.input), e(this.beginIndex), this.endIndex && e(this.endIndex);
  }
  outputDefined() {
    return !1;
  }
}
function qn(r, e) {
  const t = r.length - 1;
  let n = 0, a = t, o = 0, i, s;
  for (; n <= a; )
    if (o = Math.floor((n + a) / 2), i = r[o], s = r[o + 1], i <= e) {
      if (o === t || e < s)
        return o;
      n = o + 1;
    } else if (i > e)
      a = o - 1;
    else
      throw new N("Input is not a number.");
  return 0;
}
class Rt {
  constructor(e, t, n) {
    this.type = e, this.input = t, this.labels = [], this.outputs = [];
    for (const [a, o] of n)
      this.labels.push(a), this.outputs.push(o);
  }
  static parse(e, t) {
    if (e.length - 1 < 4)
      return t.error(`Expected at least 4 arguments, but found only ${e.length - 1}.`);
    if ((e.length - 1) % 2 !== 0)
      return t.error("Expected an even number of arguments.");
    const n = t.parse(e[1], 1, g);
    if (!n)
      return null;
    const a = [];
    let o = null;
    t.expectedType && t.expectedType.kind !== "value" && (o = t.expectedType);
    for (let i = 1; i < e.length; i += 2) {
      const s = i === 1 ? -1 / 0 : e[i], l = e[i + 1], u = i, c = i + 1;
      if (typeof s != "number")
        return t.error('Input/output pairs for "step" expressions must be defined using literal numeric values (not computed expressions) for the input values.', u);
      if (a.length && a[a.length - 1][0] >= s)
        return t.error('Input/output pairs for "step" expressions must be arranged with input values in strictly ascending order.', u);
      const p = t.parse(l, c, o);
      if (!p)
        return null;
      o = o || p.type, a.push([s, p]);
    }
    return new Rt(o, n, a);
  }
  evaluate(e) {
    const t = this.labels, n = this.outputs;
    if (t.length === 1)
      return n[0].evaluate(e);
    const a = this.input.evaluate(e);
    if (a <= t[0])
      return n[0].evaluate(e);
    const o = t.length;
    if (a >= t[o - 1])
      return n[o - 1].evaluate(e);
    const i = qn(t, a);
    return n[i].evaluate(e);
  }
  eachChild(e) {
    e(this.input);
    for (const t of this.outputs)
      e(t);
  }
  outputDefined() {
    return this.outputs.every((e) => e.outputDefined());
  }
}
function xi(r) {
  return r && r.__esModule && Object.prototype.hasOwnProperty.call(r, "default") ? r.default : r;
}
var Zt, nn;
function ki() {
  if (nn) return Zt;
  nn = 1, Zt = r;
  function r(e, t, n, a) {
    this.cx = 3 * e, this.bx = 3 * (n - e) - this.cx, this.ax = 1 - this.cx - this.bx, this.cy = 3 * t, this.by = 3 * (a - t) - this.cy, this.ay = 1 - this.cy - this.by, this.p1x = e, this.p1y = t, this.p2x = n, this.p2y = a;
  }
  return r.prototype = {
    sampleCurveX: function(e) {
      return ((this.ax * e + this.bx) * e + this.cx) * e;
    },
    sampleCurveY: function(e) {
      return ((this.ay * e + this.by) * e + this.cy) * e;
    },
    sampleCurveDerivativeX: function(e) {
      return (3 * this.ax * e + 2 * this.bx) * e + this.cx;
    },
    solveCurveX: function(e, t) {
      if (t === void 0 && (t = 1e-6), e < 0) return 0;
      if (e > 1) return 1;
      for (var n = e, a = 0; a < 8; a++) {
        var o = this.sampleCurveX(n) - e;
        if (Math.abs(o) < t) return n;
        var i = this.sampleCurveDerivativeX(n);
        if (Math.abs(i) < 1e-6) break;
        n = n - o / i;
      }
      var s = 0, l = 1;
      for (n = e, a = 0; a < 20 && (o = this.sampleCurveX(n), !(Math.abs(o - e) < t)); a++)
        e > o ? s = n : l = n, n = (l - s) * 0.5 + s;
      return n;
    },
    solve: function(e, t) {
      return this.sampleCurveY(this.solveCurveX(e, t));
    }
  }, Zt;
}
var Li = ki(), Ci = /* @__PURE__ */ xi(Li);
class pe {
  constructor(e, t, n, a, o) {
    this.type = e, this.operator = t, this.interpolation = n, this.input = a, this.labels = [], this.outputs = [];
    for (const [i, s] of o)
      this.labels.push(i), this.outputs.push(s);
  }
  static interpolationFactor(e, t, n, a) {
    let o = 0;
    if (e.name === "exponential")
      o = Jt(t, e.base, n, a);
    else if (e.name === "linear")
      o = Jt(t, 1, n, a);
    else if (e.name === "cubic-bezier") {
      const i = e.controlPoints;
      o = new Ci(i[0], i[1], i[2], i[3]).solve(Jt(t, 1, n, a));
    }
    return o;
  }
  static parse(e, t) {
    let [n, a, o, ...i] = e;
    if (!Array.isArray(a) || a.length === 0)
      return t.error("Expected an interpolation type expression.", 1);
    if (a[0] === "linear")
      a = { name: "linear" };
    else if (a[0] === "exponential") {
      const u = a[1];
      if (typeof u != "number")
        return t.error("Exponential interpolation requires a numeric base.", 1, 1);
      a = {
        name: "exponential",
        base: u
      };
    } else if (a[0] === "cubic-bezier") {
      const u = a.slice(1);
      if (u.length !== 4 || u.some((c) => typeof c != "number" || c < 0 || c > 1))
        return t.error("Cubic bezier interpolation requires four numeric arguments with values between 0 and 1.", 1);
      a = {
        name: "cubic-bezier",
        controlPoints: u
      };
    } else
      return t.error(`Unknown interpolation type ${String(a[0])}`, 1, 0);
    if (e.length - 1 < 4)
      return t.error(`Expected at least 4 arguments, but found only ${e.length - 1}.`);
    if ((e.length - 1) % 2 !== 0)
      return t.error("Expected an even number of arguments.");
    if (o = t.parse(o, 2, g), !o)
      return null;
    const s = [];
    let l = null;
    (n === "interpolate-hcl" || n === "interpolate-lab") && t.expectedType != Ke ? l = ce : t.expectedType && t.expectedType.kind !== "value" && (l = t.expectedType);
    for (let u = 0; u < i.length; u += 2) {
      const c = i[u], p = i[u + 1], y = u + 3, f = u + 4;
      if (typeof c != "number")
        return t.error('Input/output pairs for "interpolate" expressions must be defined using literal numeric values (not computed expressions) for the input values.', y);
      if (s.length && s[s.length - 1][0] >= c)
        return t.error('Input/output pairs for "interpolate" expressions must be arranged with input values in strictly ascending order.', y);
      const d = t.parse(p, f, l);
      if (!d)
        return null;
      l = l || d.type, s.push([c, d]);
    }
    return !ge(l, g) && !ge(l, Ct) && !ge(l, ce) && !ge(l, It) && !ge(l, Et) && !ge(l, Ke) && !ge(l, Mt) && !ge(l, Z(g)) ? t.error(`Type ${O(l)} is not interpolatable.`) : new pe(l, n, a, o, s);
  }
  evaluate(e) {
    const t = this.labels, n = this.outputs;
    if (t.length === 1)
      return n[0].evaluate(e);
    const a = this.input.evaluate(e);
    if (a <= t[0])
      return n[0].evaluate(e);
    const o = t.length;
    if (a >= t[o - 1])
      return n[o - 1].evaluate(e);
    const i = qn(t, a), s = t[i], l = t[i + 1], u = pe.interpolationFactor(this.interpolation, a, s, l), c = n[i].evaluate(e), p = n[i + 1].evaluate(e);
    switch (this.operator) {
      case "interpolate":
        switch (this.type.kind) {
          case "number":
            return Se(c, p, u);
          case "color":
            return P.interpolate(c, p, u);
          case "padding":
            return X.interpolate(c, p, u);
          case "colorArray":
            return K.interpolate(c, p, u);
          case "numberArray":
            return Q.interpolate(c, p, u);
          case "variableAnchorOffsetCollection":
            return oe.interpolate(c, p, u);
          case "array":
            return Ne(c, p, u);
          case "projectionDefinition":
            return re.interpolate(c, p, u);
        }
      case "interpolate-hcl":
        switch (this.type.kind) {
          case "color":
            return P.interpolate(c, p, u, "hcl");
          case "colorArray":
            return K.interpolate(c, p, u, "hcl");
        }
      case "interpolate-lab":
        switch (this.type.kind) {
          case "color":
            return P.interpolate(c, p, u, "lab");
          case "colorArray":
            return K.interpolate(c, p, u, "lab");
        }
    }
  }
  eachChild(e) {
    e(this.input);
    for (const t of this.outputs)
      e(t);
  }
  outputDefined() {
    return this.outputs.every((e) => e.outputDefined());
  }
}
function Jt(r, e, t, n) {
  const a = n - t, o = r - t;
  return a === 0 ? 0 : e === 1 ? o / a : (Math.pow(e, o) - 1) / (Math.pow(e, a) - 1);
}
P.interpolate, X.interpolate, Q.interpolate, K.interpolate, oe.interpolate;
class Je {
  constructor(e, t) {
    this.type = e, this.args = t;
  }
  static parse(e, t) {
    if (e.length < 2)
      return t.error("Expected at least one argument.");
    let n = null;
    const a = t.expectedType;
    a && a.kind !== "value" && (n = a);
    const o = [];
    for (const s of e.slice(1)) {
      const l = t.parse(s, 1 + o.length, n, void 0, { typeAnnotation: "omit" });
      if (!l)
        return null;
      n = n || l.type, o.push(l);
    }
    if (!n)
      throw new Error("No output type");
    return a && o.some((s) => We(a, s.type)) ? new Je(C, o) : new Je(n, o);
  }
  evaluate(e) {
    let t = null, n = 0, a;
    for (const o of this.args)
      if (n++, t = o.evaluate(e), t && t instanceof ke && !t.available && (a || (a = t.name), t = null, n === this.args.length && (t = a)), t !== null)
        break;
    return t;
  }
  eachChild(e) {
    this.args.forEach(e);
  }
  outputDefined() {
    return this.args.every((e) => e.outputDefined());
  }
}
function an(r, e) {
  return r === "==" || r === "!=" ? e.kind === "boolean" || e.kind === "string" || e.kind === "number" || e.kind === "null" || e.kind === "value" : e.kind === "string" || e.kind === "number" || e.kind === "value";
}
function Ai(r, e, t) {
  return e === t;
}
function Ti(r, e, t) {
  return e !== t;
}
function Ii(r, e, t) {
  return e < t;
}
function Ei(r, e, t) {
  return e > t;
}
function Mi(r, e, t) {
  return e <= t;
}
function _i(r, e, t) {
  return e >= t;
}
function Bn(r, e, t, n) {
  return n.compare(e, t) === 0;
}
function zi(r, e, t, n) {
  return !Bn(r, e, t, n);
}
function Pi(r, e, t, n) {
  return n.compare(e, t) < 0;
}
function Ri(r, e, t, n) {
  return n.compare(e, t) > 0;
}
function $i(r, e, t, n) {
  return n.compare(e, t) <= 0;
}
function ji(r, e, t, n) {
  return n.compare(e, t) >= 0;
}
function qe(r, e, t) {
  const n = r !== "==" && r !== "!=";
  return class Un {
    constructor(o, i, s) {
      this.type = A, this.lhs = o, this.rhs = i, this.collator = s, this.hasUntypedArgument = o.type.kind === "value" || i.type.kind === "value";
    }
    static parse(o, i) {
      if (o.length !== 3 && o.length !== 4)
        return i.error("Expected two or three arguments.");
      const s = o[0];
      let l = i.parse(o[1], 1, C);
      if (!l)
        return null;
      if (!an(s, l.type))
        return i.concat(1).error(`"${s}" comparisons are not supported for type '${O(l.type)}'.`);
      let u = i.parse(o[2], 2, C);
      if (!u)
        return null;
      if (!an(s, u.type))
        return i.concat(2).error(`"${s}" comparisons are not supported for type '${O(u.type)}'.`);
      if (l.type.kind !== u.type.kind && l.type.kind !== "value" && u.type.kind !== "value")
        return i.error(`Cannot compare types '${O(l.type)}' and '${O(u.type)}'.`);
      n && (l.type.kind === "value" && u.type.kind !== "value" ? l = new ne(u.type, [l]) : l.type.kind !== "value" && u.type.kind === "value" && (u = new ne(l.type, [u])));
      let c = null;
      if (o.length === 4) {
        if (l.type.kind !== "string" && u.type.kind !== "string" && l.type.kind !== "value" && u.type.kind !== "value")
          return i.error("Cannot use collator to compare non-string types.");
        if (c = i.parse(o[3], 3, At), !c)
          return null;
      }
      return new Un(l, u, c);
    }
    evaluate(o) {
      const i = this.lhs.evaluate(o), s = this.rhs.evaluate(o);
      if (n && this.hasUntypedArgument) {
        const l = q(i), u = q(s);
        if (l.kind !== u.kind || !(l.kind === "string" || l.kind === "number"))
          throw new N(`Expected arguments for "${r}" to be (string, string) or (number, number), but found (${l.kind}, ${u.kind}) instead.`);
      }
      if (this.collator && !n && this.hasUntypedArgument) {
        const l = q(i), u = q(s);
        if (l.kind !== "string" || u.kind !== "string")
          return e(o, i, s);
      }
      return this.collator ? t(o, i, s, this.collator.evaluate(o)) : e(o, i, s);
    }
    eachChild(o) {
      o(this.lhs), o(this.rhs), this.collator && o(this.collator);
    }
    outputDefined() {
      return !0;
    }
  };
}
const Oi = qe("==", Ai, Bn), Ni = qe("!=", Ti, zi), Fi = qe("<", Ii, Pi), Di = qe(">", Ei, Ri), qi = qe("<=", Mi, $i), Bi = qe(">=", _i, ji);
class $t {
  constructor(e, t, n) {
    this.type = At, this.locale = n, this.caseSensitive = e, this.diacriticSensitive = t;
  }
  static parse(e, t) {
    if (e.length !== 2)
      return t.error("Expected one argument.");
    const n = e[1];
    if (typeof n != "object" || Array.isArray(n))
      return t.error("Collator options argument must be an object.");
    const a = t.parse(n["case-sensitive"] === void 0 ? !1 : n["case-sensitive"], 1, A);
    if (!a)
      return null;
    const o = t.parse(n["diacritic-sensitive"] === void 0 ? !1 : n["diacritic-sensitive"], 1, A);
    if (!o)
      return null;
    let i = null;
    return n.locale && (i = t.parse(n.locale, 1, I), !i) ? null : new $t(a, o, i);
  }
  evaluate(e) {
    return new wr(this.caseSensitive.evaluate(e), this.diacriticSensitive.evaluate(e), this.locale ? this.locale.evaluate(e) : null);
  }
  eachChild(e) {
    e(this.caseSensitive), e(this.diacriticSensitive), this.locale && e(this.locale);
  }
  outputDefined() {
    return !1;
  }
}
class Cr {
  constructor(e, t, n, a, o) {
    this.type = I, this.number = e, this.locale = t, this.currency = n, this.minFractionDigits = a, this.maxFractionDigits = o;
  }
  static parse(e, t) {
    if (e.length !== 3)
      return t.error("Expected two arguments.");
    const n = t.parse(e[1], 1, g);
    if (!n)
      return null;
    const a = e[2];
    if (typeof a != "object" || Array.isArray(a))
      return t.error("NumberFormat options argument must be an object.");
    let o = null;
    if (a.locale && (o = t.parse(a.locale, 1, I), !o))
      return null;
    let i = null;
    if (a.currency && (i = t.parse(a.currency, 1, I), !i))
      return null;
    let s = null;
    if (a["min-fraction-digits"] && (s = t.parse(a["min-fraction-digits"], 1, g), !s))
      return null;
    let l = null;
    return a["max-fraction-digits"] && (l = t.parse(a["max-fraction-digits"], 1, g), !l) ? null : new Cr(n, o, i, s, l);
  }
  evaluate(e) {
    return new Intl.NumberFormat(this.locale ? this.locale.evaluate(e) : [], {
      style: this.currency ? "currency" : "decimal",
      currency: this.currency ? this.currency.evaluate(e) : void 0,
      minimumFractionDigits: this.minFractionDigits ? this.minFractionDigits.evaluate(e) : void 0,
      maximumFractionDigits: this.maxFractionDigits ? this.maxFractionDigits.evaluate(e) : void 0
    }).format(this.number.evaluate(e));
  }
  eachChild(e) {
    e(this.number), this.locale && e(this.locale), this.currency && e(this.currency), this.minFractionDigits && e(this.minFractionDigits), this.maxFractionDigits && e(this.maxFractionDigits);
  }
  outputDefined() {
    return !1;
  }
}
class Ar {
  constructor(e) {
    this.type = Tt, this.sections = e;
  }
  static parse(e, t) {
    if (e.length < 2)
      return t.error("Expected at least one argument.");
    const n = e[1];
    if (!Array.isArray(n) && typeof n == "object")
      return t.error("First argument must be an image or text section.");
    const a = [];
    let o = !1;
    for (let i = 1; i <= e.length - 1; ++i) {
      const s = e[i];
      if (o && typeof s == "object" && !Array.isArray(s)) {
        o = !1;
        let l = null;
        if (s["font-scale"] && (l = t.parse(s["font-scale"], 1, g), !l))
          return null;
        let u = null;
        if (s["text-font"] && (u = t.parse(s["text-font"], 1, Z(I)), !u))
          return null;
        let c = null;
        if (s["text-color"] && (c = t.parse(s["text-color"], 1, ce), !c))
          return null;
        let p = null;
        if (s["vertical-align"]) {
          if (typeof s["vertical-align"] == "string" && !bi.includes(s["vertical-align"]))
            return t.error(`'vertical-align' must be one of: 'bottom', 'center', 'top' but found '${s["vertical-align"]}' instead.`);
          if (p = t.parse(s["vertical-align"], 1, I), !p)
            return null;
        }
        const y = a[a.length - 1];
        y.scale = l, y.font = u, y.textColor = c, y.verticalAlign = p;
      } else {
        const l = t.parse(e[i], 1, C);
        if (!l)
          return null;
        const u = l.type.kind;
        if (u !== "string" && u !== "value" && u !== "null" && u !== "resolvedImage")
          return t.error("Formatted text type must be 'string', 'value', 'image' or 'null'.");
        o = !0, a.push({ content: l, scale: null, font: null, textColor: null, verticalAlign: null });
      }
    }
    return new Ar(a);
  }
  evaluate(e) {
    const t = (n) => {
      const a = n.content.evaluate(e);
      return q(a) === tt ? new nr("", a, null, null, null, n.verticalAlign ? n.verticalAlign.evaluate(e) : null) : new nr(He(a), null, n.scale ? n.scale.evaluate(e) : null, n.font ? n.font.evaluate(e).join(",") : null, n.textColor ? n.textColor.evaluate(e) : null, n.verticalAlign ? n.verticalAlign.evaluate(e) : null);
    };
    return new de(this.sections.map(t));
  }
  eachChild(e) {
    for (const t of this.sections)
      e(t.content), t.scale && e(t.scale), t.font && e(t.font), t.textColor && e(t.textColor), t.verticalAlign && e(t.verticalAlign);
  }
  outputDefined() {
    return !1;
  }
}
class Tr {
  constructor(e) {
    this.type = tt, this.input = e;
  }
  static parse(e, t) {
    if (e.length !== 2)
      return t.error("Expected two arguments.");
    const n = t.parse(e[1], 1, I);
    return n ? new Tr(n) : t.error("No image name provided.");
  }
  evaluate(e) {
    const t = this.input.evaluate(e), n = ke.fromString(t);
    return n && e.availableImages && (n.available = e.availableImages.indexOf(t) > -1), n;
  }
  eachChild(e) {
    e(this.input);
  }
  outputDefined() {
    return !1;
  }
}
class Ir {
  constructor(e) {
    this.type = g, this.input = e;
  }
  static parse(e, t) {
    if (e.length !== 2)
      return t.error(`Expected 1 argument, but found ${e.length - 1} instead.`);
    const n = t.parse(e[1], 1);
    return n ? n.type.kind !== "array" && n.type.kind !== "string" && n.type.kind !== "value" ? t.error(`Expected argument of type string or array, but found ${O(n.type)} instead.`) : new Ir(n) : null;
  }
  evaluate(e) {
    const t = this.input.evaluate(e);
    if (typeof t == "string")
      return [...t].length;
    if (Array.isArray(t))
      return t.length;
    throw new N(`Expected value to be of type string or array, but found ${O(q(t))} instead.`);
  }
  eachChild(e) {
    e(this.input);
  }
  outputDefined() {
    return !1;
  }
}
const fe = 8192;
function Ui(r, e) {
  const t = Gi(r[0]), n = Hi(r[1]), a = Math.pow(2, e.z);
  return [Math.round(t * a * fe), Math.round(n * a * fe)];
}
function Er(r, e) {
  const t = Math.pow(2, e.z), n = (r[0] / fe + e.x) / t, a = (r[1] / fe + e.y) / t;
  return [Vi(n), Ki(a)];
}
function Gi(r) {
  return (180 + r) / 360;
}
function Vi(r) {
  return r * 360 - 180;
}
function Hi(r) {
  return (180 - 180 / Math.PI * Math.log(Math.tan(Math.PI / 4 + r * Math.PI / 360))) / 360;
}
function Ki(r) {
  return 360 / Math.PI * Math.atan(Math.exp((180 - r * 360) * Math.PI / 180)) - 90;
}
function rt(r, e) {
  r[0] = Math.min(r[0], e[0]), r[1] = Math.min(r[1], e[1]), r[2] = Math.max(r[2], e[0]), r[3] = Math.max(r[3], e[1]);
}
function Ye(r, e) {
  return !(r[0] <= e[0] || r[2] >= e[2] || r[1] <= e[1] || r[3] >= e[3]);
}
function Wi(r, e, t) {
  return e[1] > r[1] != t[1] > r[1] && r[0] < (t[0] - e[0]) * (r[1] - e[1]) / (t[1] - e[1]) + e[0];
}
function Zi(r, e, t) {
  const n = r[0] - e[0], a = r[1] - e[1], o = r[0] - t[0], i = r[1] - t[1];
  return n * i - o * a === 0 && n * o <= 0 && a * i <= 0;
}
function jt(r, e, t, n) {
  const a = [e[0] - r[0], e[1] - r[1]], o = [n[0] - t[0], n[1] - t[1]];
  return Qi(o, a) === 0 ? !1 : !!(on(r, e, t, n) && on(t, n, r, e));
}
function Ji(r, e, t) {
  for (const n of t)
    for (let a = 0; a < n.length - 1; ++a)
      if (jt(r, e, n[a], n[a + 1]))
        return !0;
  return !1;
}
function Be(r, e, t = !1) {
  let n = !1;
  for (const a of e)
    for (let o = 0; o < a.length - 1; o++) {
      if (Zi(r, a[o], a[o + 1]))
        return t;
      Wi(r, a[o], a[o + 1]) && (n = !n);
    }
  return n;
}
function Yi(r, e) {
  for (const t of e)
    if (Be(r, t))
      return !0;
  return !1;
}
function Gn(r, e) {
  for (const t of r)
    if (!Be(t, e))
      return !1;
  for (let t = 0; t < r.length - 1; ++t)
    if (Ji(r[t], r[t + 1], e))
      return !1;
  return !0;
}
function Xi(r, e) {
  for (const t of e)
    if (Gn(r, t))
      return !0;
  return !1;
}
function Qi(r, e) {
  return r[0] * e[1] - r[1] * e[0];
}
function on(r, e, t, n) {
  const a = r[0] - t[0], o = r[1] - t[1], i = e[0] - t[0], s = e[1] - t[1], l = n[0] - t[0], u = n[1] - t[1], c = a * u - l * o, p = i * u - l * s;
  return c > 0 && p < 0 || c < 0 && p > 0;
}
function Mr(r, e, t) {
  const n = [];
  for (let a = 0; a < r.length; a++) {
    const o = [];
    for (let i = 0; i < r[a].length; i++) {
      const s = Ui(r[a][i], t);
      rt(e, s), o.push(s);
    }
    n.push(o);
  }
  return n;
}
function Vn(r, e, t) {
  const n = [];
  for (let a = 0; a < r.length; a++) {
    const o = Mr(r[a], e, t);
    n.push(o);
  }
  return n;
}
function Hn(r, e, t, n) {
  if (r[0] < t[0] || r[0] > t[2]) {
    const a = n * 0.5;
    let o = r[0] - t[0] > a ? -n : t[0] - r[0] > a ? n : 0;
    o === 0 && (o = r[0] - t[2] > a ? -n : t[2] - r[0] > a ? n : 0), r[0] += o;
  }
  rt(e, r);
}
function es(r) {
  r[0] = r[1] = 1 / 0, r[2] = r[3] = -1 / 0;
}
function sn(r, e, t, n) {
  const a = Math.pow(2, n.z) * fe, o = [n.x * fe, n.y * fe], i = [];
  for (const s of r)
    for (const l of s) {
      const u = [l.x + o[0], l.y + o[1]];
      Hn(u, e, t, a), i.push(u);
    }
  return i;
}
function ln(r, e, t, n) {
  const a = Math.pow(2, n.z) * fe, o = [n.x * fe, n.y * fe], i = [];
  for (const s of r) {
    const l = [];
    for (const u of s) {
      const c = [u.x + o[0], u.y + o[1]];
      rt(e, c), l.push(c);
    }
    i.push(l);
  }
  if (e[2] - e[0] <= a / 2) {
    es(e);
    for (const s of i)
      for (const l of s)
        Hn(l, e, t, a);
  }
  return i;
}
function ts(r, e) {
  const t = [1 / 0, 1 / 0, -1 / 0, -1 / 0], n = [1 / 0, 1 / 0, -1 / 0, -1 / 0], a = r.canonicalID();
  if (e.type === "Polygon") {
    const o = Mr(e.coordinates, n, a), i = sn(r.geometry(), t, n, a);
    if (!Ye(t, n))
      return !1;
    for (const s of i)
      if (!Be(s, o))
        return !1;
  }
  if (e.type === "MultiPolygon") {
    const o = Vn(e.coordinates, n, a), i = sn(r.geometry(), t, n, a);
    if (!Ye(t, n))
      return !1;
    for (const s of i)
      if (!Yi(s, o))
        return !1;
  }
  return !0;
}
function rs(r, e) {
  const t = [1 / 0, 1 / 0, -1 / 0, -1 / 0], n = [1 / 0, 1 / 0, -1 / 0, -1 / 0], a = r.canonicalID();
  if (e.type === "Polygon") {
    const o = Mr(e.coordinates, n, a), i = ln(r.geometry(), t, n, a);
    if (!Ye(t, n))
      return !1;
    for (const s of i)
      if (!Gn(s, o))
        return !1;
  }
  if (e.type === "MultiPolygon") {
    const o = Vn(e.coordinates, n, a), i = ln(r.geometry(), t, n, a);
    if (!Ye(t, n))
      return !1;
    for (const s of i)
      if (!Xi(s, o))
        return !1;
  }
  return !0;
}
class Me {
  constructor(e, t) {
    this.type = A, this.geojson = e, this.geometries = t;
  }
  static parse(e, t) {
    if (e.length !== 2)
      return t.error(`'within' expression requires exactly one argument, but found ${e.length - 1} instead.`);
    if (Ze(e[1])) {
      const n = e[1];
      if (n.type === "FeatureCollection") {
        const a = [];
        for (const o of n.features) {
          const { type: i, coordinates: s } = o.geometry;
          i === "Polygon" && a.push(s), i === "MultiPolygon" && a.push(...s);
        }
        if (a.length) {
          const o = {
            type: "MultiPolygon",
            coordinates: a
          };
          return new Me(n, o);
        }
      } else if (n.type === "Feature") {
        const a = n.geometry.type;
        if (a === "Polygon" || a === "MultiPolygon")
          return new Me(n, n.geometry);
      } else if (n.type === "Polygon" || n.type === "MultiPolygon")
        return new Me(n, n);
    }
    return t.error("'within' expression requires valid geojson object that contains polygon geometry type.");
  }
  evaluate(e) {
    if (e.geometry() != null && e.canonicalID() != null) {
      if (e.geometryType() === "Point")
        return ts(e, this.geometries);
      if (e.geometryType() === "LineString")
        return rs(e, this.geometries);
    }
    return !1;
  }
  eachChild() {
  }
  outputDefined() {
    return !0;
  }
}
class Kn {
  constructor(e = [], t = (n, a) => n < a ? -1 : n > a ? 1 : 0) {
    if (this.data = e, this.length = this.data.length, this.compare = t, this.length > 0)
      for (let n = (this.length >> 1) - 1; n >= 0; n--) this._down(n);
  }
  push(e) {
    this.data.push(e), this._up(this.length++);
  }
  pop() {
    if (this.length === 0) return;
    const e = this.data[0], t = this.data.pop();
    return --this.length > 0 && (this.data[0] = t, this._down(0)), e;
  }
  peek() {
    return this.data[0];
  }
  _up(e) {
    const { data: t, compare: n } = this, a = t[e];
    for (; e > 0; ) {
      const o = e - 1 >> 1, i = t[o];
      if (n(a, i) >= 0) break;
      t[e] = i, e = o;
    }
    t[e] = a;
  }
  _down(e) {
    const { data: t, compare: n } = this, a = this.length >> 1, o = t[e];
    for (; e < a; ) {
      let i = (e << 1) + 1;
      const s = i + 1;
      if (s < this.length && n(t[s], t[i]) < 0 && (i = s), n(t[i], o) >= 0) break;
      t[e] = t[i], e = i;
    }
    t[e] = o;
  }
}
function ns(r, e) {
  if (r.length <= 1)
    return [r];
  const n = [];
  let a, o;
  for (const i of r) {
    const s = as(i);
    s !== 0 && (i.area = Math.abs(s), o === void 0 && (o = s < 0), o === s < 0 ? (a && n.push(a), a = [i]) : a.push(i));
  }
  return a && n.push(a), n;
}
function as(r) {
  let e = 0;
  for (let t = 0, n = r.length, a = n - 1, o, i; t < n; a = t++)
    o = r[t], i = r[a], e += (i.x - o.x) * (o.y + i.y);
  return e;
}
const os = 6378.137, un = 1 / 298.257223563, cn = un * (2 - un), pn = Math.PI / 180;
class _r {
  constructor(e) {
    const t = pn * os * 1e3, n = Math.cos(e * pn), a = 1 / (1 - cn * (1 - n * n)), o = Math.sqrt(a);
    this.kx = t * o * n, this.ky = t * o * a * (1 - cn);
  }
  /**
   * Given two points of the form [longitude, latitude], returns the distance.
   *
   * @param a - point [longitude, latitude]
   * @param b - point [longitude, latitude]
   * @returns distance
   * @example
   * const distance = ruler.distance([30.5, 50.5], [30.51, 50.49]);
   * //=distance
   */
  distance(e, t) {
    const n = this.wrap(e[0] - t[0]) * this.kx, a = (e[1] - t[1]) * this.ky;
    return Math.sqrt(n * n + a * a);
  }
  /**
   * Returns an object of the form {point, index, t}, where point is closest point on the line
   * from the given point, index is the start index of the segment with the closest point,
   * and t is a parameter from 0 to 1 that indicates where the closest point is on that segment.
   *
   * @param line - an array of points that form the line
   * @param p - point [longitude, latitude]
   * @returns the nearest point, its index in the array and the proportion along the line
   * @example
   * const point = ruler.pointOnLine(line, [-67.04, 50.5]).point;
   * //=point
   */
  pointOnLine(e, t) {
    let n = 1 / 0, a, o, i, s;
    for (let l = 0; l < e.length - 1; l++) {
      let u = e[l][0], c = e[l][1], p = this.wrap(e[l + 1][0] - u) * this.kx, y = (e[l + 1][1] - c) * this.ky, f = 0;
      (p !== 0 || y !== 0) && (f = (this.wrap(t[0] - u) * this.kx * p + (t[1] - c) * this.ky * y) / (p * p + y * y), f > 1 ? (u = e[l + 1][0], c = e[l + 1][1]) : f > 0 && (u += p / this.kx * f, c += y / this.ky * f)), p = this.wrap(t[0] - u) * this.kx, y = (t[1] - c) * this.ky;
      const d = p * p + y * y;
      d < n && (n = d, a = u, o = c, i = l, s = f);
    }
    return {
      point: [a, o],
      index: i,
      t: Math.max(0, Math.min(1, s))
    };
  }
  wrap(e) {
    for (; e < -180; )
      e += 360;
    for (; e > 180; )
      e -= 360;
    return e;
  }
}
const ar = 100, or = 50;
function Wn(r, e) {
  return e[0] - r[0];
}
function gt(r) {
  return r[1] - r[0] + 1;
}
function me(r, e) {
  return r[1] >= r[0] && r[1] < e;
}
function ir(r, e) {
  if (r[0] > r[1])
    return [null, null];
  const t = gt(r);
  if (e) {
    if (t === 2)
      return [r, null];
    const a = Math.floor(t / 2);
    return [
      [r[0], r[0] + a],
      [r[0] + a, r[1]]
    ];
  }
  if (t === 1)
    return [r, null];
  const n = Math.floor(t / 2) - 1;
  return [
    [r[0], r[0] + n],
    [r[0] + n + 1, r[1]]
  ];
}
function sr(r, e) {
  if (!me(e, r.length))
    return [1 / 0, 1 / 0, -1 / 0, -1 / 0];
  const t = [1 / 0, 1 / 0, -1 / 0, -1 / 0];
  for (let n = e[0]; n <= e[1]; ++n)
    rt(t, r[n]);
  return t;
}
function lr(r) {
  const e = [1 / 0, 1 / 0, -1 / 0, -1 / 0];
  for (const t of r)
    for (const n of t)
      rt(e, n);
  return e;
}
function fn(r) {
  return r[0] !== -1 / 0 && r[1] !== -1 / 0 && r[2] !== 1 / 0 && r[3] !== 1 / 0;
}
function zr(r, e, t) {
  if (!fn(r) || !fn(e))
    return NaN;
  let n = 0, a = 0;
  return r[2] < e[0] && (n = e[0] - r[2]), r[0] > e[2] && (n = r[0] - e[2]), r[1] > e[3] && (a = r[1] - e[3]), r[3] < e[1] && (a = e[1] - r[3]), t.distance([0, 0], [n, a]);
}
function Te(r, e, t) {
  const n = t.pointOnLine(e, r);
  return t.distance(r, n.point);
}
function Pr(r, e, t, n, a) {
  const o = Math.min(Te(r, [t, n], a), Te(e, [t, n], a)), i = Math.min(Te(t, [r, e], a), Te(n, [r, e], a));
  return Math.min(o, i);
}
function is(r, e, t, n, a) {
  if (!(me(e, r.length) && me(n, t.length)))
    return 1 / 0;
  let i = 1 / 0;
  for (let s = e[0]; s < e[1]; ++s) {
    const l = r[s], u = r[s + 1];
    for (let c = n[0]; c < n[1]; ++c) {
      const p = t[c], y = t[c + 1];
      if (jt(l, u, p, y))
        return 0;
      i = Math.min(i, Pr(l, u, p, y, a));
    }
  }
  return i;
}
function ss(r, e, t, n, a) {
  if (!(me(e, r.length) && me(n, t.length)))
    return NaN;
  let i = 1 / 0;
  for (let s = e[0]; s <= e[1]; ++s)
    for (let l = n[0]; l <= n[1]; ++l)
      if (i = Math.min(i, a.distance(r[s], t[l])), i === 0)
        return i;
  return i;
}
function ls(r, e, t) {
  if (Be(r, e, !0))
    return 0;
  let n = 1 / 0;
  for (const a of e) {
    const o = a[0], i = a[a.length - 1];
    if (o !== i && (n = Math.min(n, Te(r, [i, o], t)), n === 0))
      return n;
    const s = t.pointOnLine(a, r);
    if (n = Math.min(n, t.distance(r, s.point)), n === 0)
      return n;
  }
  return n;
}
function us(r, e, t, n) {
  if (!me(e, r.length))
    return NaN;
  for (let o = e[0]; o <= e[1]; ++o)
    if (Be(r[o], t, !0))
      return 0;
  let a = 1 / 0;
  for (let o = e[0]; o < e[1]; ++o) {
    const i = r[o], s = r[o + 1];
    for (const l of t)
      for (let u = 0, c = l.length, p = c - 1; u < c; p = u++) {
        const y = l[p], f = l[u];
        if (jt(i, s, y, f))
          return 0;
        a = Math.min(a, Pr(i, s, y, f, n));
      }
  }
  return a;
}
function dn(r, e) {
  for (const t of r)
    for (const n of t)
      if (Be(n, e, !0))
        return !0;
  return !1;
}
function cs(r, e, t, n = 1 / 0) {
  const a = lr(r), o = lr(e);
  if (n !== 1 / 0 && zr(a, o, t) >= n)
    return n;
  if (Ye(a, o)) {
    if (dn(r, e))
      return 0;
  } else if (dn(e, r))
    return 0;
  let i = 1 / 0;
  for (const s of r)
    for (let l = 0, u = s.length, c = u - 1; l < u; c = l++) {
      const p = s[c], y = s[l];
      for (const f of e)
        for (let d = 0, m = f.length, v = m - 1; d < m; v = d++) {
          const w = f[v], b = f[d];
          if (jt(p, y, w, b))
            return 0;
          i = Math.min(i, Pr(p, y, w, b, t));
        }
    }
  return i;
}
function yn(r, e, t, n, a, o) {
  if (!o)
    return;
  const i = zr(sr(n, o), a, t);
  i < e && r.push([i, o, [0, 0]]);
}
function ct(r, e, t, n, a, o, i) {
  if (!o || !i)
    return;
  const s = zr(sr(n, o), sr(a, i), t);
  s < e && r.push([s, o, i]);
}
function vt(r, e, t, n, a = 1 / 0) {
  let o = Math.min(n.distance(r[0], t[0][0]), a);
  if (o === 0)
    return o;
  const i = new Kn([[0, [0, r.length - 1], [0, 0]]], Wn), s = lr(t);
  for (; i.length > 0; ) {
    const l = i.pop();
    if (l[0] >= o)
      continue;
    const u = l[1], c = e ? or : ar;
    if (gt(u) <= c) {
      if (!me(u, r.length))
        return NaN;
      if (e) {
        const p = us(r, u, t, n);
        if (isNaN(p) || p === 0)
          return p;
        o = Math.min(o, p);
      } else
        for (let p = u[0]; p <= u[1]; ++p) {
          const y = ls(r[p], t, n);
          if (o = Math.min(o, y), o === 0)
            return 0;
        }
    } else {
      const p = ir(u, e);
      yn(i, o, n, r, s, p[0]), yn(i, o, n, r, s, p[1]);
    }
  }
  return o;
}
function bt(r, e, t, n, a, o = 1 / 0) {
  let i = Math.min(o, a.distance(r[0], t[0]));
  if (i === 0)
    return i;
  const s = new Kn([[0, [0, r.length - 1], [0, t.length - 1]]], Wn);
  for (; s.length > 0; ) {
    const l = s.pop();
    if (l[0] >= i)
      continue;
    const u = l[1], c = l[2], p = e ? or : ar, y = n ? or : ar;
    if (gt(u) <= p && gt(c) <= y) {
      if (!me(u, r.length) && me(c, t.length))
        return NaN;
      let f;
      if (e && n)
        f = is(r, u, t, c, a), i = Math.min(i, f);
      else if (e && !n) {
        const d = r.slice(u[0], u[1] + 1);
        for (let m = c[0]; m <= c[1]; ++m)
          if (f = Te(t[m], d, a), i = Math.min(i, f), i === 0)
            return i;
      } else if (!e && n) {
        const d = t.slice(c[0], c[1] + 1);
        for (let m = u[0]; m <= u[1]; ++m)
          if (f = Te(r[m], d, a), i = Math.min(i, f), i === 0)
            return i;
      } else
        f = ss(r, u, t, c, a), i = Math.min(i, f);
    } else {
      const f = ir(u, e), d = ir(c, n);
      ct(s, i, a, r, t, f[0], d[0]), ct(s, i, a, r, t, f[0], d[1]), ct(s, i, a, r, t, f[1], d[0]), ct(s, i, a, r, t, f[1], d[1]);
    }
  }
  return i;
}
function ps(r, e) {
  const t = r.geometry(), n = t.flat().map((i) => Er([i.x, i.y], r.canonical));
  if (t.length === 0)
    return NaN;
  const a = new _r(n[0][1]);
  let o = 1 / 0;
  for (const i of e) {
    switch (i.type) {
      case "Point":
        o = Math.min(o, bt(n, !1, [i.coordinates], !1, a, o));
        break;
      case "LineString":
        o = Math.min(o, bt(n, !1, i.coordinates, !0, a, o));
        break;
      case "Polygon":
        o = Math.min(o, vt(n, !1, i.coordinates, a, o));
        break;
    }
    if (o === 0)
      return o;
  }
  return o;
}
function fs(r, e) {
  const t = r.geometry(), n = t.flat().map((i) => Er([i.x, i.y], r.canonical));
  if (t.length === 0)
    return NaN;
  const a = new _r(n[0][1]);
  let o = 1 / 0;
  for (const i of e) {
    switch (i.type) {
      case "Point":
        o = Math.min(o, bt(n, !0, [i.coordinates], !1, a, o));
        break;
      case "LineString":
        o = Math.min(o, bt(n, !0, i.coordinates, !0, a, o));
        break;
      case "Polygon":
        o = Math.min(o, vt(n, !0, i.coordinates, a, o));
        break;
    }
    if (o === 0)
      return o;
  }
  return o;
}
function ds(r, e) {
  const t = r.geometry();
  if (t.length === 0 || t[0].length === 0)
    return NaN;
  const n = ns(t).map((i) => i.map((s) => s.map((l) => Er([l.x, l.y], r.canonical)))), a = new _r(n[0][0][0][1]);
  let o = 1 / 0;
  for (const i of e)
    for (const s of n) {
      switch (i.type) {
        case "Point":
          o = Math.min(o, vt([i.coordinates], !1, s, a, o));
          break;
        case "LineString":
          o = Math.min(o, vt(i.coordinates, !0, s, a, o));
          break;
        case "Polygon":
          o = Math.min(o, cs(s, i.coordinates, a, o));
          break;
      }
      if (o === 0)
        return o;
    }
  return o;
}
function Yt(r) {
  return r.type === "MultiPolygon" ? r.coordinates.map((e) => ({
    type: "Polygon",
    coordinates: e
  })) : r.type === "MultiLineString" ? r.coordinates.map((e) => ({
    type: "LineString",
    coordinates: e
  })) : r.type === "MultiPoint" ? r.coordinates.map((e) => ({
    type: "Point",
    coordinates: e
  })) : [r];
}
class _e {
  constructor(e, t) {
    this.type = g, this.geojson = e, this.geometries = t;
  }
  static parse(e, t) {
    if (e.length !== 2)
      return t.error(`'distance' expression requires exactly one argument, but found ${e.length - 1} instead.`);
    if (Ze(e[1])) {
      const n = e[1];
      if (n.type === "FeatureCollection")
        return new _e(n, n.features.map((a) => Yt(a.geometry)).flat());
      if (n.type === "Feature")
        return new _e(n, Yt(n.geometry));
      if ("type" in n && "coordinates" in n)
        return new _e(n, Yt(n));
    }
    return t.error("'distance' expression requires valid geojson object that contains polygon geometry type.");
  }
  evaluate(e) {
    if (e.geometry() != null && e.canonicalID() != null) {
      if (e.geometryType() === "Point")
        return ps(e, this.geometries);
      if (e.geometryType() === "LineString")
        return fs(e, this.geometries);
      if (e.geometryType() === "Polygon")
        return ds(e, this.geometries);
    }
    return NaN;
  }
  eachChild() {
  }
  outputDefined() {
    return !0;
  }
}
class nt {
  constructor(e) {
    this.type = C, this.key = e;
  }
  static parse(e, t) {
    if (e.length !== 2)
      return t.error(`Expected 1 argument, but found ${e.length - 1} instead.`);
    const n = e[1];
    return n == null ? t.error("Global state property must be defined.") : typeof n != "string" ? t.error(`Global state property must be string, but found ${typeof e[1]} instead.`) : new nt(n);
  }
  evaluate(e) {
    var t;
    const n = (t = e.globals) === null || t === void 0 ? void 0 : t.globalState;
    return !n || Object.keys(n).length === 0 ? null : Ve(n, this.key);
  }
  eachChild() {
  }
  outputDefined() {
    return !1;
  }
}
const Rr = {
  // special forms
  "==": Oi,
  "!=": Ni,
  ">": Di,
  "<": Fi,
  ">=": Bi,
  "<=": qi,
  array: ne,
  at: Sr,
  boolean: ne,
  case: Lr,
  coalesce: Je,
  collator: $t,
  format: Ar,
  image: Tr,
  in: xr,
  "index-of": mt,
  interpolate: pe,
  "interpolate-hcl": pe,
  "interpolate-lab": pe,
  length: Ir,
  let: zt,
  literal: Fe,
  match: kr,
  number: ne,
  "number-format": Cr,
  object: ne,
  slice: ht,
  step: Rt,
  string: ne,
  "to-boolean": we,
  "to-color": we,
  "to-number": we,
  "to-string": we,
  var: Pt,
  within: Me,
  distance: _e,
  "global-state": nt
};
class ae {
  constructor(e, t, n, a) {
    this.name = e, this.type = t, this._evaluate = n, this.args = a;
  }
  evaluate(e) {
    return this._evaluate(e, this.args);
  }
  eachChild(e) {
    this.args.forEach(e);
  }
  outputDefined() {
    return !1;
  }
  static parse(e, t) {
    const n = e[0], a = ae.definitions[n];
    if (!a)
      return t.error(`Unknown expression "${n}". If you wanted a literal array, use ["literal", [...]].`, 0);
    const o = Array.isArray(a) ? a[0] : a.type, i = Array.isArray(a) ? [[a[1], a[2]]] : a.overloads, s = i.filter(([u]) => !Array.isArray(u) || // varags
    u.length === e.length - 1);
    let l = null;
    for (const [u, c] of s) {
      l = new _t(t.registry, wt, t.path, null, t.scope);
      const p = [];
      let y = !1;
      for (let f = 1; f < e.length; f++) {
        const d = e[f], m = Array.isArray(u) ? u[f - 1] : u.type, v = l.parse(d, 1 + p.length, m);
        if (!v) {
          y = !0;
          break;
        }
        p.push(v);
      }
      if (!y) {
        if (Array.isArray(u) && u.length !== p.length) {
          l.error(`Expected ${u.length} arguments, but found ${p.length} instead.`);
          continue;
        }
        for (let f = 0; f < p.length; f++) {
          const d = Array.isArray(u) ? u[f] : u.type, m = p[f];
          l.concat(f + 1).checkSubtype(d, m.type);
        }
        if (l.errors.length === 0)
          return new ae(n, o, c, p);
      }
    }
    if (s.length === 1)
      t.errors.push(...l.errors);
    else {
      const c = (s.length ? s : i).map(([y]) => ms(y)).join(" | "), p = [];
      for (let y = 1; y < e.length; y++) {
        const f = t.parse(e[y], 1 + p.length);
        if (!f)
          return null;
        p.push(O(f.type));
      }
      t.error(`Expected arguments of type ${c}, but found (${p.join(", ")}) instead.`);
    }
    return null;
  }
  static register(e, t) {
    ae.definitions = t;
    for (const n in t)
      e[n] = ae;
  }
}
function mn(r, [e, t, n, a]) {
  e = e.evaluate(r), t = t.evaluate(r), n = n.evaluate(r);
  const o = a ? a.evaluate(r) : 1, i = Fn(e, t, n, o);
  if (i)
    throw new N(i);
  return new P(e / 255, t / 255, n / 255, o, !1);
}
function hn(r, e) {
  return r in e;
}
function Xt(r, e) {
  const t = e[r];
  return typeof t > "u" ? null : t;
}
function ys(r, e, t, n) {
  for (; t <= n; ) {
    const a = t + n >> 1;
    if (e[a] === r)
      return !0;
    e[a] > r ? n = a - 1 : t = a + 1;
  }
  return !1;
}
function Ae(r) {
  return { type: r };
}
ae.register(Rr, {
  error: [
    li,
    [I],
    (r, [e]) => {
      throw new N(e.evaluate(r));
    }
  ],
  typeof: [
    I,
    [C],
    (r, [e]) => O(q(e.evaluate(r)))
  ],
  "to-rgba": [
    Z(g, 4),
    [ce],
    (r, [e]) => {
      const [t, n, a, o] = e.evaluate(r).rgb;
      return [t * 255, n * 255, a * 255, o];
    }
  ],
  rgb: [
    ce,
    [g, g, g],
    mn
  ],
  rgba: [
    ce,
    [g, g, g, g],
    mn
  ],
  has: {
    type: A,
    overloads: [
      [
        [I],
        (r, [e]) => hn(e.evaluate(r), r.properties())
      ],
      [
        [I, Ie],
        (r, [e, t]) => hn(e.evaluate(r), t.evaluate(r))
      ]
    ]
  },
  get: {
    type: C,
    overloads: [
      [
        [I],
        (r, [e]) => Xt(e.evaluate(r), r.properties())
      ],
      [
        [I, Ie],
        (r, [e, t]) => Xt(e.evaluate(r), t.evaluate(r))
      ]
    ]
  },
  "feature-state": [
    C,
    [I],
    (r, [e]) => Xt(e.evaluate(r), r.featureState || {})
  ],
  properties: [
    Ie,
    [],
    (r) => r.properties()
  ],
  "geometry-type": [
    I,
    [],
    (r) => r.geometryType()
  ],
  id: [
    C,
    [],
    (r) => r.id()
  ],
  zoom: [
    g,
    [],
    (r) => r.globals.zoom
  ],
  "heatmap-density": [
    g,
    [],
    (r) => r.globals.heatmapDensity || 0
  ],
  elevation: [
    g,
    [],
    (r) => r.globals.elevation || 0
  ],
  "line-progress": [
    g,
    [],
    (r) => r.globals.lineProgress || 0
  ],
  accumulated: [
    C,
    [],
    (r) => r.globals.accumulated === void 0 ? null : r.globals.accumulated
  ],
  "+": [
    g,
    Ae(g),
    (r, e) => {
      let t = 0;
      for (const n of e)
        t += n.evaluate(r);
      return t;
    }
  ],
  "*": [
    g,
    Ae(g),
    (r, e) => {
      let t = 1;
      for (const n of e)
        t *= n.evaluate(r);
      return t;
    }
  ],
  "-": {
    type: g,
    overloads: [
      [
        [g, g],
        (r, [e, t]) => e.evaluate(r) - t.evaluate(r)
      ],
      [
        [g],
        (r, [e]) => -e.evaluate(r)
      ]
    ]
  },
  "/": [
    g,
    [g, g],
    (r, [e, t]) => e.evaluate(r) / t.evaluate(r)
  ],
  "%": [
    g,
    [g, g],
    (r, [e, t]) => e.evaluate(r) % t.evaluate(r)
  ],
  ln2: [
    g,
    [],
    () => Math.LN2
  ],
  pi: [
    g,
    [],
    () => Math.PI
  ],
  e: [
    g,
    [],
    () => Math.E
  ],
  "^": [
    g,
    [g, g],
    (r, [e, t]) => Math.pow(e.evaluate(r), t.evaluate(r))
  ],
  sqrt: [
    g,
    [g],
    (r, [e]) => Math.sqrt(e.evaluate(r))
  ],
  log10: [
    g,
    [g],
    (r, [e]) => Math.log(e.evaluate(r)) / Math.LN10
  ],
  ln: [
    g,
    [g],
    (r, [e]) => Math.log(e.evaluate(r))
  ],
  log2: [
    g,
    [g],
    (r, [e]) => Math.log(e.evaluate(r)) / Math.LN2
  ],
  sin: [
    g,
    [g],
    (r, [e]) => Math.sin(e.evaluate(r))
  ],
  cos: [
    g,
    [g],
    (r, [e]) => Math.cos(e.evaluate(r))
  ],
  tan: [
    g,
    [g],
    (r, [e]) => Math.tan(e.evaluate(r))
  ],
  asin: [
    g,
    [g],
    (r, [e]) => Math.asin(e.evaluate(r))
  ],
  acos: [
    g,
    [g],
    (r, [e]) => Math.acos(e.evaluate(r))
  ],
  atan: [
    g,
    [g],
    (r, [e]) => Math.atan(e.evaluate(r))
  ],
  min: [
    g,
    Ae(g),
    (r, e) => Math.min(...e.map((t) => t.evaluate(r)))
  ],
  max: [
    g,
    Ae(g),
    (r, e) => Math.max(...e.map((t) => t.evaluate(r)))
  ],
  abs: [
    g,
    [g],
    (r, [e]) => Math.abs(e.evaluate(r))
  ],
  round: [
    g,
    [g],
    (r, [e]) => {
      const t = e.evaluate(r);
      return t < 0 ? -Math.round(-t) : Math.round(t);
    }
  ],
  floor: [
    g,
    [g],
    (r, [e]) => Math.floor(e.evaluate(r))
  ],
  ceil: [
    g,
    [g],
    (r, [e]) => Math.ceil(e.evaluate(r))
  ],
  "filter-==": [
    A,
    [I, C],
    (r, [e, t]) => r.properties()[e.value] === t.value
  ],
  "filter-id-==": [
    A,
    [C],
    (r, [e]) => r.id() === e.value
  ],
  "filter-type-==": [
    A,
    [I],
    (r, [e]) => r.geometryType() === e.value
  ],
  "filter-<": [
    A,
    [I, C],
    (r, [e, t]) => {
      const n = r.properties()[e.value], a = t.value;
      return typeof n == typeof a && n < a;
    }
  ],
  "filter-id-<": [
    A,
    [C],
    (r, [e]) => {
      const t = r.id(), n = e.value;
      return typeof t == typeof n && t < n;
    }
  ],
  "filter->": [
    A,
    [I, C],
    (r, [e, t]) => {
      const n = r.properties()[e.value], a = t.value;
      return typeof n == typeof a && n > a;
    }
  ],
  "filter-id->": [
    A,
    [C],
    (r, [e]) => {
      const t = r.id(), n = e.value;
      return typeof t == typeof n && t > n;
    }
  ],
  "filter-<=": [
    A,
    [I, C],
    (r, [e, t]) => {
      const n = r.properties()[e.value], a = t.value;
      return typeof n == typeof a && n <= a;
    }
  ],
  "filter-id-<=": [
    A,
    [C],
    (r, [e]) => {
      const t = r.id(), n = e.value;
      return typeof t == typeof n && t <= n;
    }
  ],
  "filter->=": [
    A,
    [I, C],
    (r, [e, t]) => {
      const n = r.properties()[e.value], a = t.value;
      return typeof n == typeof a && n >= a;
    }
  ],
  "filter-id->=": [
    A,
    [C],
    (r, [e]) => {
      const t = r.id(), n = e.value;
      return typeof t == typeof n && t >= n;
    }
  ],
  "filter-has": [
    A,
    [C],
    (r, [e]) => e.value in r.properties()
  ],
  "filter-has-id": [
    A,
    [],
    (r) => r.id() !== null && r.id() !== void 0
  ],
  "filter-type-in": [
    A,
    [Z(I)],
    (r, [e]) => e.value.indexOf(r.geometryType()) >= 0
  ],
  "filter-id-in": [
    A,
    [Z(C)],
    (r, [e]) => e.value.indexOf(r.id()) >= 0
  ],
  "filter-in-small": [
    A,
    [I, Z(C)],
    // assumes v is an array literal
    (r, [e, t]) => t.value.indexOf(r.properties()[e.value]) >= 0
  ],
  "filter-in-large": [
    A,
    [I, Z(C)],
    // assumes v is a array literal with values sorted in ascending order and of a single type
    (r, [e, t]) => ys(r.properties()[e.value], t.value, 0, t.value.length - 1)
  ],
  all: {
    type: A,
    overloads: [
      [
        [A, A],
        (r, [e, t]) => e.evaluate(r) && t.evaluate(r)
      ],
      [
        Ae(A),
        (r, e) => {
          for (const t of e)
            if (!t.evaluate(r))
              return !1;
          return !0;
        }
      ]
    ]
  },
  any: {
    type: A,
    overloads: [
      [
        [A, A],
        (r, [e, t]) => e.evaluate(r) || t.evaluate(r)
      ],
      [
        Ae(A),
        (r, e) => {
          for (const t of e)
            if (t.evaluate(r))
              return !0;
          return !1;
        }
      ]
    ]
  },
  "!": [
    A,
    [A],
    (r, [e]) => !e.evaluate(r)
  ],
  "is-supported-script": [
    A,
    [I],
    // At parse time this will always return true, so we need to exclude this expression with isGlobalPropertyConstant
    (r, [e]) => {
      const t = r.globals && r.globals.isSupportedScript;
      return t ? t(e.evaluate(r)) : !0;
    }
  ],
  upcase: [
    I,
    [I],
    (r, [e]) => e.evaluate(r).toUpperCase()
  ],
  downcase: [
    I,
    [I],
    (r, [e]) => e.evaluate(r).toLowerCase()
  ],
  concat: [
    I,
    Ae(C),
    (r, e) => e.map((t) => He(t.evaluate(r))).join("")
  ],
  "resolved-locale": [
    I,
    [At],
    (r, [e]) => e.evaluate(r).resolvedLocale()
  ]
});
function ms(r) {
  return Array.isArray(r) ? `(${r.map(O).join(", ")})` : `(${O(r.type)}...)`;
}
function wt(r) {
  if (r instanceof Pt)
    return wt(r.boundExpression);
  if (r instanceof ae && r.name === "error")
    return !1;
  if (r instanceof $t)
    return !1;
  if (r instanceof Me)
    return !1;
  if (r instanceof _e)
    return !1;
  if (r instanceof nt)
    return !1;
  const e = r instanceof we || r instanceof ne;
  let t = !0;
  return r.eachChild((n) => {
    e ? t = t && wt(n) : t = t && n instanceof Fe;
  }), t ? Ot(r) && Nt(r, ["zoom", "heatmap-density", "elevation", "line-progress", "accumulated", "is-supported-script"]) : !1;
}
function Ot(r) {
  if (r instanceof ae) {
    if (r.name === "get" && r.args.length === 1)
      return !1;
    if (r.name === "feature-state")
      return !1;
    if (r.name === "has" && r.args.length === 1)
      return !1;
    if (r.name === "properties" || r.name === "geometry-type" || r.name === "id")
      return !1;
    if (/^filter-/.test(r.name))
      return !1;
  }
  if (r instanceof Me || r instanceof _e)
    return !1;
  let e = !0;
  return r.eachChild((t) => {
    e && !Ot(t) && (e = !1);
  }), e;
}
function Xe(r) {
  if (r instanceof ae && r.name === "feature-state")
    return !1;
  let e = !0;
  return r.eachChild((t) => {
    e && !Xe(t) && (e = !1);
  }), e;
}
function Nt(r, e) {
  if (r instanceof ae && e.indexOf(r.name) >= 0)
    return !1;
  let t = !0;
  return r.eachChild((n) => {
    t && !Nt(n, e) && (t = !1);
  }), t;
}
function ur(r) {
  return { result: "success", value: r };
}
function je(r) {
  return { result: "error", value: r };
}
function St(r) {
  return r["property-type"] === "data-driven" || r["property-type"] === "cross-faded-data-driven";
}
function Zn(r) {
  return !!r.expression && r.expression.parameters.indexOf("zoom") > -1;
}
function Jn(r) {
  return !!r.expression && r.expression.interpolated;
}
function E(r) {
  return r instanceof Number ? "number" : r instanceof String ? "string" : r instanceof Boolean ? "boolean" : Array.isArray(r) ? "array" : r === null ? "null" : typeof r;
}
function $r(r) {
  return typeof r == "object" && r !== null && !Array.isArray(r) && q(r) === Ie;
}
class hs {
  constructor(e, t) {
    this.expression = e, this._warningHistory = {}, this._evaluator = new Dn(), this._defaultValue = t ? bs(t) : null, this._enumValues = t && t.type === "enum" ? t.values : null;
  }
  evaluateWithoutErrorHandling(e, t, n, a, o, i) {
    return this._evaluator.globals = e, this._evaluator.feature = t, this._evaluator.featureState = n, this._evaluator.canonical = a, this._evaluator.availableImages = o || null, this._evaluator.formattedSection = i, this.expression.evaluate(this._evaluator);
  }
  evaluate(e, t, n, a, o, i) {
    this._evaluator.globals = e, this._evaluator.feature = t || null, this._evaluator.featureState = n || null, this._evaluator.canonical = a, this._evaluator.availableImages = o || null, this._evaluator.formattedSection = i || null;
    try {
      const s = this.expression.evaluate(this._evaluator);
      if (s == null || typeof s == "number" && s !== s)
        return this._defaultValue;
      if (this._enumValues && !(s in this._enumValues))
        throw new N(`Expected value to be one of ${Object.keys(this._enumValues).map((l) => JSON.stringify(l)).join(", ")}, but found ${JSON.stringify(s)} instead.`);
      return s;
    } catch (s) {
      return this._warningHistory[s.message] || (this._warningHistory[s.message] = !0, typeof console < "u" && console.warn(s.message)), this._defaultValue;
    }
  }
}
function Yn(r) {
  return Array.isArray(r) && r.length > 0 && typeof r[0] == "string" && r[0] in Rr;
}
function Xn(r, e) {
  const t = new _t(Rr, wt, [], e ? vs(e) : void 0), n = t.parse(r, void 0, void 0, void 0, e && e.type === "string" ? { typeAnnotation: "coerce" } : void 0);
  return n ? ur(new hs(n, e)) : je(t.errors);
}
class gn {
  constructor(e, t) {
    this.kind = e, this._styleExpression = t, this.isStateDependent = e !== "constant" && !Xe(t.expression), this.globalStateRefs = jr(t.expression);
  }
  evaluateWithoutErrorHandling(e, t, n, a, o, i) {
    return this._styleExpression.evaluateWithoutErrorHandling(e, t, n, a, o, i);
  }
  evaluate(e, t, n, a, o, i) {
    return this._styleExpression.evaluate(e, t, n, a, o, i);
  }
}
class vn {
  constructor(e, t, n, a) {
    this.kind = e, this.zoomStops = n, this._styleExpression = t, this.isStateDependent = e !== "camera" && !Xe(t.expression), this.globalStateRefs = jr(t.expression), this.interpolationType = a;
  }
  evaluateWithoutErrorHandling(e, t, n, a, o, i) {
    return this._styleExpression.evaluateWithoutErrorHandling(e, t, n, a, o, i);
  }
  evaluate(e, t, n, a, o, i) {
    return this._styleExpression.evaluate(e, t, n, a, o, i);
  }
  interpolationFactor(e, t, n) {
    return this.interpolationType ? pe.interpolationFactor(this.interpolationType, e, t, n) : 0;
  }
}
function gs(r, e) {
  const t = Xn(r, e);
  if (t.result === "error")
    return t;
  const n = t.value.expression, a = Ot(n);
  if (!a && !St(e))
    return je([new ue("", "data expressions not supported")]);
  const o = Nt(n, ["zoom"]);
  if (!o && !Zn(e))
    return je([new ue("", "zoom expressions not supported")]);
  const i = ft(n);
  if (!i && !o)
    return je([new ue("", '"zoom" expression may only be used as input to a top-level "step" or "interpolate" expression.')]);
  if (i instanceof ue)
    return je([i]);
  if (i instanceof pe && !Jn(e))
    return je([new ue("", '"interpolate" expressions cannot be used with this property')]);
  if (!i)
    return ur(a ? new gn("constant", t.value) : new gn("source", t.value));
  const s = i instanceof pe ? i.interpolation : void 0;
  return ur(a ? new vn("camera", t.value, i.labels, s) : new vn("composite", t.value, i.labels, s));
}
function ft(r) {
  let e = null;
  if (r instanceof zt)
    e = ft(r.result);
  else if (r instanceof Je) {
    for (const t of r.args)
      if (e = ft(t), e)
        break;
  } else (r instanceof Rt || r instanceof pe) && r.input instanceof ae && r.input.name === "zoom" && (e = r);
  return e instanceof ue || r.eachChild((t) => {
    const n = ft(t);
    n instanceof ue ? e = n : !e && n ? e = new ue("", '"zoom" expression may only be used as input to a top-level "step" or "interpolate" expression.') : e && n && e !== n && (e = new ue("", 'Only one zoom-based "step" or "interpolate" subexpression may be used in an expression.'));
  }), e;
}
function jr(r, e = /* @__PURE__ */ new Set()) {
  return r instanceof nt && e.add(r.key), r.eachChild((t) => {
    jr(t, e);
  }), e;
}
function vs(r) {
  const e = {
    color: ce,
    string: I,
    number: g,
    enum: I,
    boolean: A,
    formatted: Tt,
    padding: It,
    numberArray: Et,
    colorArray: Ke,
    projectionDefinition: Ct,
    resolvedImage: tt,
    variableAnchorOffsetCollection: Mt
  };
  return r.type === "array" ? Z(e[r.value] || C, r.length) : e[r.type];
}
function bs(r) {
  if (r.type === "color" && $r(r.default))
    return new P(0, 0, 0, 0);
  switch (r.type) {
    case "color":
      return P.parse(r.default) || null;
    case "padding":
      return X.parse(r.default) || null;
    case "numberArray":
      return Q.parse(r.default) || null;
    case "colorArray":
      return K.parse(r.default) || null;
    case "variableAnchorOffsetCollection":
      return oe.parse(r.default) || null;
    case "projectionDefinition":
      return re.parse(r.default) || null;
    default:
      return r.default === void 0 ? null : r.default;
  }
}
function Qn(r) {
  if (r === !0 || r === !1)
    return !0;
  if (!Array.isArray(r) || r.length === 0)
    return !1;
  switch (r[0]) {
    case "has":
      return r.length >= 2 && r[1] !== "$id" && r[1] !== "$type";
    case "in":
      return r.length >= 3 && (typeof r[1] != "string" || Array.isArray(r[2]));
    case "!in":
    case "!has":
    case "none":
      return !1;
    case "==":
    case "!=":
    case ">":
    case ">=":
    case "<":
    case "<=":
      return r.length !== 3 || Array.isArray(r[1]) || Array.isArray(r[2]);
    case "any":
    case "all":
      for (const e of r.slice(1))
        if (!Qn(e) && typeof e != "boolean")
          return !1;
      return !0;
    default:
      return !0;
  }
}
function ea(r) {
  const e = r.key, t = r.value;
  return t ? [new h(e, t, "constants have been deprecated as of v8")] : [];
}
function D(r) {
  return r instanceof Number || r instanceof String || r instanceof Boolean ? r.valueOf() : r;
}
function Pe(r) {
  if (Array.isArray(r))
    return r.map(Pe);
  if (r instanceof Object && !(r instanceof Number || r instanceof String || r instanceof Boolean)) {
    const e = {};
    for (const t in r)
      e[t] = Pe(r[t]);
    return e;
  }
  return D(r);
}
function ee(r) {
  const e = r.key, t = r.value, n = r.valueSpec || {}, a = r.objectElementValidators || {}, o = r.style, i = r.styleSpec, s = r.validateSpec;
  let l = [];
  const u = E(t);
  if (u !== "object")
    return [new h(e, t, `object expected, ${u} found`)];
  for (const c in t) {
    const p = c.split(".")[0], y = Ve(n, p) || n["*"];
    let f;
    if (Ve(a, p))
      f = a[p];
    else if (Ve(n, p))
      f = s;
    else if (a["*"])
      f = a["*"];
    else if (n["*"])
      f = s;
    else {
      l.push(new h(e, t[c], `unknown property "${c}"`));
      continue;
    }
    l = l.concat(f({
      key: (e && `${e}.`) + c,
      value: t[c],
      valueSpec: y,
      style: o,
      styleSpec: i,
      object: t,
      objectKey: c,
      validateSpec: s
    }, t));
  }
  for (const c in n)
    a[c] || n[c].required && n[c].default === void 0 && t[c] === void 0 && l.push(new h(e, t, `missing required property "${c}"`));
  return l;
}
function Or(r) {
  const e = r.value, t = r.valueSpec, n = r.validateSpec, a = r.style, o = r.styleSpec, i = r.key, s = r.arrayElementValidator || n;
  if (E(e) !== "array")
    return [new h(i, e, `array expected, ${E(e)} found`)];
  if (t.length && e.length !== t.length)
    return [new h(i, e, `array length ${t.length} expected, length ${e.length} found`)];
  if (t["min-length"] && e.length < t["min-length"])
    return [new h(i, e, `array length at least ${t["min-length"]} expected, length ${e.length} found`)];
  let l = {
    type: t.value,
    values: t.values
  };
  o.$version < 7 && (l.function = t.function), E(t.value) === "object" && (l = t.value);
  let u = [];
  for (let c = 0; c < e.length; c++)
    u = u.concat(s({
      array: e,
      arrayIndex: c,
      value: e[c],
      valueSpec: l,
      validateSpec: r.validateSpec,
      style: a,
      styleSpec: o,
      key: `${i}[${c}]`
    }));
  return u;
}
function Ft(r) {
  const e = r.key, t = r.value, n = r.valueSpec;
  let a = E(t);
  return a === "number" && t !== t && (a = "NaN"), a !== "number" ? [new h(e, t, `number expected, ${a} found`)] : "minimum" in n && t < n.minimum ? [new h(e, t, `${t} is less than the minimum value ${n.minimum}`)] : "maximum" in n && t > n.maximum ? [new h(e, t, `${t} is greater than the maximum value ${n.maximum}`)] : [];
}
function ta(r) {
  const e = r.valueSpec, t = D(r.value.type);
  let n, a = {}, o, i;
  const s = t !== "categorical" && r.value.property === void 0, l = !s, u = E(r.value.stops) === "array" && E(r.value.stops[0]) === "array" && E(r.value.stops[0][0]) === "object", c = ee({
    key: r.key,
    value: r.value,
    valueSpec: r.styleSpec.function,
    validateSpec: r.validateSpec,
    style: r.style,
    styleSpec: r.styleSpec,
    objectElementValidators: {
      stops: p,
      default: d
    }
  });
  return t === "identity" && s && c.push(new h(r.key, r.value, 'missing required property "property"')), t !== "identity" && !r.value.stops && c.push(new h(r.key, r.value, 'missing required property "stops"')), t === "exponential" && r.valueSpec.expression && !Jn(r.valueSpec) && c.push(new h(r.key, r.value, "exponential functions not supported")), r.styleSpec.$version >= 8 && (l && !St(r.valueSpec) ? c.push(new h(r.key, r.value, "property functions not supported")) : s && !Zn(r.valueSpec) && c.push(new h(r.key, r.value, "zoom functions not supported"))), (t === "categorical" || u) && r.value.property === void 0 && c.push(new h(r.key, r.value, '"property" property is required')), c;
  function p(m) {
    if (t === "identity")
      return [new h(m.key, m.value, 'identity function may not have a "stops" property')];
    let v = [];
    const w = m.value;
    return v = v.concat(Or({
      key: m.key,
      value: w,
      valueSpec: m.valueSpec,
      validateSpec: m.validateSpec,
      style: m.style,
      styleSpec: m.styleSpec,
      arrayElementValidator: y
    })), E(w) === "array" && w.length === 0 && v.push(new h(m.key, w, "array must have at least one stop")), v;
  }
  function y(m) {
    let v = [];
    const w = m.value, b = m.key;
    if (E(w) !== "array")
      return [new h(b, w, `array expected, ${E(w)} found`)];
    if (w.length !== 2)
      return [new h(b, w, `array length 2 expected, length ${w.length} found`)];
    if (u) {
      if (E(w[0]) !== "object")
        return [new h(b, w, `object expected, ${E(w[0])} found`)];
      if (w[0].zoom === void 0)
        return [new h(b, w, "object stop key must have zoom")];
      if (w[0].value === void 0)
        return [new h(b, w, "object stop key must have value")];
      if (i && i > D(w[0].zoom))
        return [new h(b, w[0].zoom, "stop zoom values must appear in ascending order")];
      D(w[0].zoom) !== i && (i = D(w[0].zoom), o = void 0, a = {}), v = v.concat(ee({
        key: `${b}[0]`,
        value: w[0],
        valueSpec: { zoom: {} },
        validateSpec: m.validateSpec,
        style: m.style,
        styleSpec: m.styleSpec,
        objectElementValidators: { zoom: Ft, value: f }
      }));
    } else
      v = v.concat(f({
        key: `${b}[0]`,
        value: w[0],
        validateSpec: m.validateSpec,
        style: m.style,
        styleSpec: m.styleSpec
      }, w));
    return Yn(Pe(w[1])) ? v.concat([new h(`${b}[1]`, w[1], "expressions are not allowed in function stops.")]) : v.concat(m.validateSpec({
      key: `${b}[1]`,
      value: w[1],
      valueSpec: e,
      validateSpec: m.validateSpec,
      style: m.style,
      styleSpec: m.styleSpec
    }));
  }
  function f(m, v) {
    const w = E(m.value), b = D(m.value), T = m.value !== null ? m.value : v;
    if (!n)
      n = w;
    else if (w !== n)
      return [new h(m.key, T, `${w} stop domain type must match previous stop domain type ${n}`)];
    if (w !== "number" && w !== "string" && w !== "boolean")
      return [new h(m.key, T, "stop domain value must be a number, string, or boolean")];
    if (w !== "number" && t !== "categorical") {
      let j = `number expected, ${w} found`;
      return St(e) && t === void 0 && (j += '\nIf you intended to use a categorical function, specify `"type": "categorical"`.'), [new h(m.key, T, j)];
    }
    return t === "categorical" && w === "number" && (!isFinite(b) || Math.floor(b) !== b) ? [new h(m.key, T, `integer expected, found ${b}`)] : t !== "categorical" && w === "number" && o !== void 0 && b < o ? [new h(m.key, T, "stop domain values must appear in ascending order")] : (o = b, t === "categorical" && b in a ? [new h(m.key, T, "stop domain values must be unique")] : (a[b] = !0, []));
  }
  function d(m) {
    return m.validateSpec({
      key: m.key,
      value: m.value,
      valueSpec: e,
      validateSpec: m.validateSpec,
      style: m.style,
      styleSpec: m.styleSpec
    });
  }
}
function De(r) {
  const e = (r.expressionContext === "property" ? gs : Xn)(Pe(r.value), r.valueSpec);
  if (e.result === "error")
    return e.value.map((n) => new h(`${r.key}${n.key}`, r.value, n.message));
  const t = e.value.expression || e.value._styleExpression.expression;
  if (r.expressionContext === "property" && r.propertyKey === "text-font" && !t.outputDefined())
    return [new h(r.key, r.value, `Invalid data expression for "${r.propertyKey}". Output values must be contained as literals within the expression.`)];
  if (r.expressionContext === "property" && r.propertyType === "layout" && !Xe(t))
    return [new h(r.key, r.value, '"feature-state" data expressions are not supported with layout properties.')];
  if (r.expressionContext === "filter" && !Xe(t))
    return [new h(r.key, r.value, '"feature-state" data expressions are not supported with filters.')];
  if (r.expressionContext && r.expressionContext.indexOf("cluster") === 0) {
    if (!Nt(t, ["zoom", "feature-state"]))
      return [new h(r.key, r.value, '"zoom" and "feature-state" expressions are not supported with cluster properties.')];
    if (r.expressionContext === "cluster-initial" && !Ot(t))
      return [new h(r.key, r.value, "Feature data expressions are not supported with initial expression part of cluster properties.")];
  }
  return [];
}
function ws(r) {
  const e = r.value, t = r.key, n = E(e);
  return n !== "boolean" ? [new h(t, e, `boolean expected, ${n} found`)] : [];
}
function cr(r) {
  const e = r.key, t = r.value, n = E(t);
  return n !== "string" ? [new h(e, t, `color expected, ${n} found`)] : P.parse(String(t)) ? [] : [new h(e, t, `color expected, "${t}" found`)];
}
function Qe(r) {
  const e = r.key, t = r.value, n = r.valueSpec, a = [];
  return Array.isArray(n.values) ? n.values.indexOf(D(t)) === -1 && a.push(new h(e, t, `expected one of [${n.values.join(", ")}], ${JSON.stringify(t)} found`)) : Object.keys(n.values).indexOf(D(t)) === -1 && a.push(new h(e, t, `expected one of [${Object.keys(n.values).join(", ")}], ${JSON.stringify(t)} found`)), a;
}
function Nr(r) {
  return Qn(Pe(r.value)) ? De(yt({}, r, {
    expressionContext: "filter",
    valueSpec: { value: "boolean" }
  })) : ra(r);
}
function ra(r) {
  const e = r.value, t = r.key;
  if (E(e) !== "array")
    return [new h(t, e, `array expected, ${E(e)} found`)];
  const n = r.styleSpec;
  let a, o = [];
  if (e.length < 1)
    return [new h(t, e, "filter array must have at least 1 element")];
  switch (o = o.concat(Qe({
    key: `${t}[0]`,
    value: e[0],
    valueSpec: n.filter_operator,
    style: r.style,
    styleSpec: r.styleSpec
  })), D(e[0])) {
    case "<":
    case "<=":
    case ">":
    case ">=":
      e.length >= 2 && D(e[1]) === "$type" && o.push(new h(t, e, `"$type" cannot be use with operator "${e[0]}"`));
    /* falls through */
    case "==":
    case "!=":
      e.length !== 3 && o.push(new h(t, e, `filter array for operator "${e[0]}" must have 3 elements`));
    /* falls through */
    case "in":
    case "!in":
      e.length >= 2 && (a = E(e[1]), a !== "string" && o.push(new h(`${t}[1]`, e[1], `string expected, ${a} found`)));
      for (let i = 2; i < e.length; i++)
        a = E(e[i]), D(e[1]) === "$type" ? o = o.concat(Qe({
          key: `${t}[${i}]`,
          value: e[i],
          valueSpec: n.geometry_type,
          style: r.style,
          styleSpec: r.styleSpec
        })) : a !== "string" && a !== "number" && a !== "boolean" && o.push(new h(`${t}[${i}]`, e[i], `string, number, or boolean expected, ${a} found`));
      break;
    case "any":
    case "all":
    case "none":
      for (let i = 1; i < e.length; i++)
        o = o.concat(ra({
          key: `${t}[${i}]`,
          value: e[i],
          style: r.style,
          styleSpec: r.styleSpec
        }));
      break;
    case "has":
    case "!has":
      a = E(e[1]), e.length !== 2 ? o.push(new h(t, e, `filter array for "${e[0]}" operator must have 2 elements`)) : a !== "string" && o.push(new h(`${t}[1]`, e[1], `string expected, ${a} found`));
      break;
  }
  return o;
}
function na(r, e) {
  const t = r.key, n = r.validateSpec, a = r.style, o = r.styleSpec, i = r.value, s = r.objectKey, l = o[`${e}_${r.layerType}`];
  if (!l)
    return [];
  const u = s.match(/^(.*)-transition$/);
  if (e === "paint" && u && l[u[1]] && l[u[1]].transition)
    return n({
      key: t,
      value: i,
      valueSpec: o.transition,
      style: a,
      styleSpec: o
    });
  const c = r.valueSpec || l[s];
  if (!c)
    return [new h(t, i, `unknown property "${s}"`)];
  let p;
  if (E(i) === "string" && St(c) && !c.tokens && (p = /^{([^}]+)}$/.exec(i)))
    return [new h(t, i, `"${s}" does not support interpolation syntax
Use an identity property function instead: \`{ "type": "identity", "property": ${JSON.stringify(p[1])} }\`.`)];
  const y = [];
  return r.layerType === "symbol" && (s === "text-field" && a && !a.glyphs && y.push(new h(t, i, 'use of "text-field" requires a style "glyphs" property')), s === "text-font" && $r(Pe(i)) && D(i.type) === "identity" && y.push(new h(t, i, '"text-font" does not support identity functions'))), y.concat(n({
    key: r.key,
    value: i,
    valueSpec: c,
    style: a,
    styleSpec: o,
    expressionContext: "property",
    propertyType: e,
    propertyKey: s
  }));
}
function aa(r) {
  return na(r, "paint");
}
function oa(r) {
  return na(r, "layout");
}
function ia(r) {
  let e = [];
  const t = r.value, n = r.key, a = r.style, o = r.styleSpec;
  if (E(t) !== "object")
    return [new h(n, t, `object expected, ${E(t)} found`)];
  !t.type && !t.ref && e.push(new h(n, t, 'either "type" or "ref" is required'));
  let i = D(t.type);
  const s = D(t.ref);
  if (t.id) {
    const l = D(t.id);
    for (let u = 0; u < r.arrayIndex; u++) {
      const c = a.layers[u];
      D(c.id) === l && e.push(new h(n, t.id, `duplicate layer id "${t.id}", previously used at line ${c.id.__line__}`));
    }
  }
  if ("ref" in t) {
    ["type", "source", "source-layer", "filter", "layout"].forEach((u) => {
      u in t && e.push(new h(n, t[u], `"${u}" is prohibited for ref layers`));
    });
    let l;
    a.layers.forEach((u) => {
      D(u.id) === s && (l = u);
    }), l ? l.ref ? e.push(new h(n, t.ref, "ref cannot reference another ref layer")) : i = D(l.type) : e.push(new h(n, t.ref, `ref layer "${s}" not found`));
  } else if (i !== "background")
    if (!t.source)
      e.push(new h(n, t, 'missing required property "source"'));
    else {
      const l = a.sources && a.sources[t.source], u = l && D(l.type);
      l ? u === "vector" && i === "raster" ? e.push(new h(n, t.source, `layer "${t.id}" requires a raster source`)) : u !== "raster-dem" && i === "hillshade" ? e.push(new h(n, t.source, `layer "${t.id}" requires a raster-dem source`)) : u !== "raster-dem" && i === "color-relief" ? e.push(new h(n, t.source, `layer "${t.id}" requires a raster-dem source`)) : u === "raster" && i !== "raster" ? e.push(new h(n, t.source, `layer "${t.id}" requires a vector source`)) : u === "vector" && !t["source-layer"] ? e.push(new h(n, t, `layer "${t.id}" must specify a "source-layer"`)) : u === "raster-dem" && i !== "hillshade" && i !== "color-relief" ? e.push(new h(n, t.source, "raster-dem source can only be used with layer type 'hillshade' or 'color-relief'.")) : i === "line" && t.paint && t.paint["line-gradient"] && (u !== "geojson" || !l.lineMetrics) && e.push(new h(n, t, `layer "${t.id}" specifies a line-gradient, which requires a GeoJSON source with \`lineMetrics\` enabled.`)) : e.push(new h(n, t.source, `source "${t.source}" not found`));
    }
  return e = e.concat(ee({
    key: n,
    value: t,
    valueSpec: o.layer,
    style: r.style,
    styleSpec: r.styleSpec,
    validateSpec: r.validateSpec,
    objectElementValidators: {
      "*"() {
        return [];
      },
      // We don't want to enforce the spec's `"requires": true` for backward compatibility with refs;
      // the actual requirement is validated above. See https://github.com/mapbox/mapbox-gl-js/issues/5772.
      type() {
        return r.validateSpec({
          key: `${n}.type`,
          value: t.type,
          valueSpec: o.layer.type,
          style: r.style,
          styleSpec: r.styleSpec,
          validateSpec: r.validateSpec,
          object: t,
          objectKey: "type"
        });
      },
      filter: Nr,
      layout(l) {
        return ee({
          layer: t,
          key: l.key,
          value: l.value,
          style: l.style,
          styleSpec: l.styleSpec,
          validateSpec: l.validateSpec,
          objectElementValidators: {
            "*"(u) {
              return oa(yt({ layerType: i }, u));
            }
          }
        });
      },
      paint(l) {
        return ee({
          layer: t,
          key: l.key,
          value: l.value,
          style: l.style,
          styleSpec: l.styleSpec,
          validateSpec: l.validateSpec,
          objectElementValidators: {
            "*"(u) {
              return aa(yt({ layerType: i }, u));
            }
          }
        });
      }
    }
  })), e;
}
function Re(r) {
  const e = r.value, t = r.key, n = E(e);
  return n !== "string" ? [new h(t, e, `string expected, ${n} found`)] : [];
}
function Ss(r) {
  var e;
  const t = (e = r.sourceName) !== null && e !== void 0 ? e : "", n = r.value, a = r.styleSpec, o = a.source_raster_dem, i = r.style;
  let s = [];
  const l = E(n);
  if (n === void 0)
    return s;
  if (l !== "object")
    return s.push(new h("source_raster_dem", n, `object expected, ${l} found`)), s;
  const c = D(n.encoding) === "custom", p = ["redFactor", "greenFactor", "blueFactor", "baseShift"], y = r.value.encoding ? `"${r.value.encoding}"` : "Default";
  for (const f in n)
    !c && p.includes(f) ? s.push(new h(f, n[f], `In "${t}": "${f}" is only valid when "encoding" is set to "custom". ${y} encoding found`)) : o[f] ? s = s.concat(r.validateSpec({
      key: f,
      value: n[f],
      valueSpec: o[f],
      validateSpec: r.validateSpec,
      style: i,
      styleSpec: a
    })) : s.push(new h(f, n[f], `unknown property "${f}"`));
  return s;
}
const bn = {
  promoteId: xs
};
function sa(r) {
  const e = r.value, t = r.key, n = r.styleSpec, a = r.style, o = r.validateSpec;
  if (!e.type)
    return [new h(t, e, '"type" is required')];
  const i = D(e.type);
  let s;
  switch (i) {
    case "vector":
    case "raster":
      return s = ee({
        key: t,
        value: e,
        valueSpec: n[`source_${i.replace("-", "_")}`],
        style: r.style,
        styleSpec: n,
        objectElementValidators: bn,
        validateSpec: o
      }), s;
    case "raster-dem":
      return s = Ss({
        sourceName: t,
        value: e,
        style: r.style,
        styleSpec: n,
        validateSpec: o
      }), s;
    case "geojson":
      if (s = ee({
        key: t,
        value: e,
        valueSpec: n.source_geojson,
        style: a,
        styleSpec: n,
        validateSpec: o,
        objectElementValidators: bn
      }), e.cluster)
        for (const l in e.clusterProperties) {
          const [u, c] = e.clusterProperties[l], p = typeof u == "string" ? [u, ["accumulated"], ["get", l]] : u;
          s.push(...De({
            key: `${t}.${l}.map`,
            value: c,
            expressionContext: "cluster-map"
          })), s.push(...De({
            key: `${t}.${l}.reduce`,
            value: p,
            expressionContext: "cluster-reduce"
          }));
        }
      return s;
    case "video":
      return ee({
        key: t,
        value: e,
        valueSpec: n.source_video,
        style: a,
        validateSpec: o,
        styleSpec: n
      });
    case "image":
      return ee({
        key: t,
        value: e,
        valueSpec: n.source_image,
        style: a,
        validateSpec: o,
        styleSpec: n
      });
    case "canvas":
      return [new h(t, null, "Please use runtime APIs to add canvas sources, rather than including them in stylesheets.", "source.canvas")];
    default:
      return Qe({
        key: `${t}.type`,
        value: e.type,
        valueSpec: { values: ["vector", "raster", "raster-dem", "geojson", "video", "image"] }
      });
  }
}
function xs({ key: r, value: e }) {
  if (E(e) === "string")
    return Re({ key: r, value: e });
  {
    const t = [];
    for (const n in e)
      t.push(...Re({ key: `${r}.${n}`, value: e[n] }));
    return t;
  }
}
function la(r) {
  const e = r.value, t = r.styleSpec, n = t.light, a = r.style;
  let o = [];
  const i = E(e);
  if (e === void 0)
    return o;
  if (i !== "object")
    return o = o.concat([new h("light", e, `object expected, ${i} found`)]), o;
  for (const s in e) {
    const l = s.match(/^(.*)-transition$/);
    l && n[l[1]] && n[l[1]].transition ? o = o.concat(r.validateSpec({
      key: s,
      value: e[s],
      valueSpec: t.transition,
      validateSpec: r.validateSpec,
      style: a,
      styleSpec: t
    })) : n[s] ? o = o.concat(r.validateSpec({
      key: s,
      value: e[s],
      valueSpec: n[s],
      validateSpec: r.validateSpec,
      style: a,
      styleSpec: t
    })) : o = o.concat([new h(s, e[s], `unknown property "${s}"`)]);
  }
  return o;
}
function ua(r) {
  const e = r.value, t = r.styleSpec, n = t.sky, a = r.style, o = E(e);
  if (e === void 0)
    return [];
  if (o !== "object")
    return [new h("sky", e, `object expected, ${o} found`)];
  let i = [];
  for (const s in e)
    n[s] ? i = i.concat(r.validateSpec({
      key: s,
      value: e[s],
      valueSpec: n[s],
      style: a,
      styleSpec: t
    })) : i = i.concat([new h(s, e[s], `unknown property "${s}"`)]);
  return i;
}
function ca(r) {
  const e = r.value, t = r.styleSpec, n = t.terrain, a = r.style;
  let o = [];
  const i = E(e);
  if (e === void 0)
    return o;
  if (i !== "object")
    return o = o.concat([new h("terrain", e, `object expected, ${i} found`)]), o;
  for (const s in e)
    n[s] ? o = o.concat(r.validateSpec({
      key: s,
      value: e[s],
      valueSpec: n[s],
      validateSpec: r.validateSpec,
      style: a,
      styleSpec: t
    })) : o = o.concat([new h(s, e[s], `unknown property "${s}"`)]);
  return o;
}
function ks(r) {
  return Re(r).length === 0 ? [] : De(r);
}
function Ls(r) {
  return Re(r).length === 0 ? [] : De(r);
}
function Cs(r) {
  const e = r.key, t = r.value;
  if (E(t) === "array") {
    if (t.length < 1 || t.length > 4)
      return [new h(e, t, `padding requires 1 to 4 values; ${t.length} values found`)];
    const a = {
      type: "number"
    };
    let o = [];
    for (let i = 0; i < t.length; i++)
      o = o.concat(r.validateSpec({
        key: `${e}[${i}]`,
        value: t[i],
        validateSpec: r.validateSpec,
        valueSpec: a
      }));
    return o;
  } else
    return Ft({
      key: e,
      value: t,
      valueSpec: {}
    });
}
function As(r) {
  const e = r.key, t = r.value;
  if (E(t) === "array") {
    const a = {
      type: "number"
    };
    if (t.length < 1)
      return [new h(e, t, "array length at least 1 expected, length 0 found")];
    let o = [];
    for (let i = 0; i < t.length; i++)
      o = o.concat(r.validateSpec({
        key: `${e}[${i}]`,
        value: t[i],
        validateSpec: r.validateSpec,
        valueSpec: a
      }));
    return o;
  } else
    return Ft({
      key: e,
      value: t,
      valueSpec: {}
    });
}
function Ts(r) {
  const e = r.key, t = r.value;
  if (E(t) === "array") {
    if (t.length < 1)
      return [new h(e, t, "array length at least 1 expected, length 0 found")];
    let a = [];
    for (let o = 0; o < t.length; o++)
      a = a.concat(cr({
        key: `${e}[${o}]`,
        value: t[o]
      }));
    return a;
  } else
    return cr({
      key: e,
      value: t
    });
}
function Is(r) {
  const e = r.key, t = r.value, n = E(t), a = r.styleSpec;
  if (n !== "array" || t.length < 1 || t.length % 2 !== 0)
    return [new h(e, t, "variableAnchorOffsetCollection requires a non-empty array of even length")];
  let o = [];
  for (let i = 0; i < t.length; i += 2)
    o = o.concat(Qe({
      key: `${e}[${i}]`,
      value: t[i],
      valueSpec: a.layout_symbol["text-anchor"]
    })), o = o.concat(Or({
      key: `${e}[${i + 1}]`,
      value: t[i + 1],
      valueSpec: {
        length: 2,
        value: "number"
      },
      validateSpec: r.validateSpec,
      style: r.style,
      styleSpec: a
    }));
  return o;
}
function pa(r) {
  let e = [];
  const t = r.value, n = r.key;
  if (Array.isArray(t)) {
    const a = [], o = [];
    for (const i in t) {
      t[i].id && a.includes(t[i].id) && e.push(new h(n, t, `all the sprites' ids must be unique, but ${t[i].id} is duplicated`)), a.push(t[i].id), t[i].url && o.includes(t[i].url) && e.push(new h(n, t, `all the sprites' URLs must be unique, but ${t[i].url} is duplicated`)), o.push(t[i].url);
      const s = {
        id: {
          type: "string",
          required: !0
        },
        url: {
          type: "string",
          required: !0
        }
      };
      e = e.concat(ee({
        key: `${n}[${i}]`,
        value: t[i],
        valueSpec: s,
        validateSpec: r.validateSpec
      }));
    }
    return e;
  } else
    return Re({
      key: n,
      value: t
    });
}
function Es(r) {
  const e = r.value, t = r.styleSpec, n = t.projection, a = r.style, o = E(e);
  if (e === void 0)
    return [];
  if (o !== "object")
    return [new h("projection", e, `object expected, ${o} found`)];
  let i = [];
  for (const s in e)
    n[s] ? i = i.concat(r.validateSpec({
      key: s,
      value: e[s],
      valueSpec: n[s],
      style: a,
      styleSpec: t
    })) : i = i.concat([new h(s, e[s], `unknown property "${s}"`)]);
  return i;
}
function Ms(r) {
  const e = r.key;
  let t = r.value;
  t = t instanceof String ? t.valueOf() : t;
  const n = E(t);
  return n === "array" && !zs(t) && !_s(t) ? [new h(e, t, `projection expected, invalid array ${JSON.stringify(t)} found`)] : ["array", "string"].includes(n) ? [] : [new h(e, t, `projection expected, invalid type "${n}" found`)];
}
function _s(r) {
  return !!["interpolate", "step", "literal"].includes(r[0]);
}
function zs(r) {
  return Array.isArray(r) && r.length === 3 && typeof r[0] == "string" && typeof r[1] == "string" && typeof r[2] == "number";
}
function Ps(r) {
  return !!r && r.constructor === Object;
}
function fa(r) {
  return Ps(r.value) ? [] : [
    new h(r.key, r.value, `object expected, ${E(r.value)} found`)
  ];
}
const wn = {
  "*"() {
    return [];
  },
  array: Or,
  boolean: ws,
  number: Ft,
  color: cr,
  constants: ea,
  enum: Qe,
  filter: Nr,
  function: ta,
  layer: ia,
  object: ee,
  source: sa,
  light: la,
  sky: ua,
  terrain: ca,
  projection: Es,
  projectionDefinition: Ms,
  string: Re,
  formatted: ks,
  resolvedImage: Ls,
  padding: Cs,
  numberArray: As,
  colorArray: Ts,
  variableAnchorOffsetCollection: Is,
  sprite: pa,
  state: fa
};
function xt(r) {
  const e = r.value, t = r.valueSpec, n = r.styleSpec;
  return r.validateSpec = xt, t.expression && $r(D(e)) ? ta(r) : t.expression && Yn(Pe(e)) ? De(r) : t.type && wn[t.type] ? wn[t.type](r) : ee(yt({}, r, {
    valueSpec: t.type ? n[t.type] : t
  }));
}
function da(r) {
  const e = r.value, t = r.key, n = Re(r);
  return n.length || (e.indexOf("{fontstack}") === -1 && n.push(new h(t, e, '"glyphs" url must include a "{fontstack}" token')), e.indexOf("{range}") === -1 && n.push(new h(t, e, '"glyphs" url must include a "{range}" token'))), n;
}
function J(r, e = si) {
  let t = [];
  return t = t.concat(xt({
    key: "",
    value: r,
    valueSpec: e.$root,
    styleSpec: e,
    style: r,
    validateSpec: xt,
    objectElementValidators: {
      glyphs: da,
      "*"() {
        return [];
      }
    }
  })), r.constants && (t = t.concat(ea({
    key: "constants",
    value: r.constants
  }))), ya(t);
}
J.source = se(ie(sa));
J.sprite = se(ie(pa));
J.glyphs = se(ie(da));
J.light = se(ie(la));
J.sky = se(ie(ua));
J.terrain = se(ie(ca));
J.state = se(ie(fa));
J.layer = se(ie(ia));
J.filter = se(ie(Nr));
J.paintProperty = se(ie(aa));
J.layoutProperty = se(ie(oa));
function ie(r) {
  return function(e) {
    return r({
      ...e,
      validateSpec: xt
    });
  };
}
function ya(r) {
  return [].concat(r).sort((e, t) => e.line - t.line);
}
function se(r) {
  return function(...e) {
    return ya(r.apply(this, e));
  };
}
function Sn(r) {
  if (!r)
    return {
      style: Ge[Ut[0].referenceStyleID].getDefaultVariant().getExpandedStyleURL(),
      requiresUrlMonitoring: !1,
      // default styles don't require URL monitoring
      isFallback: !0
    };
  if (typeof r == "string") {
    const t = $s(r);
    return t.isValidStyle ? {
      style: t.styleObject,
      requiresUrlMonitoring: !1,
      isFallback: !1
    } : t.isValidJSON ? {
      style: Ge[Ut[0].referenceStyleID].getDefaultVariant().getExpandedStyleURL(),
      requiresUrlMonitoring: !1,
      // default styles don't require URL monitoring
      isFallback: !0
    } : r.startsWith("http") ? { style: r, requiresUrlMonitoring: !0, isFallback: !1 } : r.toLowerCase().includes(".json") ? {
      style: Rs(r),
      requiresUrlMonitoring: !0,
      isFallback: !1
    } : {
      style: Ua(r),
      requiresUrlMonitoring: !0,
      isFallback: !1
    };
  }
  return r instanceof Ga ? {
    style: r.getExpandedStyleURL(),
    requiresUrlMonitoring: !1,
    isFallback: !1
  } : r instanceof Va ? {
    style: r.getDefaultVariant().getExpandedStyleURL(),
    requiresUrlMonitoring: !1,
    isFallback: !1
  } : J(r).length === 0 ? {
    style: r,
    requiresUrlMonitoring: !1,
    isFallback: !1
  } : {
    style: Ge[Ut[0].referenceStyleID].getDefaultVariant().getExpandedStyleURL(),
    requiresUrlMonitoring: !1,
    // default styles don't require URL monitoring
    isFallback: !0
  };
}
function Rs(r) {
  try {
    return new URL(r).href;
  } catch {
  }
  return new URL(r, location.origin).href;
}
function $s(r) {
  try {
    const e = JSON.parse(r), t = J(e);
    return {
      isValidJSON: !0,
      isValidStyle: t.length === 0,
      styleObject: t.length === 0 ? e : null
    };
  } catch {
    return {
      isValidJSON: !1,
      isValidStyle: !1,
      styleObject: null
    };
  }
}
function ye(r, e, t) {
  const n = window.document.createElement(r);
  return e !== void 0 && (n.className = e), t && t.appendChild(n), n;
}
function Fr(r) {
  r.parentNode && r.parentNode.removeChild(r);
}
class js {
  constructor() {
    L(this, "_map");
    L(this, "_container");
    L(this, "_terrainButton");
    ao(["_toggleTerrain", "_updateTerrainIcon"], this);
  }
  onAdd(e) {
    return this._map = e, this._container = ye("div", "maplibregl-ctrl maplibregl-ctrl-group"), this._terrainButton = ye("button", "maplibregl-ctrl-terrain", this._container), ye("span", "maplibregl-ctrl-icon", this._terrainButton).setAttribute("aria-hidden", "true"), this._terrainButton.type = "button", this._terrainButton.addEventListener("click", this._toggleTerrain), this._updateTerrainIcon(), this._map.on("terrain", this._updateTerrainIcon), this._container;
  }
  onRemove() {
    Fr(this._container), this._map.off("terrain", this._updateTerrainIcon), this._map = void 0;
  }
  _toggleTerrain() {
    this._map.hasTerrain() ? this._map.disableTerrain() : this._map.enableTerrain(), this._updateTerrainIcon();
  }
  _updateTerrainIcon() {
    this._terrainButton.classList.remove("maplibregl-ctrl-terrain"), this._terrainButton.classList.remove("maplibregl-ctrl-terrain-enabled"), this._map.hasTerrain() ? (this._terrainButton.classList.add("maplibregl-ctrl-terrain-enabled"), this._terrainButton.title = this._map._getUIString("TerrainControl.Disable")) : (this._terrainButton.classList.add("maplibregl-ctrl-terrain"), this._terrainButton.title = this._map._getUIString("TerrainControl.Enable"));
  }
}
class Os extends ho {
  constructor(t = {}) {
    super({
      showCompass: t.showCompass ?? !0,
      showZoom: t.showZoom ?? !0,
      visualizePitch: t.visualizePitch ?? !0
    });
    /**
     * Overloading: Limit how flat the compass icon can get
     */
    L(this, "_rotateCompassArrow", () => {
      const t = this._map.getBearing(), n = this._map.getPitch(), a = this.options.visualizePitch ? `scale(${Math.min(1.5, 1 / Math.cos(n * (Math.PI / 180)) ** 0.5)}) rotateX(${Math.min(70, n)}deg) rotateZ(${-t}deg)` : `rotate(${-t}deg)`;
      this._compassIcon.style.transform = a;
    });
    this._compass && (this._compass.removeEventListener("click", this._compass.clickFunction), this._compass.addEventListener("click", (n) => {
      this._map.getPitch() === 0 ? this._map.easeTo({ pitch: Math.min(this._map.getMaxPitch(), 80) }) : this.options.visualizePitch ? this._map.resetNorthPitch({}, { originalEvent: n }) : this._map.resetNorth({}, { originalEvent: n });
    }));
  }
  /**
   * Overloading: the button now stores its click callback so that we can later on delete it and replace it
   */
  _createButton(t, n) {
    const a = super._createButton(t, n);
    return a.clickFunction = n, a;
  }
}
const xn = S.Marker, kn = S.LngLat, Ns = S.LngLatBounds;
class Fs extends go {
  constructor() {
    super(...arguments);
    L(this, "lastUpdatedCenter", new kn(0, 0));
    /**
     * Update the camera location to center on the current position
     *
     * @param {Position} position the Geolocation API Position
     * @private
     */
    L(this, "_updateCamera", (t) => {
      var c;
      const n = new kn(t.coords.longitude, t.coords.latitude), a = t.coords.accuracy, i = {
        bearing: this._map.getBearing(),
        ...this.options.fitBoundsOptions,
        linear: !0
      }, s = this._map.getZoom();
      s > (((c = this.options.fitBoundsOptions) == null ? void 0 : c.maxZoom) ?? 30) && (i.zoom = s), this._map.fitBounds(Ns.fromLngLat(n, a), i, {
        geolocateSource: !0
        // tag this camera change so it won't cause the control to change to background state
      });
      let l = !1;
      const u = () => {
        l = !0;
      };
      this._map.once("click", u), this._map.once("dblclick", u), this._map.once("dragstart", u), this._map.once("mousedown", u), this._map.once("touchstart", u), this._map.once("wheel", u), this._map.once("moveend", () => {
        this._map.off("click", u), this._map.off("dblclick", u), this._map.off("dragstart", u), this._map.off("mousedown", u), this._map.off("touchstart", u), this._map.off("wheel", u), !l && (this.lastUpdatedCenter = this._map.getCenter());
      });
    });
    L(this, "_finishSetupUI", (t) => {
      if (this._map) {
        if (t === !1) {
          const n = this._map._getUIString("GeolocateControl.LocationNotAvailable");
          this._geolocateButton.disabled = !0, this._geolocateButton.title = n, this._geolocateButton.setAttribute("aria-label", n);
        } else {
          const n = this._map._getUIString("GeolocateControl.FindMyLocation");
          this._geolocateButton.disabled = !1, this._geolocateButton.title = n, this._geolocateButton.setAttribute("aria-label", n);
        }
        this.options.trackUserLocation && (this._geolocateButton.setAttribute("aria-pressed", "false"), this._watchState = "OFF"), this.options.showUserLocation && (this._dotElement = ye("div", "maplibregl-user-location-dot"), this._userLocationDotMarker = new xn({ element: this._dotElement }), this._circleElement = ye("div", "maplibregl-user-location-accuracy-circle"), this._accuracyCircleMarker = new xn({
          element: this._circleElement,
          pitchAlignment: "map"
        }), this.options.trackUserLocation && (this._watchState = "OFF"), this._map.on("move", this._onZoom)), this._geolocateButton.addEventListener("click", this.trigger.bind(this)), this._setup = !0, this.options.trackUserLocation && this._map.on("moveend", (n) => {
          const a = n.originalEvent && n.originalEvent.type === "resize", o = this.lastUpdatedCenter.distanceTo(this._map.getCenter());
          !n.geolocateSource && this._watchState === "ACTIVE_LOCK" && !a && o > 1 && (this._watchState = "BACKGROUND", this._geolocateButton.classList.add("maplibregl-ctrl-geolocate-background"), this._geolocateButton.classList.remove("maplibregl-ctrl-geolocate-active"), this.fire(new Event("trackuserlocationend")));
        });
      }
    });
    L(this, "_onZoom", () => {
      this.options.showUserLocation && this.options.showAccuracyCircle && this._updateCircleRadius();
    });
  }
  _updateCircleRadius() {
    if (this._watchState !== "BACKGROUND" && this._watchState !== "ACTIVE_LOCK")
      return;
    const t = [this._lastKnownPosition.coords.longitude, this._lastKnownPosition.coords.latitude], n = this._map.project(t), a = this._map.unproject([n.x, n.y]), o = this._map.unproject([n.x + 20, n.y]), i = a.distanceTo(o) / 20, s = Math.ceil(2 * this._accuracy / i);
    this._circleElement.style.width = `${s}px`, this._circleElement.style.height = `${s}px`;
  }
  // We are overwriting the method _setErrorState from Maplibre's GeolocateControl because the
  // case BACKGROUND_ERROR is not dealt with in the original function and yields an error.
  // Related issue: https://github.com/maplibre/maplibre-gl-js/issues/2294
  _setErrorState() {
    switch (this._watchState) {
      case "WAITING_ACTIVE":
        this._watchState = "ACTIVE_ERROR", this._geolocateButton.classList.remove("maplibregl-ctrl-geolocate-active"), this._geolocateButton.classList.add("maplibregl-ctrl-geolocate-active-error");
        break;
      case "ACTIVE_LOCK":
        this._watchState = "ACTIVE_ERROR", this._geolocateButton.classList.remove("maplibregl-ctrl-geolocate-active"), this._geolocateButton.classList.add("maplibregl-ctrl-geolocate-active-error"), this._geolocateButton.classList.add("maplibregl-ctrl-geolocate-waiting");
        break;
      case "BACKGROUND":
        this._watchState = "BACKGROUND_ERROR", this._geolocateButton.classList.remove("maplibregl-ctrl-geolocate-background"), this._geolocateButton.classList.add("maplibregl-ctrl-geolocate-background-error"), this._geolocateButton.classList.add("maplibregl-ctrl-geolocate-waiting");
        break;
      case "ACTIVE_ERROR":
        break;
      case "BACKGROUND_ERROR":
        break;
      default:
        throw new Error(`Unexpected watchState ${this._watchState}`);
    }
  }
}
var H, te, ve, be, W, et, B, ma, Y, ha;
class Qt {
  constructor(e, t) {
    he(this, B);
    he(this, H);
    L(this, "map");
    he(this, te);
    he(this, ve);
    he(this, be);
    he(this, W, !1);
    he(this, et);
    e.style !== void 0 && Ce(this, W, !0), Ce(this, H, {
      // set defaults
      zoomAdjust: -4,
      position: "top-right",
      // inherit map options
      ...t,
      // override any lingering control options
      forceNoAttributionControl: !0,
      attributionControl: !1,
      navigationControl: !1,
      geolocateControl: !1,
      maptilerLogo: !1,
      minimap: !1,
      hash: !1,
      pitchAdjust: !1,
      // override map options with new user defined minimap options
      ...e,
      containerStyle: {
        border: "1px solid #000",
        width: "400px",
        height: "300px",
        ...e.containerStyle ?? {}
      }
    }), e.lockZoom !== void 0 && (M(this, H).minZoom = e.lockZoom, M(this, H).maxZoom = e.lockZoom);
  }
  setStyle(e, t) {
    M(this, W) || this.map.setStyle(e, t), V(this, B, Y).call(this);
  }
  addLayer(e, t) {
    return M(this, W) || this.map.addLayer(e, t), V(this, B, Y).call(this), this.map;
  }
  moveLayer(e, t) {
    return M(this, W) || this.map.moveLayer(e, t), V(this, B, Y).call(this), this.map;
  }
  removeLayer(e) {
    return M(this, W) || this.map.removeLayer(e), V(this, B, Y).call(this), this;
  }
  setLayerZoomRange(e, t, n) {
    return M(this, W) || this.map.setLayerZoomRange(e, t, n), V(this, B, Y).call(this), this;
  }
  setFilter(e, t, n) {
    return M(this, W) || this.map.setFilter(e, t, n), V(this, B, Y).call(this), this;
  }
  setPaintProperty(e, t, n, a) {
    return M(this, W) || this.map.setPaintProperty(e, t, n, a), V(this, B, Y).call(this), this;
  }
  setLayoutProperty(e, t, n, a) {
    return M(this, W) || this.map.setLayoutProperty(e, t, n, a), V(this, B, Y).call(this), this;
  }
  setGlyphs(e, t) {
    return M(this, W) || this.map.setGlyphs(e, t), V(this, B, Y).call(this), this;
  }
  onAdd(e) {
    Ce(this, te, e), Ce(this, ve, ye("div", "maplibregl-ctrl maplibregl-ctrl-group"));
    for (const [t, n] of Object.entries(M(this, H).containerStyle))
      M(this, ve).style.setProperty(t, n);
    return M(this, H).container = M(this, ve), M(this, H).zoom = e.getZoom() + M(this, H).zoomAdjust, this.map = new il(M(this, H)), this.map.once("style.load", () => {
      this.map.resize();
    }), this.map.once("load", () => {
      V(this, B, ma).call(this, M(this, H).parentRect), Ce(this, et, V(this, B, ha).call(this));
    }), M(this, ve);
  }
  onRemove() {
    var e;
    (e = M(this, et)) == null || e.call(this), Fr(M(this, ve));
  }
}
H = new WeakMap(), te = new WeakMap(), ve = new WeakMap(), be = new WeakMap(), W = new WeakMap(), et = new WeakMap(), B = new WeakSet(), ma = function(e) {
  e === void 0 || e.linePaint === void 0 && e.fillPaint === void 0 || (Ce(this, be, {
    type: "Feature",
    properties: {
      name: "parentRect"
    },
    geometry: {
      type: "Polygon",
      coordinates: [[[], [], [], [], []]]
    }
  }), this.map.addSource("parentRect", {
    type: "geojson",
    data: M(this, be)
  }), (e.lineLayout !== void 0 || e.linePaint !== void 0) && this.map.addLayer({
    id: "parentRectOutline",
    type: "line",
    source: "parentRect",
    layout: {
      ...e.lineLayout
    },
    paint: {
      "line-color": "#FFF",
      "line-width": 1,
      "line-opacity": 0.85,
      ...e.linePaint
    }
  }), e.fillPaint !== void 0 && this.map.addLayer({
    id: "parentRectFill",
    type: "fill",
    source: "parentRect",
    layout: {},
    paint: {
      "fill-color": "#08F",
      "fill-opacity": 0.135,
      ...e.fillPaint
    }
  }), V(this, B, Y).call(this));
}, Y = function() {
  if (M(this, be) === void 0) return;
  const { devicePixelRatio: e } = window, t = M(this, te).getCanvas(), n = t.width / e, a = t.height / e, o = M(this, te).unproject.bind(M(this, te)), i = o([0, 0]), s = o([n, 0]), l = o([0, a]), u = o([n, a]);
  M(this, be).geometry.coordinates = [[l.toArray(), u.toArray(), s.toArray(), i.toArray(), l.toArray()]];
  const c = this.map.getSource("parentRect");
  c !== void 0 && c.setData(M(this, be));
}, ha = function() {
  const { pitchAdjust: e } = M(this, H), t = () => {
    i("parent");
  }, n = () => {
    i("minimap");
  }, a = () => {
    M(this, te).on("move", t), this.map.on("move", n);
  }, o = () => {
    M(this, te).off("move", t), this.map.off("move", n);
  }, i = (s) => {
    o();
    const l = s === "parent" ? M(this, te) : this.map, u = s === "parent" ? this.map : M(this, te), c = l.getCenter(), p = l.getZoom() + M(this, H).zoomAdjust * (s === "parent" ? 1 : -1), y = l.getBearing(), f = l.getPitch();
    u.jumpTo({
      center: c,
      zoom: p,
      bearing: y,
      pitch: e ? f : 0
    }), V(this, B, Y).call(this), a();
  };
  return a(), () => {
    o();
  };
};
class Ds {
  constructor() {
    L(this, "map");
    L(this, "container");
    L(this, "projectionButton");
  }
  onAdd(e) {
    return this.map = e, this.container = ye("div", "maplibregl-ctrl maplibregl-ctrl-group"), this.projectionButton = ye("button", "maplibregl-ctrl-projection", this.container), ye("span", "maplibregl-ctrl-icon", this.projectionButton).setAttribute("aria-hidden", "true"), this.projectionButton.type = "button", this.projectionButton.addEventListener("click", this.toggleProjection.bind(this)), e.on("projectiontransition", this.updateProjectionIcon.bind(this)), this.updateProjectionIcon(), this.container;
  }
  onRemove() {
    Fr(this.container), this.map.off("projectiontransition", this.updateProjectionIcon), this.map = void 0;
  }
  toggleProjection() {
    this.map.getProjection() === void 0 && this.map.setProjection({ type: "mercator" }), this.map.isGlobeProjection() ? this.map.enableMercatorProjection() : this.map.enableGlobeProjection(), this.updateProjectionIcon();
  }
  updateProjectionIcon() {
    this.projectionButton.classList.remove("maplibregl-ctrl-projection-globe"), this.projectionButton.classList.remove("maplibregl-ctrl-projection-mercator"), this.map.isGlobeProjection() ? (this.projectionButton.classList.add("maplibregl-ctrl-projection-mercator"), this.projectionButton.title = "Enable Mercator projection") : (this.projectionButton.classList.add("maplibregl-ctrl-projection-globe"), this.projectionButton.title = "Enable Globe projection");
  }
}
const qs = "@maptiler/sdk", Bs = "3.3.0", Us = "The Javascript & TypeScript map SDK tailored for MapTiler Cloud", Gs = "MapTiler", Vs = "dist/maptiler-sdk.mjs", Hs = "dist/maptiler-sdk.d.ts", Ks = "dist/maptiler-sdk.css", Ws = "module", Zs = { ".": { import: "./dist/maptiler-sdk.mjs", types: "./dist/maptiler-sdk.d.ts" }, "./dist/maptiler-sdk.css": { import: "./dist/maptiler-sdk.css" }, "./style.css": { import: "./dist/maptiler-sdk.css" } }, Js = ["maptiler", "map", "sdk", "webmap", "cloud", "webGL", "maplibre"], Ys = "https://docs.maptiler.com/sdk-js/", Xs = "BSD-3-Clause", Qs = { type: "git", url: "https://github.com/maptiler/maptiler-sdk-js.git" }, el = { prepare: "husky", doc: "rm -rf docs/* && typedoc --out docs && cp -r images docs/", ncu: "npx npm-check-updates", lint: "tsc --noEmit && eslint src", "lint:fix": "tsc --noEmit && eslint src --fix", "test:watch": "vitest watch -c vite.config-test.ts --dom", test: "vitest run -c vite.config-test.ts --dom", "install:clean": "rm -rf build/ dist/ node_modules/ && npm ci", dev: "npm run build-css && vite -c vite.config-dev.ts", "dev-umd": "npm run build-css && tsc && NODE_ENV=development vite build -w -c vite.config-umd.ts", "build-css": "mkdir -p dist build && node scripts/replace-path-with-content.js src/style/style_template.css dist/tmp_maptiler-sdk.css && cat node_modules/maplibre-gl/dist/maplibre-gl.css dist/tmp_maptiler-sdk.css > dist/maptiler-sdk.css && rm dist/tmp_maptiler-sdk.css && cp dist/maptiler-sdk.css build/maptiler-sdk.css", "build-umd": "tsc && NODE_ENV=production vite build -c vite.config-umd.ts", "build-es": "tsc && NODE_ENV=production vite build -c vite.config-es.ts", build: "npm run build-es; npm run build-umd; npm run build-css", make: "npm run install:clean && npm run build" }, tl = { "@canvas/image-data": "^1.0.0", "@eslint/js": "^9.21.0", "@types/stats.js": "^0.17.4", "@types/uuid": "^10.0.0", "@types/xmldom": "^0.1.31", "@vitest/web-worker": "^3.0.9", "@xmldom/xmldom": "^0.8.10", concurrently: "^9.1.2", eslint: "^9.21.0", "eslint-config-prettier": "^10.0.2", "eslint-plugin-prettier": "^5.2.3", "happy-dom": "^17.4.4", husky: "^8.0.0", jiti: "^2.4.2", "lint-staged": "^15.4.3", prettier: "3.5.2", "stats.js": "^0.17.0", typedoc: "^0.27.6", typescript: "^5.7.3", "typescript-eslint": "^8.25.0", vite: "^6.0.7", "vite-plugin-dts": "^4.5.0", vitest: "^3.0.9" }, rl = { "@maplibre/maplibre-gl-style-spec": "^23.0.0", "@maptiler/client": "^2.3.2", events: "^3.3.0", "js-base64": "^3.7.7", "maplibre-gl": "^5.5.0", uuid: "^11.0.5" }, nl = {
  name: qs,
  version: Bs,
  description: Us,
  author: Gs,
  module: Vs,
  types: Hs,
  style: Ks,
  type: Ws,
  exports: Zs,
  keywords: Js,
  homepage: Ys,
  license: Xs,
  repository: Qs,
  scripts: el,
  "lint-staged": { "*.ts": "npm run lint:fix" },
  devDependencies: tl,
  dependencies: rl
};
class al {
  /**
   *
   * @param map : a Map instance
   * @param delay : a delay in milliseconds after which the payload is sent to MapTiler cloud (cannot be less than 1000ms)
   */
  constructor(e, t = 2e3) {
    L(this, "map");
    L(this, "registeredModules", /* @__PURE__ */ new Set());
    this.map = e, setTimeout(
      async () => {
        if (!F.telemetry)
          return;
        const n = this.preparePayload();
        try {
          (await fetch(n, { method: "POST" })).ok || console.warn("The metrics could not be sent to MapTiler Cloud");
        } catch (a) {
          console.warn("The metrics could not be sent to MapTiler Cloud", a);
        }
      },
      Math.max(1e3, t)
    );
  }
  /**
   * Register a module to the telemetry system of the SDK.
   * The arguments `name` and `version` likely come from the package.json
   * of each module.
   */
  registerModule(e, t) {
    this.registeredModules.add(`${e}:${t}`);
  }
  preparePayload() {
    const e = new URL(G.telemetryURL);
    return e.searchParams.append("sdk", nl.version), e.searchParams.append("key", F.apiKey), e.searchParams.append("mtsid", gr), e.searchParams.append("session", F.session ? "1" : "0"), e.searchParams.append("caching", F.caching ? "1" : "0"), e.searchParams.append("lang-updated", this.map.isLanguageUpdated() ? "1" : "0"), e.searchParams.append("terrain", this.map.getTerrain() ? "1" : "0"), e.searchParams.append("globe", this.map.isGlobeProjection() ? "1" : "0"), this.registeredModules.size > 0 && e.searchParams.append("modules", Array.from(this.registeredModules).join("|")), e.href;
  }
}
const ol = {
  POINT: "POINT",
  COUNTRY: "COUNTRY"
};
let il = class ga extends S.Map {
  constructor(t) {
    so(t.container), t.apiKey && (F.apiKey = t.apiKey);
    const { style: n, requiresUrlMonitoring: a, isFallback: o } = Sn(t.style);
    o && console.warn(
      "Invalid style. A style must be a valid URL to a style.json, a JSON string representing a valid StyleSpecification or a valid StyleSpecification object. Fallback to default MapTiler style."
    ), F.apiKey || console.warn("MapTiler Cloud API key is not set. Visit https://maptiler.com and try Cloud for free!");
    const i = location.hash;
    let s = {
      compact: !1
    };
    t.customAttribution ? s.customAttribution = t.customAttribution : t.attributionControl && typeof t.attributionControl == "object" && (s = {
      ...s,
      ...t.attributionControl
    });
    const l = {
      ...t,
      style: n,
      maplibreLogo: !1,
      transformRequest: Yr(t.transformRequest),
      attributionControl: t.forceNoAttributionControl === !0 ? !1 : s
    };
    delete l.style;
    super(l);
    L(this, "options");
    L(this, "telemetry");
    L(this, "isTerrainEnabled", !1);
    L(this, "terrainExaggeration", 1);
    L(this, "primaryLanguage");
    L(this, "terrainGrowing", !1);
    L(this, "terrainFlattening", !1);
    L(this, "minimap");
    L(this, "forceLanguageUpdate");
    L(this, "languageAlwaysBeenStyle");
    L(this, "isReady", !1);
    L(this, "terrainAnimationDuration", 1e3);
    L(this, "monitoredStyleUrls");
    L(this, "styleInProcess", !1);
    L(this, "curentProjection");
    L(this, "originalLabelStyle", new window.Map());
    L(this, "isStyleLocalized", !1);
    L(this, "languageIsUpdated", !1);
    this.options = t, this.setStyle(n), a && this.monitorStyleUrl(n);
    const u = () => {
      let d = "The distant style could not be loaded.";
      this.getStyle() ? d += "Leaving the style as is." : (this.setStyle(Ge.STREETS), d += `Loading default MapTiler Cloud style "${Ge.STREETS.getDefaultVariant().getId()}" as a fallback.`), console.warn(d);
    };
    if (this.on("style.load", () => {
      this.styleInProcess = !1;
    }), this.on("error", (d) => {
      if (d.error instanceof S.AJAXError) {
        const v = d.error.url, w = new URL(v);
        w.search = "";
        const b = w.href;
        this.monitoredStyleUrls && this.monitoredStyleUrls.has(b) && (this.monitoredStyleUrls.delete(b), u());
        return;
      }
      if (this.styleInProcess) {
        u();
        return;
      }
    }), F.caching && !rr && console.warn("The cache API is only available in secure contexts. More info at https://developer.mozilla.org/en-US/docs/Web/API/Cache"), F.caching && rr && ro(), typeof t.language > "u")
      this.primaryLanguage = F.primaryLanguage;
    else {
      const d = Vr(t.language, _);
      this.primaryLanguage = d ?? F.primaryLanguage;
    }
    this.forceLanguageUpdate = !(this.primaryLanguage === _.STYLE || this.primaryLanguage === _.STYLE_LOCK), this.languageAlwaysBeenStyle = this.primaryLanguage === _.STYLE, this.terrainExaggeration = t.terrainExaggeration ?? this.terrainExaggeration, this.curentProjection = t.projection, this.on("styledata", () => {
      this.curentProjection === "mercator" ? this.setProjection({ type: "mercator" }) : this.curentProjection === "globe" && this.setProjection({ type: "globe" });
    }), this.once("styledata", async () => {
      if (!t.geolocate || t.center || t.hash && i)
        return;
      try {
        if (t.geolocate === ol.COUNTRY) {
          await this.fitToIpBounds();
          return;
        }
      } catch (v) {
        console.warn(v.message);
      }
      let d;
      try {
        await this.centerOnIpPoint(t.zoom), d = this.getCameraHash();
      } catch (v) {
        console.warn(v.message);
      }
      (await navigator.permissions.query({
        name: "geolocation"
      })).state === "granted" && navigator.geolocation.getCurrentPosition(
        // success callback
        (v) => {
          d === this.getCameraHash() && (this.terrain ? this.easeTo({
            center: [v.coords.longitude, v.coords.latitude],
            zoom: t.zoom || 12,
            duration: 2e3
          }) : this.once("terrain", () => {
            this.easeTo({
              center: [v.coords.longitude, v.coords.latitude],
              zoom: t.zoom || 12,
              duration: 2e3
            });
          }));
        },
        // error callback
        null,
        // options
        {
          maximumAge: 24 * 3600 * 1e3,
          // a day in millisec
          timeout: 5e3,
          // milliseconds
          enableHighAccuracy: !1
        }
      );
    }), this.on("styledata", () => {
      this.setPrimaryLanguage(this.primaryLanguage);
    }), this.on("styledata", () => {
      this.getTerrain() === null && this.isTerrainEnabled && this.enableTerrain(this.terrainExaggeration);
    }), this.once("load", async () => {
      let d = { logo: null };
      try {
        const m = Object.keys(this.style.sourceCaches).map((b) => this.getSource(b)).filter((b) => b && "url" in b && typeof b.url == "string" && b.url.includes("tiles.json")), v = new URL(m[0].url);
        v.searchParams.has("key") || v.searchParams.append("key", F.apiKey), d = await (await fetch(v.href)).json();
      } catch {
      }
      if (t.forceNoAttributionControl !== !0)
        if ("logo" in d && d.logo) {
          const m = d.logo;
          this.addControl(new Qr({ logoURL: m }), t.logoPosition);
        } else t.maptilerLogo && this.addControl(new Qr(), t.logoPosition);
      if (t.scaleControl) {
        const m = t.scaleControl === !0 || t.scaleControl === void 0 ? "bottom-right" : t.scaleControl, v = new bo({ unit: F.unit });
        this.addControl(v, m), F.on("unit", (w) => {
          v.setUnit(w);
        });
      }
      if (t.navigationControl !== !1) {
        const m = t.navigationControl === !0 || t.navigationControl === void 0 ? "top-right" : t.navigationControl;
        this.addControl(new Os(), m);
      }
      if (t.geolocateControl !== !1) {
        const m = t.geolocateControl === !0 || t.geolocateControl === void 0 ? "top-right" : t.geolocateControl;
        this.addControl(
          // new maplibregl.GeolocateControl({
          new Fs({
            positionOptions: {
              enableHighAccuracy: !0,
              maximumAge: 0,
              timeout: 6e3
            },
            fitBoundsOptions: {
              maxZoom: 15
            },
            trackUserLocation: !0,
            showAccuracyCircle: !0,
            showUserLocation: !0
          }),
          m
        );
      }
      if (t.terrainControl) {
        const m = t.terrainControl === !0 || t.terrainControl === void 0 ? "top-right" : t.terrainControl;
        this.addControl(new js(), m);
      }
      if (t.projectionControl) {
        const m = t.projectionControl === !0 || t.projectionControl === void 0 ? "top-right" : t.projectionControl;
        this.addControl(new Ds(), m);
      }
      if (t.fullscreenControl) {
        const m = t.fullscreenControl === !0 || t.fullscreenControl === void 0 ? "top-right" : t.fullscreenControl;
        this.addControl(new wo({}), m);
      }
      this.isReady = !0, this.fire("ready", { target: this });
    });
    let c = !1, p = !1, y;
    this.once("ready", () => {
      c = !0, p && this.fire("loadWithTerrain", y);
    }), this.once("style.load", () => {
      const { minimap: d } = t;
      if (typeof d == "object") {
        const {
          zoom: m,
          center: v,
          style: w,
          language: b,
          apiKey: T,
          maptilerLogo: j,
          canvasContextAttributes: $,
          refreshExpiredTiles: le,
          maxBounds: Le,
          scrollZoom: Ue,
          minZoom: it,
          maxZoom: st,
          boxZoom: _a,
          locale: za,
          fadeDuration: Pa,
          crossSourceCollisions: Ra,
          clickTolerance: $a,
          bounds: ja,
          fitBoundsOptions: Oa,
          pixelRatio: Na,
          validateStyle: Fa
        } = t;
        this.minimap = new Qt(d, {
          zoom: m,
          center: v,
          style: w,
          language: b,
          apiKey: T,
          container: "null",
          maptilerLogo: j,
          canvasContextAttributes: $,
          refreshExpiredTiles: le,
          maxBounds: Le,
          scrollZoom: Ue,
          minZoom: it,
          maxZoom: st,
          boxZoom: _a,
          locale: za,
          fadeDuration: Pa,
          crossSourceCollisions: Ra,
          clickTolerance: $a,
          bounds: ja,
          fitBoundsOptions: Oa,
          pixelRatio: Na,
          validateStyle: Fa
        }), this.addControl(this.minimap, d.position ?? "bottom-left");
      } else d === !0 ? (this.minimap = new Qt({}, t), this.addControl(this.minimap, "bottom-left")) : d !== void 0 && d !== !1 && (this.minimap = new Qt({}, t), this.addControl(this.minimap, d));
    });
    const f = (d) => {
      d.terrain && (p = !0, y = {
        type: "loadWithTerrain",
        target: this,
        terrain: d.terrain
      }, this.off("terrain", f), c && this.fire("loadWithTerrain", y));
    };
    this.on("terrain", f), t.terrain && this.enableTerrain(t.terrainExaggeration ?? this.terrainExaggeration), this.once("load", () => {
      this.getCanvas().addEventListener("webglcontextlost", (d) => {
        if (this._removed === !0) {
          console.warn("[webglcontextlost]", "WebGL context lost after map removal. This is harmless.");
          return;
        }
        console.warn("[webglcontextlost]", "Unexpected loss of WebGL context!"), this.fire("webglContextLost", d);
      });
    }), this.telemetry = new al(this);
  }
  /**
   * Recreates the map instance with the same options.
   * Useful for WebGL context loss.
   */
  recreate() {
    const t = {
      center: this.getCenter(),
      zoom: this.getZoom(),
      bearing: this.getBearing(),
      pitch: this.getPitch()
    };
    this.remove(), Object.assign(this, new ga({ ...this.options })), this.once("load", () => {
      this.jumpTo(t);
    });
  }
  /**
   * Set the duration (millisec) of the terrain animation for growing or flattening.
   * Must be positive. (Built-in default: `1000` milliseconds)
   */
  setTerrainAnimationDuration(t) {
    this.terrainAnimationDuration = Math.max(t, 0);
  }
  /**
   * Awaits for _this_ Map instance to be "loaded" and returns a Promise to the Map.
   * If _this_ Map instance is already loaded, the Promise is resolved directly,
   * otherwise, it is resolved as a result of the "load" event.
   * @returns
   */
  async onLoadAsync() {
    return new Promise((t) => {
      if (this.loaded()) {
        t(this);
        return;
      }
      this.once("load", () => {
        t(this);
      });
    });
  }
  /**
   * Awaits for _this_ Map instance to be "ready" and returns a Promise to the Map.
   * If _this_ Map instance is already ready, the Promise is resolved directly,
   * otherwise, it is resolved as a result of the "ready" event.
   * A map instance is "ready" when all the controls that can be managed by the contructor are
   * dealt with. This happens after the "load" event, due to the asynchronous nature
   * of some built-in controls.
   */
  async onReadyAsync() {
    return new Promise((t) => {
      if (this.isReady) {
        t(this);
        return;
      }
      this.once("ready", () => {
        t(this);
      });
    });
  }
  /**
   * Awaits for _this_ Map instance to be "loaded" as well as with terrain being non-null for the first time
   * and returns a Promise to the Map.
   * If _this_ Map instance is already loaded with terrain, the Promise is resolved directly,
   * otherwise, it is resolved as a result of the "loadWithTerrain" event.
   * @returns
   */
  async onLoadWithTerrainAsync() {
    return new Promise((t) => {
      if (this.isReady && this.terrain) {
        t(this);
        return;
      }
      this.once("loadWithTerrain", () => {
        t(this);
      });
    });
  }
  monitorStyleUrl(t) {
    typeof this.monitoredStyleUrls > "u" && (this.monitoredStyleUrls = /* @__PURE__ */ new Set());
    const n = new URL(t);
    n.search = "", this.monitoredStyleUrls.add(n.href);
  }
  /**
   * Update the style of the map.
   * Can be:
   * - a full style URL (possibly with API key)
   * - a shorthand with only the MapTIler style name (eg. `"streets-v2"`)
   * - a longer form with the prefix `"maptiler://"` (eg. `"maptiler://streets-v2"`)
   */
  setStyle(t, n) {
    var o;
    this.originalLabelStyle.clear(), (o = this.minimap) == null || o.setStyle(t), this.forceLanguageUpdate = !0, this.once("idle", () => {
      this.forceLanguageUpdate = !1;
    });
    const a = Sn(t);
    if (a.requiresUrlMonitoring && this.monitorStyleUrl(a.style), a.isFallback) {
      if (this.getStyle())
        return console.warn(
          "Invalid style. A style must be a valid URL to a style.json, a JSON string representing a valid StyleSpecification or a valid StyleSpecification object. Keeping the curent style instead."
        ), this;
      console.warn(
        "Invalid style. A style must be a valid URL to a style.json, a JSON string representing a valid StyleSpecification or a valid StyleSpecification object. Fallback to default MapTiler style."
      );
    }
    return this.styleInProcess = !0, super.setStyle(a.style, n), this;
  }
  /**
   * Adds a [MapLibre style layer](https://maplibre.org/maplibre-style-spec/layers)
   * to the map's style.
   *
   * A layer defines how data from a specified source will be styled. Read more about layer types
   * and available paint and layout properties in the [MapLibre Style Specification](https://maplibre.org/maplibre-style-spec/layers).
   *
   * @param layer - The layer to add,
   * conforming to either the MapLibre Style Specification's [layer definition](https://maplibre.org/maplibre-style-spec/layers) or,
   * less commonly, the {@link CustomLayerInterface} specification.
   * The MapLibre Style Specification's layer definition is appropriate for most layers.
   *
   * @param beforeId - The ID of an existing layer to insert the new layer before,
   * resulting in the new layer appearing visually beneath the existing layer.
   * If this argument is not specified, the layer will be appended to the end of the layers array
   * and appear visually above all other layers.
   *
   * @returns `this`
   */
  addLayer(t, n) {
    var a;
    return (a = this.minimap) == null || a.addLayer(t, n), super.addLayer(t, n);
  }
  /**
   * Moves a layer to a different z-position.
   *
   * @param id - The ID of the layer to move.
   * @param beforeId - The ID of an existing layer to insert the new layer before. When viewing the map, the `id` layer will appear beneath the `beforeId` layer. If `beforeId` is omitted, the layer will be appended to the end of the layers array and appear above all other layers on the map.
   * @returns `this`
   *
   * @example
   * Move a layer with ID 'polygon' before the layer with ID 'country-label'. The `polygon` layer will appear beneath the `country-label` layer on the map.
   * ```ts
   * map.moveLayer('polygon', 'country-label');
   * ```
   */
  moveLayer(t, n) {
    var a;
    return (a = this.minimap) == null || a.moveLayer(t, n), super.moveLayer(t, n);
  }
  /**
   * Removes the layer with the given ID from the map's style.
   *
   * An {@link ErrorEvent} will be fired if the image parameter is invald.
   *
   * @param id - The ID of the layer to remove
   * @returns `this`
   *
   * @example
   * If a layer with ID 'state-data' exists, remove it.
   * ```ts
   * if (map.getLayer('state-data')) map.removeLayer('state-data');
   * ```
   */
  removeLayer(t) {
    var n;
    return (n = this.minimap) == null || n.removeLayer(t), super.removeLayer(t);
  }
  /**
   * Sets the zoom extent for the specified style layer. The zoom extent includes the
   * [minimum zoom level](https://maplibre.org/maplibre-style-spec/layers/#minzoom)
   * and [maximum zoom level](https://maplibre.org/maplibre-style-spec/layers/#maxzoom))
   * at which the layer will be rendered.
   *
   * Note: For style layers using vector sources, style layers cannot be rendered at zoom levels lower than the
   * minimum zoom level of the _source layer_ because the data does not exist at those zoom levels. If the minimum
   * zoom level of the source layer is higher than the minimum zoom level defined in the style layer, the style
   * layer will not be rendered at all zoom levels in the zoom range.
   */
  setLayerZoomRange(t, n, a) {
    var o;
    return (o = this.minimap) == null || o.setLayerZoomRange(t, n, a), super.setLayerZoomRange(t, n, a);
  }
  /**
   * Sets the filter for the specified style layer.
   *
   * Filters control which features a style layer renders from its source.
   * Any feature for which the filter expression evaluates to `true` will be
   * rendered on the map. Those that are false will be hidden.
   *
   * Use `setFilter` to show a subset of your source data.
   *
   * To clear the filter, pass `null` or `undefined` as the second parameter.
   */
  setFilter(t, n, a) {
    var o;
    return (o = this.minimap) == null || o.setFilter(t, n, a), super.setFilter(t, n, a);
  }
  /**
   * Sets the value of a paint property in the specified style layer.
   *
   * @param layerId - The ID of the layer to set the paint property in.
   * @param name - The name of the paint property to set.
   * @param value - The value of the paint property to set.
   * Must be of a type appropriate for the property, as defined in the [MapLibre Style Specification](https://maplibre.org/maplibre-style-spec/).
   * @param options - Options object.
   * @returns `this`
   * @example
   * ```ts
   * map.setPaintProperty('my-layer', 'fill-color', '#faafee');
   * ```
   */
  setPaintProperty(t, n, a, o) {
    var i;
    return (i = this.minimap) == null || i.setPaintProperty(t, n, a, o), super.setPaintProperty(t, n, a, o);
  }
  /**
   * Sets the value of a layout property in the specified style layer.
   * Layout properties define how the layer is styled.
   * Layout properties for layers of the same type are documented together.
   * Layers of different types have different layout properties.
   * See the [MapLibre Style Specification](https://maplibre.org/maplibre-style-spec/) for the complete list of layout properties.
   * @param layerId - The ID of the layer to set the layout property in.
   * @param name - The name of the layout property to set.
   * @param value - The value of the layout property to set.
   * Must be of a type appropriate for the property, as defined in the [MapLibre Style Specification](https://maplibre.org/maplibre-style-spec/).
   * @param options - Options object.
   * @returns `this`
   */
  setLayoutProperty(t, n, a, o) {
    var i;
    return (i = this.minimap) == null || i.setLayoutProperty(t, n, a, o), super.setLayoutProperty(t, n, a, o);
  }
  /**
   * Sets the value of the style's glyphs property.
   *
   * @param glyphsUrl - Glyph URL to set. Must conform to the [MapLibre Style Specification](https://maplibre.org/maplibre-style-spec/glyphs/).
   * @param options - Options object.
   * @returns `this`
   * @example
   * ```ts
   * map.setGlyphs('https://demotiles.maplibre.org/font/{fontstack}/{range}.pbf');
   * ```
   */
  setGlyphs(t, n) {
    var a;
    return (a = this.minimap) == null || a.setGlyphs(t, n), super.setGlyphs(t, n);
  }
  getStyleLanguage() {
    return !this.style || !this.style.stylesheet || !this.style.stylesheet.metadata || typeof this.style.stylesheet.metadata != "object" ? null : "maptiler:language" in this.style.stylesheet.metadata && typeof this.style.stylesheet.metadata["maptiler:language"] == "string" ? Ha(this.style.stylesheet.metadata["maptiler:language"]) : null;
  }
  /**
   * Define the primary language of the map. Note that not all the languages shorthands provided are available.
   */
  setLanguage(t) {
    var n;
    (n = this.minimap) == null || n.map.setLanguage(t), this.onStyleReady(() => {
      this.setPrimaryLanguage(t);
    });
  }
  /**
   * Define the primary language of the map. Note that not all the languages shorthands provided are available.
   */
  setPrimaryLanguage(t) {
    const n = this.getStyleLanguage(), a = Vr(t, _);
    if (!a) {
      console.warn(`The language "${a}" is not supported.`);
      return;
    }
    if (!(a.flag === _.STYLE.flag && n && (n.flag === _.AUTO.flag || n.flag === _.VISITOR.flag)) && (a.flag !== _.STYLE.flag && (this.languageAlwaysBeenStyle = !1), this.languageAlwaysBeenStyle || this.primaryLanguage === a && !this.forceLanguageUpdate))
      return;
    if (this.primaryLanguage.flag === _.STYLE_LOCK.flag) {
      console.warn("The language cannot be changed because this map has been instantiated with the STYLE_LOCK language flag.");
      return;
    }
    this.primaryLanguage = a;
    let o = a;
    if (a.flag === _.STYLE.flag) {
      if (!n) {
        console.warn("The style has no default languages or has an invalid one.");
        return;
      }
      o = n;
    }
    let i = _.LOCAL.flag, s = ["get", i];
    o.flag === _.VISITOR.flag ? (i = Kr().flag, s = [
      "case",
      ["all", ["has", i], ["has", _.LOCAL.flag]],
      [
        "case",
        ["==", ["get", i], ["get", _.LOCAL.flag]],
        ["get", _.LOCAL.flag],
        ["format", ["get", i], { "font-scale": 0.8 }, `
`, ["get", _.LOCAL.flag], { "font-scale": 1.1 }]
      ],
      ["get", _.LOCAL.flag]
    ]) : o.flag === _.VISITOR_ENGLISH.flag ? (i = _.ENGLISH.flag, s = [
      "case",
      ["all", ["has", i], ["has", _.LOCAL.flag]],
      [
        "case",
        ["==", ["get", i], ["get", _.LOCAL.flag]],
        ["get", _.LOCAL.flag],
        ["format", ["get", i], { "font-scale": 0.8 }, `
`, ["get", _.LOCAL.flag], { "font-scale": 1.1 }]
      ],
      ["get", _.LOCAL.flag]
    ]) : o.flag === _.AUTO.flag ? (i = Kr().flag, s = ["coalesce", ["get", i], ["get", _.LOCAL.flag]]) : o === _.LOCAL ? (i = _.LOCAL.flag, s = ["get", i]) : (i = o.flag, s = ["coalesce", ["get", i], ["get", _.LOCAL.flag]]);
    const { layers: l } = this.getStyle(), u = this.originalLabelStyle.size === 0;
    if (u) {
      const c = mo(l, this);
      this.isStyleLocalized = Object.keys(c.localized).length > 0;
    }
    for (const c of l) {
      if (c.type !== "symbol")
        continue;
      const p = c, y = this.getSource(p.source);
      if (!y || !("url" in y && typeof y.url == "string") || new URL(y.url).host !== G.maptilerApiHost)
        continue;
      const { id: d, layout: m } = p;
      if (!m || !("text-field" in m))
        continue;
      let v;
      if (u ? (v = this.getLayoutProperty(d, "text-field"), this.originalLabelStyle.set(d, v)) : v = this.originalLabelStyle.get(d), typeof v == "string") {
        const { contains: w, exactMatch: b } = uo(v, this.isStyleLocalized);
        if (!w) continue;
        if (b)
          this.setLayoutProperty(d, "text-field", s);
        else {
          const T = co(v, s, this.isStyleLocalized);
          this.setLayoutProperty(d, "text-field", T);
        }
      } else {
        const w = lo(v, s, this.isStyleLocalized);
        this.setLayoutProperty(d, "text-field", w);
      }
    }
    this.languageIsUpdated = !0;
  }
  /**
   * Get the primary language
   * @returns
   */
  getPrimaryLanguage() {
    return this.primaryLanguage;
  }
  /**
   * Get the exaggeration factor applied to the terrain
   * @returns
   */
  getTerrainExaggeration() {
    return this.terrainExaggeration;
  }
  /**
   * Know if terrian is enabled or not
   * @returns
   */
  hasTerrain() {
    return this.isTerrainEnabled;
  }
  growTerrain(t) {
    if (!this.terrain)
      return;
    const n = performance.now(), a = this.terrain.exaggeration, o = t - a, i = () => {
      if (!this.terrain || this.terrainFlattening)
        return;
      const s = (performance.now() - n) / this.terrainAnimationDuration;
      if (s < 0.99) {
        const l = 1 - (1 - s) ** 4, u = a + l * o;
        this.terrain.exaggeration = u, requestAnimationFrame(i);
      } else
        this.terrainGrowing = !1, this.terrainFlattening = !1, this.terrain.exaggeration = t, this.fire("terrainAnimationStop", { terrain: this.terrain });
      this._elevationFreeze = !1, this.triggerRepaint();
    };
    !this.terrainGrowing && !this.terrainFlattening && this.fire("terrainAnimationStart", { terrain: this.terrain }), this.terrainGrowing = !0, this.terrainFlattening = !1, requestAnimationFrame(i);
  }
  /**
   * Enables the 3D terrain visualization
   */
  enableTerrain(t = this.terrainExaggeration) {
    if (t < 0) {
      console.warn("Terrain exaggeration cannot be negative.");
      return;
    }
    const n = (o) => {
      !this.terrain || o.type !== "data" || o.dataType !== "source" || !("source" in o) || o.sourceId !== "maptiler-terrain" || o.source.type !== "raster-dem" || o.isSourceLoaded && (this.off("data", n), this.growTerrain(t));
    }, a = () => {
      this.isTerrainEnabled = !0, this.terrainExaggeration = t, this.on("data", n), this.addSource(G.terrainSourceId, {
        type: "raster-dem",
        url: G.terrainSourceURL
      }), this.setTerrain({
        source: G.terrainSourceId,
        exaggeration: 0
      });
    };
    if (this.getTerrain()) {
      this.isTerrainEnabled = !0, this.growTerrain(t);
      return;
    }
    this.loaded() || this.isTerrainEnabled ? a() : this.once("load", () => {
      this.getTerrain() && this.getSource(G.terrainSourceId) || a();
    });
  }
  /**
   * Disable the 3D terrain visualization
   */
  disableTerrain() {
    if (!this.terrain)
      return;
    this.isTerrainEnabled = !1;
    const t = performance.now(), n = this.terrain.exaggeration, a = () => {
      if (!this.terrain || this.terrainGrowing)
        return;
      const o = (performance.now() - t) / this.terrainAnimationDuration;
      if (this._elevationFreeze = !1, o < 0.99) {
        const i = (1 - o) ** 4, s = n * i;
        this.terrain.exaggeration = s, requestAnimationFrame(a);
      } else
        this.terrain.exaggeration = 0, this.terrainGrowing = !1, this.terrainFlattening = !1, this.setTerrain(), this.getSource(G.terrainSourceId) && this.removeSource(G.terrainSourceId), this.fire("terrainAnimationStop", { terrain: null });
      this.triggerRepaint();
    };
    !this.terrainGrowing && !this.terrainFlattening && this.fire("terrainAnimationStart", { terrain: this.terrain }), this.terrainGrowing = !1, this.terrainFlattening = !0, requestAnimationFrame(a);
  }
  /**
   * Sets the 3D terrain exageration factor.
   * If the terrain was not enabled prior to the call of this method,
   * the method `.enableTerrain()` will be called.
   * If `animate` is `true`, the terrain transformation will be animated in the span of 1 second.
   * If `animate` is `false`, no animated transition to the newly defined exaggeration.
   */
  setTerrainExaggeration(t, n = !0) {
    !n && this.terrain ? (this.terrainExaggeration = t, this.terrain.exaggeration = t, this.triggerRepaint()) : this.enableTerrain(t);
  }
  /**
   * Perform an action when the style is ready. It could be at the moment of calling this method
   * or later.
   */
  onStyleReady(t) {
    this.isStyleLoaded() ? t() : this.once("styledata", () => {
      t();
    });
  }
  async fitToIpBounds() {
    const t = await Hr.info();
    this.fitBounds(t.country_bounds, {
      duration: 0,
      padding: 100
    });
  }
  async centerOnIpPoint(t) {
    const n = await Hr.info();
    this.jumpTo({
      center: [n.longitude ?? 0, n.latitude ?? 0],
      zoom: t || 11
    });
  }
  getCameraHash() {
    const t = new Float32Array(5), n = this.getCenter();
    return t[0] = n.lng, t[1] = n.lat, t[2] = this.getZoom(), t[3] = this.getPitch(), t[4] = this.getBearing(), Za.fromUint8Array(new Uint8Array(t.buffer));
  }
  /**
   * Get the SDK config object.
   * This is convenient to dispatch the SDK configuration to externally built layers
   * that do not directly have access to the SDK configuration but do have access to a Map instance.
   */
  getSdkConfig() {
    return F;
  }
  /**
   * Get the MapTiler session ID. Convenient to dispatch to externaly built component
   * that do not directly have access to the SDK configuration but do have access to a Map instance.
   * @returns
   */
  getMaptilerSessionId() {
    return gr;
  }
  /**
   *  Updates the requestManager's transform request with a new function.
   *
   * @param transformRequest A callback run before the Map makes a request for an external URL. The callback can be used to modify the url, set headers, or set the credentials property for cross-origin requests.
   *    Expected to return an object with a `url` property and optionally `headers` and `credentials` properties
   *
   * @returns {Map} `this`
   *
   *  @example
   *  map.setTransformRequest((url: string, resourceType: string) => {});
   */
  setTransformRequest(t) {
    return super.setTransformRequest(Yr(t)), this;
  }
  /**
   * Returns whether a globe projection is currently being used
   */
  isGlobeProjection() {
    const t = this.getProjection();
    return t ? t.type === "globe" : !1;
  }
  /**
   * Activate the globe projection.
   */
  enableGlobeProjection() {
    this.isGlobeProjection() !== !0 && (this.setProjection({ type: "globe" }), this.curentProjection = "globe");
  }
  /**
   * Activate the mercator projection.
   */
  enableMercatorProjection() {
    this.isGlobeProjection() !== !1 && (this.setProjection({ type: "mercator" }), this.curentProjection = "mercator");
  }
  /**
   * Returns `true` is the language was ever updated, meaning changed
   * from what is delivered in the style.
   * Returns `false` if language in use is the language from the style
   * and has never been changed.
   */
  isLanguageUpdated() {
    return this.languageIsUpdated;
  }
};
function Dr(r) {
  if (typeof DOMParser < "u") {
    const e = new DOMParser().parseFromString(r, "application/xml");
    if (e.querySelector("parsererror"))
      throw new Error("The provided string is not valid XML");
    return e;
  }
  throw new Error("No XML parser found");
}
function va(r, e) {
  if (!r.hasChildNodes())
    return !1;
  for (const t of Array.from(r.childNodes)) {
    const n = t.nodeName;
    if (typeof n == "string" && n.trim().toLowerCase() === e.toLowerCase())
      return !0;
  }
  return !1;
}
function Ln(r) {
  if (typeof XMLSerializer < "u")
    return new XMLSerializer().serializeToString(r);
  throw new Error("No XML serializer found");
}
function ba(r) {
  const e = typeof r == "string" ? Dr(r) : r;
  if (!va(e, "gpx"))
    throw new Error("The XML document is not valid GPX");
  const t = U(e, "trk"), n = U(e, "rte"), a = U(e, "wpt"), o = {
    type: "FeatureCollection",
    features: []
  };
  for (const i of Array.from(t)) {
    const s = cl(i);
    s && o.features.push(s);
  }
  for (const i of Array.from(n)) {
    const s = pl(i);
    s && o.features.push(s);
  }
  for (const i of Array.from(a))
    o.features.push(fl(i));
  return o;
}
function wa(r, e) {
  let t = r;
  if (typeof t == "string" && (t = Dr(t)), !va(t, "kml"))
    throw new Error("The XML document is not valid KML");
  const n = {
    type: "FeatureCollection",
    features: []
  }, a = {}, o = {}, i = {}, s = U(t, "Placemark"), l = U(t, "Style"), u = U(t, "StyleMap");
  for (const c of Array.from(l)) {
    const p = An(e !== void 0 ? e(c) : Ln(c)).toString(16);
    a[`#${ze(c, "id")}`] = p, o[p] = c;
  }
  for (const c of Array.from(u)) {
    a[`#${ze(c, "id")}`] = An(e !== void 0 ? e(c) : Ln(c)).toString(16);
    const p = U(c, "Pair"), y = {};
    for (const f of Array.from(p))
      y[R(k(f, "key")) ?? ""] = R(k(f, "styleUrl"));
    i[`#${ze(c, "id")}`] = y;
  }
  for (const c of Array.from(s))
    n.features = n.features.concat(ul(c, a, o, i));
  return n;
}
function Cn(r) {
  if (r === null) return ["#000000", 1];
  let e = "", t = 1, n = r;
  return n.startsWith("#") && (n = n.substring(1)), (n.length === 6 || n.length === 3) && (e = n), n.length === 8 && (t = Number.parseInt(n.substring(0, 2), 16) / 255, e = `#${n.substring(6, 8)}${n.substring(4, 6)}${n.substring(2, 4)}`), [e ?? "#000000", t ?? 1];
}
function sl(r) {
  return ka(r.split(" "));
}
function ll(r) {
  let e = U(r, "coord");
  const t = [], n = [];
  e.length === 0 && (e = U(r, "gx:coord"));
  for (const o of Array.from(e))
    t.push(sl(R(o) ?? ""));
  const a = U(r, "when");
  for (const o of Array.from(a)) n.push(R(o));
  return {
    coords: t,
    times: n
  };
}
function dt(r) {
  const e = ["Polygon", "LineString", "Point", "Track", "gx:Track"];
  let t, n, a, o, i;
  const s = [], l = [];
  if (k(r, "MultiGeometry") !== null)
    return dt(k(r, "MultiGeometry"));
  if (k(r, "MultiTrack") !== null)
    return dt(k(r, "MultiTrack"));
  if (k(r, "gx:MultiTrack") !== null)
    return dt(k(r, "gx:MultiTrack"));
  for (a = 0; a < e.length; a++)
    if (n = U(r, e[a]), n) {
      for (o = 0; o < n.length; o++)
        if (t = n[o], e[a] === "Point")
          s.push({
            type: "Point",
            coordinates: La(R(k(t, "coordinates")) ?? "")
          });
        else if (e[a] === "LineString")
          s.push({
            type: "LineString",
            coordinates: In(R(k(t, "coordinates")) ?? "")
          });
        else if (e[a] === "Polygon") {
          const u = U(t, "LinearRing"), c = [];
          for (i = 0; i < u.length; i++)
            c.push(In(R(k(u[i], "coordinates")) ?? ""));
          s.push({
            type: "Polygon",
            coordinates: c
          });
        } else if (e[a] === "Track" || e[a] === "gx:Track") {
          const u = ll(t);
          s.push({
            type: "LineString",
            coordinates: u.coords
          }), u.times.length && l.push(u.times);
        }
    }
  return { geoms: s, coordTimes: l };
}
function ul(r, e, t, n) {
  const a = dt(r), o = {}, i = R(k(r, "name")), s = R(k(r, "address")), l = R(k(r, "description")), u = k(r, "TimeSpan"), c = k(r, "TimeStamp"), p = k(r, "ExtendedData"), y = k(r, "visibility");
  let f, d = R(k(r, "styleUrl")), m = k(r, "LineStyle"), v = k(r, "PolyStyle");
  if (!a.geoms.length) return [];
  if (i && (o.name = i), s && (o.address = s), d) {
    d.startsWith("#") || (d = `#${d}`), o.styleUrl = d, e[d] && (o.styleHash = e[d]), n[d] && (o.styleMapHash = n[d], o.styleHash = e[n[d].normal ?? ""]);
    const b = t[o.styleHash ?? ""];
    if (b) {
      m || (m = k(b, "LineStyle")), v || (v = k(b, "PolyStyle"));
      const T = k(b, "IconStyle");
      if (T) {
        const j = k(T, "Icon");
        if (j) {
          const $ = R(k(j, "href"));
          $ && (o.icon = $);
        }
      }
    }
  }
  if (l && (o.description = l), u) {
    const b = R(k(u, "begin")), T = R(k(u, "end"));
    b && T && (o.timespan = { begin: b, end: T });
  }
  if (c !== null && (o.timestamp = R(k(c, "when")) ?? (/* @__PURE__ */ new Date()).toISOString()), m !== null) {
    const b = Cn(R(k(m, "color"))), T = b[0], j = b[1], $ = Number.parseFloat(R(k(m, "width")) ?? "");
    T && (o.stroke = T), Number.isNaN(j) || (o["stroke-opacity"] = j), Number.isNaN($) || (o["stroke-width"] = $);
  }
  if (v) {
    const b = Cn(R(k(v, "color"))), T = b[0], j = b[1], $ = R(k(v, "fill")), le = R(k(v, "outline"));
    T && (o.fill = T), Number.isNaN(j) || (o["fill-opacity"] = j), $ && (o["fill-opacity"] = $ === "1" ? o["fill-opacity"] || 1 : 0), le && (o["stroke-opacity"] = le === "1" ? o["stroke-opacity"] || 1 : 0);
  }
  if (p) {
    const b = U(p, "Data"), T = U(p, "SimpleData");
    for (f = 0; f < b.length; f++)
      o[b[f].getAttribute("name") ?? ""] = R(k(b[f], "value")) ?? "";
    for (f = 0; f < T.length; f++)
      o[T[f].getAttribute("name") ?? ""] = R(T[f]) ?? "";
  }
  y !== null && (o.visibility = R(y) ?? ""), a.coordTimes.length !== 0 && (o.coordTimes = a.coordTimes.length === 1 ? a.coordTimes[0] : a.coordTimes);
  const w = {
    type: "Feature",
    geometry: a.geoms.length === 1 ? a.geoms[0] : {
      type: "GeometryCollection",
      geometries: a.geoms
    },
    properties: o
  };
  return ze(r, "id") && (w.id = ze(r, "id") ?? void 0), [w];
}
function Sa(r, e) {
  const t = U(r, e), n = [], a = [];
  let o = [];
  const i = t.length;
  if (!(i < 2)) {
    for (let s = 0; s < i; s++) {
      const l = Ca(t[s]);
      n.push(l.coordinates), l.time && a.push(l.time), (l.heartRate || o.length) && (o.length === 0 && (o = new Array(s).fill(null)), o.push(l.heartRate));
    }
    return {
      line: n,
      times: a,
      heartRates: o
    };
  }
}
function cl(r) {
  const e = U(r, "trkseg"), t = [], n = [], a = [];
  let o;
  for (let s = 0; s < e.length; s++)
    if (o = Sa(e[s], "trkpt"), o !== void 0 && (o.line && t.push(o.line), o.times && o.times.length && n.push(o.times), a.length || o.heartRates && o.heartRates.length)) {
      if (!a.length)
        for (let l = 0; l < s; l++)
          a.push(new Array(t[l].length).fill(null));
      o.heartRates && o.heartRates.length ? a.push(o.heartRates) : a.push(new Array(o.line.length).fill(null));
    }
  if (t.length === 0) return;
  const i = {
    ...qr(r),
    ...xa(k(r, "extensions"))
  };
  return n.length !== 0 && (i.coordTimes = t.length === 1 ? n[0] : n), a.length !== 0 && (i.heartRates = t.length === 1 ? a[0] : a), t.length === 1 ? {
    type: "Feature",
    properties: i,
    geometry: {
      type: "LineString",
      coordinates: t[0]
    }
  } : {
    type: "Feature",
    properties: i,
    geometry: {
      type: "MultiLineString",
      coordinates: t
    }
  };
}
function pl(r) {
  const e = Sa(r, "rtept");
  return e === void 0 ? void 0 : {
    type: "Feature",
    properties: {
      ...qr(r),
      ...xa(k(r, "extensions"))
    },
    geometry: {
      type: "LineString",
      coordinates: e.line
    }
  };
}
function fl(r) {
  return {
    type: "Feature",
    properties: { ...qr(r), ...pr(r, ["sym"]) },
    geometry: {
      type: "Point",
      coordinates: Ca(r).coordinates
    }
  };
}
function xa(r) {
  const e = {};
  if (r) {
    const t = k(r, "line");
    if (t) {
      const n = R(k(t, "color")), a = Number.parseFloat(R(k(t, "opacity")) ?? "0"), o = Number.parseFloat(R(k(t, "width")) ?? "0");
      n && (e.stroke = n), Number.isNaN(a) || (e["stroke-opacity"] = a), Number.isNaN(o) || (e["stroke-width"] = o * 96 / 25.4);
    }
  }
  return e;
}
function qr(r) {
  const e = pr(r, ["name", "cmt", "desc", "type", "time", "keywords"]), t = U(r, "link");
  if (t.length !== 0) {
    e.links = [];
    for (const n of Array.from(t)) {
      const a = {
        href: ze(n, "href"),
        ...pr(n, ["text", "type"])
      };
      e.links.push(a);
    }
  }
  return e;
}
function An(r) {
  let e = 0;
  if (!r || !r.length) return e;
  for (let t = 0; t < r.length; t++)
    e = (e << 5) - e + r.charCodeAt(t) | 0;
  return e;
}
function U(r, e) {
  return r.getElementsByTagName(e);
}
function ze(r, e) {
  return r.getAttribute(e);
}
function Tn(r, e) {
  return Number.parseFloat(ze(r, e) ?? "0");
}
function k(r, e) {
  const t = U(r, e);
  return t.length ? t[0] : null;
}
function dl(r) {
  return r.normalize && r.normalize(), r;
}
function ka(r) {
  return r.map(Number.parseFloat).map((e) => Number.isNaN(e) ? null : e);
}
function R(r) {
  return r && dl(r), r && r.textContent;
}
function pr(r, e) {
  const t = {};
  let n, a;
  for (a = 0; a < e.length; a++)
    n = k(r, e[a]), n && (t[e[a]] = R(n) ?? "");
  return t;
}
function La(r) {
  return ka(r.replace(/\s*/g, "").split(","));
}
function In(r) {
  const e = r.replace(/^\s*|\s*$/g, "").split(/\s+/), t = [];
  for (const n of e) t.push(La(n));
  return t;
}
function Ca(r) {
  const e = [Tn(r, "lon"), Tn(r, "lat")], t = k(r, "ele"), n = k(r, "gpxtpx:hr") || k(r, "hr"), a = k(r, "time");
  let o;
  return t && (o = Number.parseFloat(R(t) ?? "0"), Number.isNaN(o) || e.push(o)), {
    coordinates: e,
    time: a ? R(a) : null,
    heartRate: n !== null ? Number.parseFloat(R(n) ?? "0") : null
  };
}
function yl(r) {
  let e = r;
  try {
    typeof e == "string" && (e = Dr(e));
  } catch {
    return null;
  }
  try {
    return ba(e);
  } catch {
  }
  try {
    return wa(e);
  } catch {
  }
  return null;
}
async function ml(r, e = {}) {
  const t = e.download ?? !1, n = await hl(r);
  if (t) {
    const a = e.filename ?? "maptiler_screenshot.png", o = document.createElement("a");
    o.style.display = "none", document.body.appendChild(o), o.href = URL.createObjectURL(n), o.download = a, o.click(), setTimeout(() => {
      document.body.removeChild(o), URL.revokeObjectURL(o.href);
    }, 0);
  }
  return n;
}
function hl(r) {
  return new Promise((e, t) => {
    r.redraw(), r.once("idle", () => {
      r.getCanvas().toBlob((n) => {
        if (!n) {
          t(Error("Screenshot could not be created."));
          return;
        }
        e(n);
      }, "image/png");
    });
  });
}
const fr = [
  // https://colorhunt.co/palette/1d5b79468b97ef6262f3aa60
  ["#1D5B79", "#468B97", "#EF6262", "#F3AA60"],
  // https://colorhunt.co/palette/614bc333bbc585e6c5c8ffe0
  ["#614BC3", "#33BBC5", "#85E6C5", "#C8FFE0"],
  // https://colorhunt.co/palette/4619597a316fcd6688aed8cc
  ["#461959", "#7A316F", "#CD6688", "#AED8CC"],
  // https://colorhunt.co/palette/0079ff00dfa2f6fa70ff0060
  ["#0079FF", "#00DFA2", "#F6FA70", "#FF0060"],
  //https://colorhunt.co/palette/39b5e0a31acbff78f0f5ea5a
  ["#39B5E0", "#A31ACB", "#FF78F0", "#F5EA5A"],
  // https://colorhunt.co/palette/37e2d5590696c70a80fbcb0a
  ["#37E2D5", "#590696", "#C70A80", "#FBCB0A"],
  // https://colorhunt.co/palette/ffd36efff56d99ffcd9fb4ff
  ["#FFD36E", "#FFF56D", "#99FFCD", "#9FB4FF"],
  // https://colorhunt.co/palette/00ead3fff5b7ff449f005f99
  ["#00EAD3", "#FFF5B7", "#FF449F", "#005F99"],
  // https://colorhunt.co/palette/10a19d540375ff7000ffbf00
  ["#10A19D", "#540375", "#FF7000", "#FFBF00"]
];
function Dt() {
  return fr[~~(Math.random() * fr.length)][~~(Math.random() * 4)];
}
function at() {
  return `maptiler_source_${Mn()}`;
}
function ot() {
  return `maptiler_layer_${Mn()}`;
}
function dr(r, e) {
  if (e <= r[0].zoom)
    return r[0].value;
  if (e >= r[r.length - 1].zoom)
    return r[r.length - 1].value;
  for (let t = 0; t < r.length - 1; t += 1)
    if (e >= r[t].zoom && e < r[t + 1].zoom) {
      const n = r[t + 1].zoom - r[t].zoom, a = (e - r[t].zoom) / n;
      return a * r[t + 1].value + (1 - a) * r[t].value;
    }
  return 0;
}
function xe(r) {
  return ["interpolate", ["linear"], ["zoom"], ...r.flatMap((e) => [e.zoom, e.value])];
}
function z(r) {
  return ["interpolate", ["linear"], ["zoom"], ...r.flatMap((e) => [e.zoom, e.value])];
}
function Aa(r, e) {
  if (typeof e == "number" && typeof r == "number")
    return 2 * e + r;
  if (typeof e == "number" && Array.isArray(r))
    return ["interpolate", ["linear"], ["zoom"], ...r.flatMap((t) => [t.zoom, 2 * e + t.value])];
  if (typeof r == "number" && Array.isArray(e))
    return ["interpolate", ["linear"], ["zoom"], ...e.flatMap((t) => [t.zoom, 2 * t.value + r])];
  if (Array.isArray(r) && Array.isArray(e)) {
    const t = Array.from(/* @__PURE__ */ new Set([...r.map((n) => n.zoom), ...e.map((n) => n.zoom)])).sort((n, a) => n < a ? -1 : 1);
    return ["interpolate", ["linear"], ["zoom"], ...t.flatMap((n) => [n, 2 * dr(e, n) + dr(r, n)])];
  }
  return 0;
}
function Ta(r, e) {
  return ["interpolate", ["linear"], ["get", e], ...r.flatMap((t) => [t.propertyValue, t.value])];
}
function Br(r) {
  const e = r.trimStart(), t = `${e}${" ".repeat(r.length - e.length)}`, n = Array.from(t);
  if (!n.every((s) => s === " " || s === "_"))
    throw new Error("A dash pattern must be composed only of whitespace and underscore characters.");
  if (!(n.some((s) => s === "_") && n.some((s) => s === " ")))
    throw new Error("A dash pattern must contain at least one underscore and one whitespace character");
  const i = [1];
  for (let s = 1; s < n.length; s += 1) {
    const l = n[s - 1], u = n[s];
    l === u ? i[i.length - 1] += 1 : i.push(1);
  }
  return i;
}
function yr(r, e) {
  return ["interpolate", ["linear"], ["get", e], ...r.flatMap((t) => [t.value, t.color])];
}
function mr(r, e, t = !0) {
  return t ? [
    "interpolate",
    ["linear"],
    ["zoom"],
    0,
    ["interpolate", ["linear"], ["get", e], ...r.flatMap((n) => [n.value, n.pointRadius * 0.025])],
    2,
    ["interpolate", ["linear"], ["get", e], ...r.flatMap((n) => [n.value, n.pointRadius * 0.05])],
    4,
    ["interpolate", ["linear"], ["get", e], ...r.flatMap((n) => [n.value, n.pointRadius * 0.1])],
    8,
    ["interpolate", ["linear"], ["get", e], ...r.flatMap((n) => [n.value, n.pointRadius * 0.25])],
    16,
    ["interpolate", ["linear"], ["get", e], ...r.flatMap((n) => [n.value, n.pointRadius])]
  ] : ["interpolate", ["linear"], ["get", e], ...r.flatMap((n) => [n.value, n.pointRadius])];
}
function Ia(r, e, t = !0) {
  return t ? [
    "interpolate",
    ["linear"],
    ["zoom"],
    0,
    ["interpolate", ["linear"], ["get", e], ...r.flatMap((n) => [n.propertyValue, n.value * 0.025])],
    2,
    ["interpolate", ["linear"], ["get", e], ...r.flatMap((n) => [n.propertyValue, n.value * 0.05])],
    4,
    ["interpolate", ["linear"], ["get", e], ...r.flatMap((n) => [n.propertyValue, n.value * 0.1])],
    8,
    ["interpolate", ["linear"], ["get", e], ...r.flatMap((n) => [n.propertyValue, n.value * 0.25])],
    16,
    ["interpolate", ["linear"], ["get", e], ...r.flatMap((n) => [n.propertyValue, n.value])]
  ] : ["interpolate", ["linear"], ["get", e], ...r.flatMap((n) => [n.propertyValue, n.value])];
}
function hr(r, e) {
  return r.every((t) => t.color[3] === r[0].color[3]) ? r[0].color[3] ? r[0].color[3] / 255 : 1 : [
    "interpolate",
    ["linear"],
    ["get", e],
    ...r.getRawColorStops().flatMap((t) => {
      const n = t.value, a = t.color;
      return [n, a.length === 4 ? a[3] / 255 : 1];
    })
  ];
}
function Ea(r, e = 10) {
  return [
    "interpolate",
    ["linear"],
    ["heatmap-density"],
    ...Array.from({ length: e + 1 }, (t, n) => {
      const a = n / e;
      return [a, r.getColorHex(a)];
    }).flat()
  ];
}
function pt(r) {
  const e = r.toString(16);
  return e.length === 1 ? `0${e}` : e;
}
function gl(r) {
  return `#${pt(r[0])}${pt(r[1])}${pt(r[2])}${r.length === 4 ? pt(r[3]) : ""}`;
}
class x extends Array {
  constructor(t = {}) {
    super();
    L(this, "min", 0);
    L(this, "max", 1);
    "min" in t && (this.min = t.min), "max" in t && (this.max = t.max), "stops" in t && this.setStops(t.stops, { clone: !1 });
  }
  /**
   * Converts a array-definition color ramp definition into a usable ColorRamp instance.
   * Note: units are not converted and may need to to be converted beforehand (eg. kelvin to centigrade)
   * @param cr
   * @returns
   */
  static fromArrayDefinition(t) {
    return new x({
      stops: t.map((n) => ({
        value: n[0],
        color: n[1]
      }))
    });
  }
  setStops(t, n = { clone: !0 }) {
    const a = n.clone ? this.clone() : this;
    a.length = 0;
    let o = Number.POSITIVE_INFINITY, i = Number.NEGATIVE_INFINITY;
    for (let s = 0; s < t.length; s += 1)
      o = Math.min(o, t[s].value), i = Math.max(i, t[s].value), a.push({
        value: t[s].value,
        color: t[s].color.slice()
        // we want to make sure we do a deep copy and not a reference
      });
    return a.sort((s, l) => s.value < l.value ? -1 : 1), this.min = o, this.max = i, a;
  }
  scale(t, n, a = { clone: !0 }) {
    const o = a.clone, i = this[0].value, l = this.at(-1).value - i, u = n - t, c = [];
    for (let p = 0; p < this.length; p += 1) {
      const d = (this[p].value - i) / l * u + t;
      o ? c.push({
        value: d,
        color: this[p].color.slice()
      }) : this[p].value = d;
    }
    return o ? new x({ stops: c }) : this;
  }
  // for some reason, I had to reimplement this
  at(t) {
    return t < 0 ? this[this.length + t] : this[t];
  }
  clone() {
    return new x({ stops: this.getRawColorStops() });
  }
  getRawColorStops() {
    const t = [];
    for (let n = 0; n < this.length; n += 1)
      t.push({ value: this[n].value, color: this[n].color });
    return t;
  }
  reverse(t = { clone: !0 }) {
    const n = t.clone ? this.clone() : this;
    for (let a = 0; a < ~~(n.length / 2); a += 1) {
      const o = n[a].color;
      n[a].color = n.at(-(a + 1)).color, n.at(-(a + 1)).color = o;
    }
    return n;
  }
  getBounds() {
    return { min: this.min, max: this.max };
  }
  getColor(t, n = { smooth: !0 }) {
    if (t <= this[0].value)
      return this[0].color;
    if (t >= this.at(-1).value)
      return this.at(-1).color;
    for (let a = 0; a < this.length - 1; a += 1) {
      if (t > this[a + 1].value)
        continue;
      const o = this[a].color;
      if (!n.smooth)
        return o.slice();
      const i = this[a].value, s = this[a + 1].value, l = this[a + 1].color, u = (s - t) / (s - i);
      return o.map((c, p) => Math.round(c * u + l[p] * (1 - u)));
    }
    return [0, 0, 0];
  }
  /**
   * Get the color as an hexadecimal string
   */
  getColorHex(t, n = {
    smooth: !0,
    withAlpha: !1
  }) {
    return gl(this.getColor(t, n));
  }
  /**
   * Get the color of the color ramp at a relative position in [0, 1]
   */
  getColorRelative(t, n = { smooth: !0 }) {
    const a = this.getBounds();
    return this.getColor(a.min + t * (a.max - a.min), n);
  }
  getCanvasStrip(t = {
    horizontal: !0,
    size: 512,
    smooth: !0
  }) {
    const n = document.createElement("canvas");
    n.width = t.horizontal ? t.size : 1, n.height = t.horizontal ? 1 : t.size;
    const a = n.getContext("2d");
    if (!a) throw new Error("Canvs context is missing");
    const o = a.getImageData(0, 0, n.width, n.height), i = o.data, s = t.size, l = this[0].value, p = (this.at(-1).value - l) / s;
    for (let y = 0; y < s; y += 1) {
      const f = this.getColor(l + y * p, {
        smooth: t.smooth
      });
      i[y * 4] = f[0], i[y * 4 + 1] = f[1], i[y * 4 + 2] = f[2], i[y * 4 + 3] = f.length > 3 ? f[3] : 255;
    }
    return a.putImageData(o, 0, 0), n;
  }
  /**
   * Apply a non-linear ressampling. This will create a new instance of ColorRamp with the same bounds.
   */
  resample(t, n = 15) {
    const a = this.getBounds(), o = this.scale(0, 1), i = 1 / (n - 1);
    let s;
    if (t === "ease-in-square")
      s = Array.from({ length: n }, (c, p) => {
        const y = p * i, f = y ** 2, d = o.getColor(f);
        return { value: y, color: d };
      });
    else if (t === "ease-out-square")
      s = Array.from({ length: n }, (c, p) => {
        const y = p * i, f = 1 - (1 - y) ** 2, d = o.getColor(f);
        return { value: y, color: d };
      });
    else if (t === "ease-out-sqrt")
      s = Array.from({ length: n }, (c, p) => {
        const y = p * i, f = y ** 0.5, d = o.getColor(f);
        return { value: y, color: d };
      });
    else if (t === "ease-in-sqrt")
      s = Array.from({ length: n }, (c, p) => {
        const y = p * i, f = 1 - (1 - y) ** 0.5, d = o.getColor(f);
        return { value: y, color: d };
      });
    else if (t === "ease-out-exp")
      s = Array.from({ length: n }, (c, p) => {
        const y = p * i, f = 1 - 2 ** (-10 * y), d = o.getColor(f);
        return { value: y, color: d };
      });
    else if (t === "ease-in-exp")
      s = Array.from({ length: n }, (c, p) => {
        const y = p * i, f = 2 ** (10 * y - 10), d = o.getColor(f);
        return { value: y, color: d };
      });
    else
      throw new Error("Invalid ressampling method.");
    return new x({ stops: s }).scale(a.min, a.max);
  }
  /**
   * Makes a clone of this color ramp that is fully transparant at the begining of their range
   */
  transparentStart() {
    const t = this.getRawColorStops();
    t.unshift({
      value: t[0].value,
      color: t[0].color.slice()
    }), t[1].value += 1e-3;
    for (const n of t)
      n.color.length === 3 && n.color.push(255);
    return t[0].color[3] = 0, new x({ stops: t });
  }
  /**
   * Check if this color ramp has a transparent start
   */
  hasTransparentStart() {
    return this[0].color.length === 4 && this[0].color[3] === 0;
  }
}
const Ma = {
  /**
   * A fully transparent [0, 0, 0, 0] colorramp to hide data.
   * Defined in interval [0, 1], without unit.
   */
  NULL: new x({
    stops: [
      { value: 0, color: [0, 0, 0, 0] },
      { value: 1, color: [0, 0, 0, 0] }
    ]
  }),
  GRAY: new x({
    stops: [
      { value: 0, color: [0, 0, 0] },
      { value: 1, color: [255, 255, 255] }
    ]
  }),
  /**
   * Classic jet color ramp.
   * Defined in interval [0, 1], without unit.
   */
  JET: new x({
    stops: [
      { value: 0, color: [0, 0, 131] },
      { value: 0.125, color: [0, 60, 170] },
      { value: 0.375, color: [5, 255, 255] },
      { value: 0.625, color: [255, 255, 0] },
      { value: 0.875, color: [250, 0, 0] },
      { value: 1, color: [128, 0, 0] }
    ]
  }),
  /**
   * Classic HSV color ramp (hue, saturation, value).
   * Defined in interval [0, 1], without unit.
   */
  HSV: new x({
    stops: [
      { value: 0, color: [255, 0, 0] },
      { value: 0.169, color: [253, 255, 2] },
      { value: 0.173, color: [247, 255, 2] },
      { value: 0.337, color: [0, 252, 4] },
      { value: 0.341, color: [0, 252, 10] },
      { value: 0.506, color: [1, 249, 255] },
      { value: 0.671, color: [2, 0, 253] },
      { value: 0.675, color: [8, 0, 253] },
      { value: 0.839, color: [255, 0, 251] },
      { value: 0.843, color: [255, 0, 245] },
      { value: 1, color: [255, 0, 6] }
    ]
  }),
  /**
   * Classic hot color ramp.
   * Defined in interval [0, 1], without unit.
   */
  HOT: new x({
    stops: [
      { value: 0, color: [0, 0, 0] },
      { value: 0.3, color: [230, 0, 0] },
      { value: 0.6, color: [255, 210, 0] },
      { value: 1, color: [255, 255, 255] }
    ]
  }),
  /**
   * Classic spring color ramp.
   * Defined in interval [0, 1], without unit.
   */
  SPRING: new x({
    stops: [
      { value: 0, color: [255, 0, 255] },
      { value: 1, color: [255, 255, 0] }
    ]
  }),
  /**
   * Classic summer color ramp.
   * Defined in interval [0, 1], without unit.
   */
  SUMMER: new x({
    stops: [
      { value: 0, color: [0, 128, 102] },
      { value: 1, color: [255, 255, 102] }
    ]
  }),
  /**
   * Classic autommn color ramp.
   * Defined in interval [0, 1], without unit.
   */
  AUTOMN: new x({
    stops: [
      { value: 0, color: [255, 0, 0] },
      { value: 1, color: [255, 255, 0] }
    ]
  }),
  /**
   * Classic winter color ramp.
   * Defined in interval [0, 1], without unit.
   */
  WINTER: new x({
    stops: [
      { value: 0, color: [0, 0, 255] },
      { value: 1, color: [0, 255, 128] }
    ]
  }),
  /**
   * Classic bone color ramp.
   * Defined in interval [0, 1], without unit.
   */
  BONE: new x({
    stops: [
      { value: 0, color: [0, 0, 0] },
      { value: 0.376, color: [84, 84, 116] },
      { value: 0.753, color: [169, 200, 200] },
      { value: 1, color: [255, 255, 255] }
    ]
  }),
  /**
   * Classic copper color ramp.
   * Defined in interval [0, 1], without unit.
   */
  COPPER: new x({
    stops: [
      { value: 0, color: [0, 0, 0] },
      { value: 0.804, color: [255, 160, 102] },
      { value: 1, color: [255, 199, 127] }
    ]
  }),
  /**
   * Classic greys color ramp.
   * Defined in interval [0, 1], without unit.
   */
  GREYS: new x({
    stops: [
      { value: 0, color: [0, 0, 0] },
      { value: 1, color: [255, 255, 255] }
    ]
  }),
  /**
   * Classic yignbu color ramp (blue to light yellow).
   * Defined in interval [0, 1], without unit.
   */
  YIGNBU: new x({
    stops: [
      { value: 0, color: [8, 29, 88] },
      { value: 0.125, color: [37, 52, 148] },
      { value: 0.25, color: [34, 94, 168] },
      { value: 0.375, color: [29, 145, 192] },
      { value: 0.5, color: [65, 182, 196] },
      { value: 0.625, color: [127, 205, 187] },
      { value: 0.75, color: [199, 233, 180] },
      { value: 0.875, color: [237, 248, 217] },
      { value: 1, color: [255, 255, 217] }
    ]
  }),
  /**
   * Classic greens color ramp.
   * Defined in interval [0, 1], without unit.
   */
  GREENS: new x({
    stops: [
      { value: 0, color: [0, 68, 27] },
      { value: 0.125, color: [0, 109, 44] },
      { value: 0.25, color: [35, 139, 69] },
      { value: 0.375, color: [65, 171, 93] },
      { value: 0.5, color: [116, 196, 118] },
      { value: 0.625, color: [161, 217, 155] },
      { value: 0.75, color: [199, 233, 192] },
      { value: 0.875, color: [229, 245, 224] },
      { value: 1, color: [247, 252, 245] }
    ]
  }),
  /**
   * Classic yiorrd color ramp (red to light yellow).
   * Defined in interval [0, 1], without unit.
   */
  YIORRD: new x({
    stops: [
      { value: 0, color: [128, 0, 38] },
      { value: 0.125, color: [189, 0, 38] },
      { value: 0.25, color: [227, 26, 28] },
      { value: 0.375, color: [252, 78, 42] },
      { value: 0.5, color: [253, 141, 60] },
      { value: 0.625, color: [254, 178, 76] },
      { value: 0.75, color: [254, 217, 118] },
      { value: 0.875, color: [255, 237, 160] },
      { value: 1, color: [255, 255, 204] }
    ]
  }),
  /**
   * Classic blue-red color ramp.
   * Defined in interval [0, 1], without unit.
   */
  BLUERED: new x({
    stops: [
      { value: 0, color: [0, 0, 255] },
      { value: 1, color: [255, 0, 0] }
    ]
  }),
  /**
   * Classic rdbu color ramp.
   * Defined in interval [0, 1], without unit.
   */
  RDBU: new x({
    stops: [
      { value: 0, color: [5, 10, 172] },
      { value: 0.35, color: [106, 137, 247] },
      { value: 0.5, color: [190, 190, 190] },
      { value: 0.6, color: [220, 170, 132] },
      { value: 0.7, color: [230, 145, 90] },
      { value: 1, color: [178, 10, 28] }
    ]
  }),
  /**
   * Classic picnic color ramp.
   * Defined in interval [0, 1], without unit.
   */
  PICNIC: new x({
    stops: [
      { value: 0, color: [0, 0, 255] },
      { value: 0.1, color: [51, 153, 255] },
      { value: 0.2, color: [102, 204, 255] },
      { value: 0.3, color: [153, 204, 255] },
      { value: 0.4, color: [204, 204, 255] },
      { value: 0.5, color: [255, 255, 255] },
      { value: 0.6, color: [255, 204, 255] },
      { value: 0.7, color: [255, 153, 255] },
      { value: 0.8, color: [255, 102, 204] },
      { value: 0.9, color: [255, 102, 102] },
      { value: 1, color: [255, 0, 0] }
    ]
  }),
  /**
   * Classic rainbow color ramp.
   * Defined in interval [0, 1], without unit.
   */
  RAINBOW: new x({
    stops: [
      { value: 0, color: [150, 0, 90] },
      { value: 0.125, color: [0, 0, 200] },
      { value: 0.25, color: [0, 25, 255] },
      { value: 0.375, color: [0, 152, 255] },
      { value: 0.5, color: [44, 255, 150] },
      { value: 0.625, color: [151, 255, 0] },
      { value: 0.75, color: [255, 234, 0] },
      { value: 0.875, color: [255, 111, 0] },
      { value: 1, color: [255, 0, 0] }
    ]
  }),
  /**
   * Classic Portland color ramp.
   * Defined in interval [0, 1], without unit.
   */
  PORTLAND: new x({
    stops: [
      { value: 0, color: [12, 51, 131] },
      { value: 0.25, color: [10, 136, 186] },
      { value: 0.5, color: [242, 211, 56] },
      { value: 0.75, color: [242, 143, 56] },
      { value: 1, color: [217, 30, 30] }
    ]
  }),
  /**
   * Classic blackbody color ramp.
   * Defined in interval [0, 1], without unit.
   */
  BLACKBODY: new x({
    stops: [
      { value: 0, color: [0, 0, 0] },
      { value: 0.2, color: [230, 0, 0] },
      { value: 0.4, color: [230, 210, 0] },
      { value: 0.7, color: [255, 255, 255] },
      { value: 1, color: [160, 200, 255] }
    ]
  }),
  /**
   * Classic earth color ramp.
   * Defined in interval [0, 1], without unit.
   */
  EARTH: new x({
    stops: [
      { value: 0, color: [0, 0, 130] },
      { value: 0.1, color: [0, 180, 180] },
      { value: 0.2, color: [40, 210, 40] },
      { value: 0.4, color: [230, 230, 50] },
      { value: 0.6, color: [120, 70, 20] },
      { value: 1, color: [255, 255, 255] }
    ]
  }),
  /**
   * Classic electric color ramp.
   * Defined in interval [0, 1], without unit.
   */
  ELECTRIC: new x({
    stops: [
      { value: 0, color: [0, 0, 0] },
      { value: 0.15, color: [30, 0, 100] },
      { value: 0.4, color: [120, 0, 100] },
      { value: 0.6, color: [160, 90, 0] },
      { value: 0.8, color: [230, 200, 0] },
      { value: 1, color: [255, 250, 220] }
    ]
  }),
  /**
   * Classic viridis color ramp.
   * Defined in interval [0, 1], without unit.
   */
  VIRIDIS: new x({
    stops: [
      { value: 0, color: [68, 1, 84] },
      { value: 0.13, color: [71, 44, 122] },
      { value: 0.25, color: [59, 81, 139] },
      { value: 0.38, color: [44, 113, 142] },
      { value: 0.5, color: [33, 144, 141] },
      { value: 0.63, color: [39, 173, 129] },
      { value: 0.75, color: [92, 200, 99] },
      { value: 0.88, color: [170, 220, 50] },
      { value: 1, color: [253, 231, 37] }
    ]
  }),
  /**
   * Classic inferno color ramp.
   * Defined in interval [0, 1], without unit.
   */
  INFERNO: new x({
    stops: [
      { value: 0, color: [0, 0, 4] },
      { value: 0.13, color: [31, 12, 72] },
      { value: 0.25, color: [85, 15, 109] },
      { value: 0.38, color: [136, 34, 106] },
      { value: 0.5, color: [186, 54, 85] },
      { value: 0.63, color: [227, 89, 51] },
      { value: 0.75, color: [249, 140, 10] },
      { value: 0.88, color: [249, 201, 50] },
      { value: 1, color: [252, 255, 164] }
    ]
  }),
  /**
   * Classic magma color ramp.
   * Defined in interval [0, 1], without unit.
   */
  MAGMA: new x({
    stops: [
      { value: 0, color: [0, 0, 4] },
      { value: 0.13, color: [28, 16, 68] },
      { value: 0.25, color: [79, 18, 123] },
      { value: 0.38, color: [129, 37, 129] },
      { value: 0.5, color: [181, 54, 122] },
      { value: 0.63, color: [229, 80, 100] },
      { value: 0.75, color: [251, 135, 97] },
      { value: 0.88, color: [254, 194, 135] },
      { value: 1, color: [252, 253, 191] }
    ]
  }),
  /**
   * Classic plasma color ramp.
   * Defined in interval [0, 1], without unit.
   */
  PLASMA: new x({
    stops: [
      { value: 0, color: [13, 8, 135] },
      { value: 0.13, color: [75, 3, 161] },
      { value: 0.25, color: [125, 3, 168] },
      { value: 0.38, color: [168, 34, 150] },
      { value: 0.5, color: [203, 70, 121] },
      { value: 0.63, color: [229, 107, 93] },
      { value: 0.75, color: [248, 148, 65] },
      { value: 0.88, color: [253, 195, 40] },
      { value: 1, color: [240, 249, 33] }
    ]
  }),
  /**
   * Classic warm color ramp.
   * Defined in interval [0, 1], without unit.
   */
  WARM: new x({
    stops: [
      { value: 0, color: [125, 0, 179] },
      { value: 0.13, color: [172, 0, 187] },
      { value: 0.25, color: [219, 0, 170] },
      { value: 0.38, color: [255, 0, 130] },
      { value: 0.5, color: [255, 63, 74] },
      { value: 0.63, color: [255, 123, 0] },
      { value: 0.75, color: [234, 176, 0] },
      { value: 0.88, color: [190, 228, 0] },
      { value: 1, color: [147, 255, 0] }
    ]
  }),
  /**
   * Classic cool color ramp.
   * Defined in interval [0, 1], without unit.
   */
  COOL: new x({
    stops: [
      { value: 0, color: [125, 0, 179] },
      { value: 0.13, color: [116, 0, 218] },
      { value: 0.25, color: [98, 74, 237] },
      { value: 0.38, color: [68, 146, 231] },
      { value: 0.5, color: [0, 204, 197] },
      { value: 0.63, color: [0, 247, 146] },
      { value: 0.75, color: [0, 255, 88] },
      { value: 0.88, color: [40, 255, 8] },
      { value: 1, color: [147, 255, 0] }
    ]
  }),
  /**
   * Classic rainboz soft color ramp.
   * Defined in interval [0, 1], without unit.
   */
  RAINBOW_SOFT: new x({
    stops: [
      { value: 0, color: [125, 0, 179] },
      { value: 0.1, color: [199, 0, 180] },
      { value: 0.2, color: [255, 0, 121] },
      { value: 0.3, color: [255, 108, 0] },
      { value: 0.4, color: [222, 194, 0] },
      { value: 0.5, color: [150, 255, 0] },
      { value: 0.6, color: [0, 255, 55] },
      { value: 0.7, color: [0, 246, 150] },
      { value: 0.8, color: [50, 167, 222] },
      { value: 0.9, color: [103, 51, 235] },
      { value: 1, color: [124, 0, 186] }
    ]
  }),
  /**
   * Classic bathymetry color ramp.
   * Defined in interval [0, 1], without unit.
   */
  BATHYMETRY: new x({
    stops: [
      { value: 0, color: [40, 26, 44] },
      { value: 0.13, color: [59, 49, 90] },
      { value: 0.25, color: [64, 76, 139] },
      { value: 0.38, color: [63, 110, 151] },
      { value: 0.5, color: [72, 142, 158] },
      { value: 0.63, color: [85, 174, 163] },
      { value: 0.75, color: [120, 206, 163] },
      { value: 0.88, color: [187, 230, 172] },
      { value: 1, color: [253, 254, 204] }
    ]
  }),
  /**
   * Classic cdom color ramp.
   * Defined in interval [0, 1], without unit.
   */
  CDOM: new x({
    stops: [
      { value: 0, color: [47, 15, 62] },
      { value: 0.13, color: [87, 23, 86] },
      { value: 0.25, color: [130, 28, 99] },
      { value: 0.38, color: [171, 41, 96] },
      { value: 0.5, color: [206, 67, 86] },
      { value: 0.63, color: [230, 106, 84] },
      { value: 0.75, color: [242, 149, 103] },
      { value: 0.88, color: [249, 193, 135] },
      { value: 1, color: [254, 237, 176] }
    ]
  }),
  /**
   * Classic chlorophyll color ramp.
   * Defined in interval [0, 1], without unit.
   */
  CHLOROPHYLL: new x({
    stops: [
      { value: 0, color: [18, 36, 20] },
      { value: 0.13, color: [25, 63, 41] },
      { value: 0.25, color: [24, 91, 59] },
      { value: 0.38, color: [13, 119, 72] },
      { value: 0.5, color: [18, 148, 80] },
      { value: 0.63, color: [80, 173, 89] },
      { value: 0.75, color: [132, 196, 122] },
      { value: 0.88, color: [175, 221, 162] },
      { value: 1, color: [215, 249, 208] }
    ]
  }),
  /**
   * Classic density color ramp.
   * Defined in interval [0, 1], without unit.
   */
  DENSITY: new x({
    stops: [
      { value: 0, color: [54, 14, 36] },
      { value: 0.13, color: [89, 23, 80] },
      { value: 0.25, color: [110, 45, 132] },
      { value: 0.38, color: [120, 77, 178] },
      { value: 0.5, color: [120, 113, 213] },
      { value: 0.63, color: [115, 151, 228] },
      { value: 0.75, color: [134, 185, 227] },
      { value: 0.88, color: [177, 214, 227] },
      { value: 1, color: [230, 241, 241] }
    ]
  }),
  /**
   * Classic freesurface blue color ramp.
   * Defined in interval [0, 1], without unit.
   */
  FREESURFACE_BLUE: new x({
    stops: [
      { value: 0, color: [30, 4, 110] },
      { value: 0.13, color: [47, 14, 176] },
      { value: 0.25, color: [41, 45, 236] },
      { value: 0.38, color: [25, 99, 212] },
      { value: 0.5, color: [68, 131, 200] },
      { value: 0.63, color: [114, 156, 197] },
      { value: 0.75, color: [157, 181, 203] },
      { value: 0.88, color: [200, 208, 216] },
      { value: 1, color: [241, 237, 236] }
    ]
  }),
  /**
   * Classic freesurface red color ramp.
   * Defined in interval [0, 1], without unit.
   */
  FREESURFACE_RED: new x({
    stops: [
      { value: 0, color: [60, 9, 18] },
      { value: 0.13, color: [100, 17, 27] },
      { value: 0.25, color: [142, 20, 29] },
      { value: 0.38, color: [177, 43, 27] },
      { value: 0.5, color: [192, 87, 63] },
      { value: 0.63, color: [205, 125, 105] },
      { value: 0.75, color: [216, 162, 148] },
      { value: 0.88, color: [227, 199, 193] },
      { value: 1, color: [241, 237, 236] }
    ]
  }),
  /**
   * Classic oxygen color ramp.
   * Defined in interval [0, 1], without unit.
   */
  OXYGEN: new x({
    stops: [
      { value: 0, color: [64, 5, 5] },
      { value: 0.13, color: [106, 6, 15] },
      { value: 0.25, color: [144, 26, 7] },
      { value: 0.38, color: [168, 64, 3] },
      { value: 0.5, color: [188, 100, 4] },
      { value: 0.63, color: [206, 136, 11] },
      { value: 0.75, color: [220, 174, 25] },
      { value: 0.88, color: [231, 215, 44] },
      { value: 1, color: [248, 254, 105] }
    ]
  }),
  /**
   * Classic par color ramp.
   * Defined in interval [0, 1], without unit.
   */
  PAR: new x({
    stops: [
      { value: 0, color: [51, 20, 24] },
      { value: 0.13, color: [90, 32, 35] },
      { value: 0.25, color: [129, 44, 34] },
      { value: 0.38, color: [159, 68, 25] },
      { value: 0.5, color: [182, 99, 19] },
      { value: 0.63, color: [199, 134, 22] },
      { value: 0.75, color: [212, 171, 35] },
      { value: 0.88, color: [221, 210, 54] },
      { value: 1, color: [225, 253, 75] }
    ]
  }),
  /**
   * Classic phase color ramp.
   * Defined in interval [0, 1], without unit.
   */
  PHASE: new x({
    stops: [
      { value: 0, color: [145, 105, 18] },
      { value: 0.13, color: [184, 71, 38] },
      { value: 0.25, color: [186, 58, 115] },
      { value: 0.38, color: [160, 71, 185] },
      { value: 0.5, color: [110, 97, 218] },
      { value: 0.63, color: [50, 123, 164] },
      { value: 0.75, color: [31, 131, 110] },
      { value: 0.88, color: [77, 129, 34] },
      { value: 1, color: [145, 105, 18] }
    ]
  }),
  /**
   * Classic salinity color ramp.
   * Defined in interval [0, 1], without unit.
   */
  SALINITY: new x({
    stops: [
      { value: 0, color: [42, 24, 108] },
      { value: 0.13, color: [33, 50, 162] },
      { value: 0.25, color: [15, 90, 145] },
      { value: 0.38, color: [40, 118, 137] },
      { value: 0.5, color: [59, 146, 135] },
      { value: 0.63, color: [79, 175, 126] },
      { value: 0.75, color: [120, 203, 104] },
      { value: 0.88, color: [193, 221, 100] },
      { value: 1, color: [253, 239, 154] }
    ]
  }),
  /**
   * Classic temperature color ramp.
   * Defined in interval [0, 1], without unit.
   */
  TEMPERATURE: new x({
    stops: [
      { value: 0, color: [4, 35, 51] },
      { value: 0.13, color: [23, 51, 122] },
      { value: 0.25, color: [85, 59, 157] },
      { value: 0.38, color: [129, 79, 143] },
      { value: 0.5, color: [175, 95, 130] },
      { value: 0.63, color: [222, 112, 101] },
      { value: 0.75, color: [249, 146, 66] },
      { value: 0.88, color: [249, 196, 65] },
      { value: 1, color: [232, 250, 91] }
    ]
  }),
  /**
   * Classic turbidity color ramp.
   * Defined in interval [0, 1], without unit.
   */
  TURBIDITY: new x({
    stops: [
      { value: 0, color: [34, 31, 27] },
      { value: 0.13, color: [65, 50, 41] },
      { value: 0.25, color: [98, 69, 52] },
      { value: 0.38, color: [131, 89, 57] },
      { value: 0.5, color: [161, 112, 59] },
      { value: 0.63, color: [185, 140, 66] },
      { value: 0.75, color: [202, 174, 88] },
      { value: 0.88, color: [216, 209, 126] },
      { value: 1, color: [233, 246, 171] }
    ]
  }),
  /**
   * Classic velocity blue color ramp.
   * Defined in interval [0, 1], without unit.
   */
  VELOCITY_BLUE: new x({
    stops: [
      { value: 0, color: [17, 32, 64] },
      { value: 0.13, color: [35, 52, 116] },
      { value: 0.25, color: [29, 81, 156] },
      { value: 0.38, color: [31, 113, 162] },
      { value: 0.5, color: [50, 144, 169] },
      { value: 0.63, color: [87, 173, 176] },
      { value: 0.75, color: [149, 196, 189] },
      { value: 0.88, color: [203, 221, 211] },
      { value: 1, color: [254, 251, 230] }
    ]
  }),
  /**
   * Classic velocity green color ramp.
   * Defined in interval [0, 1], without unit.
   */
  VELOCITY_GREEN: new x({
    stops: [
      { value: 0, color: [23, 35, 19] },
      { value: 0.13, color: [24, 64, 38] },
      { value: 0.25, color: [11, 95, 45] },
      { value: 0.38, color: [39, 123, 35] },
      { value: 0.5, color: [95, 146, 12] },
      { value: 0.63, color: [152, 165, 18] },
      { value: 0.75, color: [201, 186, 69] },
      { value: 0.88, color: [233, 216, 137] },
      { value: 1, color: [255, 253, 205] }
    ]
  }),
  /**
   * Classic cube helix color ramp.
   * Defined in interval [0, 1], without unit.
   */
  CUBEHELIX: new x({
    stops: [
      { value: 0, color: [0, 0, 0] },
      { value: 0.07, color: [22, 5, 59] },
      { value: 0.13, color: [60, 4, 105] },
      { value: 0.2, color: [109, 1, 135] },
      { value: 0.27, color: [161, 0, 147] },
      { value: 0.33, color: [210, 2, 142] },
      { value: 0.4, color: [251, 11, 123] },
      { value: 0.47, color: [255, 29, 97] },
      { value: 0.53, color: [255, 54, 69] },
      { value: 0.6, color: [255, 85, 46] },
      { value: 0.67, color: [255, 120, 34] },
      { value: 0.73, color: [255, 157, 37] },
      { value: 0.8, color: [241, 191, 57] },
      { value: 0.87, color: [224, 220, 93] },
      { value: 0.93, color: [218, 241, 142] },
      { value: 1, color: [227, 253, 198] }
    ]
  }),
  /**
   * The cividis color ramp is color blind friendly.
   * Read more here https://journals.plos.org/plosone/article?id=10.1371/journal.pone.0199239
   * Defined in interval [0, 1], without unit.
   */
  CIVIDIS: new x({
    stops: [
      { value: 0, color: [0, 32, 77, 255] },
      { value: 0.125, color: [5, 54, 110, 255] },
      { value: 0.25, color: [65, 77, 108, 255] },
      { value: 0.375, color: [97, 100, 111, 255] },
      { value: 0.5, color: [125, 124, 121, 255] },
      { value: 0.625, color: [156, 149, 120, 255] },
      { value: 0.75, color: [190, 175, 111, 255] },
      { value: 0.875, color: [225, 204, 94, 255] },
      { value: 1, color: [255, 235, 70, 255] }
    ]
  }),
  /**
   * Classic turbo color ramp.
   * This is a luminance-constant alternative to the jet, making it more
   * clor-blind friendly.
   * Defined in interval [0, 1], without unit.
   */
  TURBO: new x({
    stops: [
      { value: 0, color: [48, 18, 59, 255] },
      { value: 0.125, color: [70, 107, 227, 255] },
      { value: 0.25, color: [40, 187, 236, 255] },
      { value: 0.375, color: [49, 242, 153, 255] },
      { value: 0.5, color: [162, 252, 60, 255] },
      { value: 0.625, color: [237, 208, 58, 255] },
      { value: 0.75, color: [251, 128, 34, 255] },
      { value: 0.875, color: [210, 49, 5, 255] },
      { value: 1, color: [122, 4, 3, 255] }
    ]
  }),
  /**
   * The rocket color ramp is perceptually uniform, which makes it more
   * color bliend friendly than the classic magma color ramp.
   * Defined in interval [0, 1], without unit.
   */
  ROCKET: new x({
    stops: [
      { value: 0, color: [250, 235, 221, 0] },
      { value: 0.133, color: [250, 235, 221, 255] },
      { value: 0.266, color: [246, 170, 130, 255] },
      { value: 0.4, color: [240, 96, 67, 255] },
      { value: 0.533, color: [203, 27, 79, 255] },
      { value: 0.666, color: [132, 30, 90, 255] },
      { value: 0.8, color: [63, 27, 68, 255] },
      { value: 1, color: [3, 5, 26, 255] }
    ]
  }),
  /**
   * The mako color ramp is perceptually uniform and can be seen as
   * a color blind friendly alternative to bathymetry or yignbu.
   * Defined in interval [0, 1], without unit.
   */
  MAKO: new x({
    stops: [
      { value: 0, color: [11, 4, 5, 255] },
      { value: 0.125, color: [43, 28, 53, 255] },
      { value: 0.25, color: [62, 53, 107, 255] },
      { value: 0.375, color: [59, 86, 152, 255] },
      { value: 0.5, color: [53, 123, 162, 255] },
      { value: 0.625, color: [53, 158, 170, 255] },
      { value: 0.75, color: [73, 193, 173, 255] },
      { value: 0.875, color: [150, 221, 181, 255] },
      { value: 1, color: [222, 245, 229, 255] }
    ]
  })
};
async function vl(r, e, t = {}) {
  var a, o;
  if (!e.sourceId && !e.data)
    throw new Error("Creating a polyline layer requires an existing .sourceId or a valid .data property");
  let n = e.data;
  if (typeof n == "string") {
    if (kt(n))
      n = `https://api.maptiler.com/data/${e.data}/features.json?key=${F.apiKey}`;
    else if (((a = n.split(".").pop()) == null ? void 0 : a.toLowerCase().trim()) === "gpx") {
      const s = await (await fetch(n, t)).text();
      n = ba(s);
    } else if (((o = n.split(".").pop()) == null ? void 0 : o.toLowerCase().trim()) === "kml") {
      const s = await (await fetch(n, t)).text();
      n = wa(s);
    } else {
      const i = oo(n) ?? yl(n);
      i && (n = i);
    }
    if (!n)
      throw new Error("Polyline data was provided as string but is incompatible with valid formats.");
  }
  return bl(r, {
    ...e,
    data: n
  });
}
function bl(r, e) {
  if (e.layerId && r.getLayer(e.layerId))
    throw new Error(`A layer already exists with the layer id: ${e.layerId}`);
  const t = e.sourceId ?? at(), n = e.layerId ?? ot(), a = {
    polylineLayerId: n,
    polylineOutlineLayerId: "",
    polylineSourceId: t
  };
  e.data && !r.getSource(t) && r.addSource(t, {
    type: "geojson",
    data: e.data
  });
  const o = e.lineWidth ?? 3, i = e.lineColor ?? Dt(), s = e.lineOpacity ?? 1, l = e.lineBlur ?? 0, u = e.lineGapWidth ?? 0;
  let c = e.lineDashArray ?? null;
  const p = e.outlineWidth ?? 1, y = e.outlineColor ?? "#FFFFFF", f = e.outlineOpacity ?? 1, d = e.outlineBlur ?? 0;
  if (typeof c == "string" && (c = Br(c)), e.outline === !0) {
    const m = `${n}_outline`;
    a.polylineOutlineLayerId = m, r.addLayer(
      {
        id: m,
        type: "line",
        source: t,
        layout: {
          "line-join": e.lineJoin ?? "round",
          "line-cap": e.lineCap ?? "round"
        },
        minzoom: e.minzoom ?? 0,
        maxzoom: e.maxzoom ?? 23,
        paint: {
          "line-opacity": typeof f == "number" ? f : z(f),
          "line-color": typeof y == "string" ? y : xe(y),
          "line-width": Aa(o, p),
          "line-blur": typeof d == "number" ? d : z(d)
        }
      },
      e.beforeId
    );
  }
  return r.addLayer(
    {
      id: n,
      type: "line",
      source: t,
      layout: {
        "line-join": e.lineJoin ?? "round",
        "line-cap": e.lineCap ?? "round"
      },
      minzoom: e.minzoom ?? 0,
      maxzoom: e.maxzoom ?? 23,
      paint: {
        "line-opacity": typeof s == "number" ? s : z(s),
        "line-color": typeof i == "string" ? i : xe(i),
        "line-width": typeof o == "number" ? o : z(o),
        "line-blur": typeof l == "number" ? l : z(l),
        "line-gap-width": typeof u == "number" ? u : z(u),
        // For some reasons passing "line-dasharray" with the value "undefined"
        // results in no showing the line while it should have the same behavior
        // of not adding the property "line-dasharray" as all.
        // As a workaround, we are inlining the addition of the prop with a conditional
        // which is less readable.
        ...c && { "line-dasharray": c }
      }
    },
    e.beforeId
  ), a;
}
function wl(r, e) {
  if (e.layerId && r.getLayer(e.layerId))
    throw new Error(`A layer already exists with the layer id: ${e.layerId}`);
  const t = e.sourceId ?? at(), n = e.layerId ?? ot(), a = {
    polygonLayerId: n,
    polygonOutlineLayerId: e.outline ? `${n}_outline` : "",
    polygonSourceId: t
  };
  if (e.data && !r.getSource(t)) {
    let m = e.data;
    typeof m == "string" && kt(m) && (m = `https://api.maptiler.com/data/${m}/features.json?key=${F.apiKey}`), r.addSource(t, {
      type: "geojson",
      data: m
    });
  }
  let o = e.outlineDashArray ?? null;
  const i = e.outlineWidth ?? 1, s = e.outlineColor ?? "#FFFFFF", l = e.outlineOpacity ?? 1, u = e.outlineBlur ?? 0, c = e.fillColor ?? Dt(), p = e.fillOpacity ?? 1, y = e.outlinePosition ?? "center", f = e.pattern ?? null;
  typeof o == "string" && (o = Br(o));
  const d = (m = null) => {
    if (r.addLayer(
      {
        id: n,
        type: "fill",
        source: t,
        minzoom: e.minzoom ?? 0,
        maxzoom: e.maxzoom ?? 23,
        paint: {
          "fill-color": typeof c == "string" ? c : xe(c),
          "fill-opacity": typeof p == "number" ? p : z(p),
          // Adding a pattern if provided
          ...m && { "fill-pattern": m }
        }
      },
      e.beforeId
    ), e.outline === !0) {
      let v;
      y === "inside" ? typeof i == "number" ? v = 0.5 * i : v = z(
        i.map(({ zoom: w, value: b }) => ({
          zoom: w,
          value: 0.5 * b
        }))
      ) : y === "outside" ? typeof i == "number" ? v = -0.5 * i : v = z(
        i.map((w) => ({
          zoom: w.zoom,
          value: -0.5 * w.value
        }))
      ) : v = 0, r.addLayer(
        {
          id: a.polygonOutlineLayerId,
          type: "line",
          source: t,
          layout: {
            "line-join": e.outlineJoin ?? "round",
            "line-cap": e.outlineCap ?? "butt"
          },
          minzoom: e.minzoom ?? 0,
          maxzoom: e.maxzoom ?? 23,
          paint: {
            "line-opacity": typeof l == "number" ? l : z(l),
            "line-color": typeof s == "string" ? s : xe(s),
            "line-width": typeof i == "number" ? i : z(i),
            "line-blur": typeof u == "number" ? u : z(u),
            "line-offset": v,
            // For some reasons passing "line-dasharray" with the value "undefined"
            // results in no showing the line while it should have the same behavior
            // of not adding the property "line-dasharray" as all.
            // As a workaround, we are inlining the addition of the prop with a conditional
            // which is less readable.
            ...o && {
              "line-dasharray": o
            }
          }
        },
        e.beforeId
      );
    }
  };
  return f ? r.hasImage(f) ? d(f) : r.loadImage(f).then((m) => {
    r.addImage(f, m.data), d(f);
  }).catch((m) => {
    console.error("Could not load the pattern image.", m.message), d();
  }) : d(), a;
}
function Sl(r, e) {
  if (e.layerId && r.getLayer(e.layerId))
    throw new Error(`A layer already exists with the layer id: ${e.layerId}`);
  const t = e.minPointRadius ?? 10, n = e.maxPointRadius ?? 50, a = e.cluster ?? !1, o = 20, i = Array.isArray(e.pointColor) ? e.pointColor : Ma.TURBO.scale(10, e.cluster ? 1e4 : 1e3).resample("ease-out-square"), s = i.getBounds(), l = e.sourceId ?? at(), u = e.layerId ?? ot(), c = e.showLabel ?? a, p = e.alignOnViewport ?? !0, y = e.outline ?? !1, f = e.outlineOpacity ?? 1, d = e.outlineWidth ?? 1, m = e.outlineColor ?? "#FFFFFF";
  let v;
  const w = e.zoomCompensation ?? !0, b = e.minzoom ?? 0, T = e.maxzoom ?? 23;
  typeof e.pointOpacity == "number" ? v = e.pointOpacity : Array.isArray(e.pointOpacity) ? v = z(e.pointOpacity) : e.cluster ? v = hr(i, "point_count") : e.property ? v = hr(i, e.property) : v = z([
    { zoom: b, value: 0 },
    { zoom: b + 0.25, value: 1 },
    { zoom: T - 0.25, value: 1 },
    { zoom: T, value: 0 }
  ]);
  const j = {
    pointLayerId: u,
    clusterLayerId: "",
    labelLayerId: "",
    pointSourceId: l
  };
  if (e.data && !r.getSource(l)) {
    let $ = e.data;
    typeof $ == "string" && kt($) && ($ = `https://api.maptiler.com/data/${$}/features.json?key=${F.apiKey}`), r.addSource(l, {
      type: "geojson",
      data: $,
      cluster: a
    });
  }
  if (a) {
    j.clusterLayerId = `${u}_cluster`;
    const $ = Array.from({ length: o }, (le, Le) => {
      const Ue = s.min + Le * (s.max - s.min) / (o - 1);
      return {
        value: Ue,
        pointRadius: t + (n - t) * (Le / (o - 1)) ** 0.5,
        color: i.getColorHex(Ue)
      };
    });
    r.addLayer(
      {
        id: j.clusterLayerId,
        type: "circle",
        source: l,
        filter: ["has", "point_count"],
        paint: {
          // 'circle-color': options.pointColor ?? colorDrivenByProperty(clusterStyle, "point_count"),
          "circle-color": typeof e.pointColor == "string" ? e.pointColor : yr($, "point_count"),
          "circle-radius": typeof e.pointRadius == "number" ? e.pointRadius : Array.isArray(e.pointRadius) ? z(e.pointRadius) : mr($, "point_count", !1),
          "circle-pitch-alignment": p ? "viewport" : "map",
          "circle-pitch-scale": "map",
          // scale with camera distance regardless of viewport/biewport alignement
          "circle-opacity": v,
          ...y && {
            "circle-stroke-opacity": typeof f == "number" ? f : z(f),
            "circle-stroke-width": typeof d == "number" ? d : z(d),
            "circle-stroke-color": typeof m == "string" ? m : xe(m)
          }
        },
        minzoom: b,
        maxzoom: T
      },
      e.beforeId
    ), r.addLayer(
      {
        id: j.pointLayerId,
        type: "circle",
        source: l,
        filter: ["!", ["has", "point_count"]],
        paint: {
          "circle-pitch-alignment": p ? "viewport" : "map",
          "circle-pitch-scale": "map",
          // scale with camera distance regardless of viewport/biewport alignement
          // 'circle-color':  options.pointColor ?? clusterStyle[0].color,
          "circle-color": typeof e.pointColor == "string" ? e.pointColor : i.getColorHex(i.getBounds().min),
          "circle-radius": typeof e.pointRadius == "number" ? e.pointRadius : Array.isArray(e.pointRadius) ? z(e.pointRadius) : $[0].pointRadius * 0.75,
          "circle-opacity": v,
          ...y && {
            "circle-stroke-opacity": typeof f == "number" ? f : z(f),
            "circle-stroke-width": typeof d == "number" ? d : z(d),
            "circle-stroke-color": typeof m == "string" ? m : xe(m)
          }
        },
        minzoom: b,
        maxzoom: T
      },
      e.beforeId
    );
  } else {
    let $ = typeof e.pointColor == "string" ? e.pointColor : Array.isArray(e.pointColor) ? e.pointColor.getColorHex(e.pointColor.getBounds().min) : Dt(), le = typeof e.pointRadius == "number" ? w ? z([
      { zoom: 0, value: e.pointRadius * 0.025 },
      { zoom: 2, value: e.pointRadius * 0.05 },
      { zoom: 4, value: e.pointRadius * 0.1 },
      { zoom: 8, value: e.pointRadius * 0.25 },
      { zoom: 16, value: e.pointRadius * 1 }
    ]) : e.pointRadius : Array.isArray(e.pointRadius) ? z(e.pointRadius) : w ? z([
      { zoom: 0, value: t * 0.05 },
      { zoom: 2, value: t * 0.1 },
      { zoom: 4, value: t * 0.2 },
      { zoom: 8, value: t * 0.5 },
      { zoom: 16, value: t * 1 }
    ]) : t;
    if (e.property && Array.isArray(e.pointColor)) {
      const Le = Array.from({ length: o }, (Ue, it) => {
        const st = s.min + it * (s.max - s.min) / (o - 1);
        return {
          value: st,
          pointRadius: typeof e.pointRadius == "number" ? e.pointRadius : t + (n - t) * (it / (o - 1)) ** 0.5,
          color: typeof e.pointColor == "string" ? e.pointColor : i.getColorHex(st)
        };
      });
      $ = yr(Le, e.property), le = mr(Le, e.property, w);
    }
    r.addLayer(
      {
        id: j.pointLayerId,
        type: "circle",
        source: l,
        layout: {
          // Contrary to labels, we want to see the small one in front. Weirdly "circle-sort-key" works in the opposite direction as "symbol-sort-key".
          "circle-sort-key": e.property ? ["/", 1, ["get", e.property]] : 0
        },
        paint: {
          "circle-pitch-alignment": p ? "viewport" : "map",
          "circle-pitch-scale": "map",
          // scale with camera distance regardless of viewport/biewport alignement
          "circle-color": $,
          "circle-opacity": v,
          "circle-radius": le,
          ...y && {
            "circle-stroke-opacity": typeof f == "number" ? f : z(f),
            "circle-stroke-width": typeof d == "number" ? d : z(d),
            "circle-stroke-color": typeof m == "string" ? m : xe(m)
          }
        },
        minzoom: b,
        maxzoom: T
      },
      e.beforeId
    );
  }
  if (c !== !1 && (e.cluster || e.property)) {
    j.labelLayerId = `${u}_label`;
    const $ = e.labelColor ?? "#fff", le = e.labelSize ?? 12;
    r.addLayer(
      {
        id: j.labelLayerId,
        type: "symbol",
        source: l,
        filter: ["has", e.cluster ? "point_count" : e.property],
        layout: {
          "text-field": e.cluster ? "{point_count_abbreviated}" : `{${e.property}}`,
          "text-font": ["Noto Sans Regular"],
          "text-size": le,
          "text-pitch-alignment": p ? "viewport" : "map",
          "symbol-sort-key": ["/", 1, ["get", e.cluster ? "point_count" : e.property]]
          // so that the largest value goes on top
        },
        paint: {
          "text-color": $,
          "text-opacity": v
        },
        minzoom: b,
        maxzoom: T
      },
      e.beforeId
    );
  }
  return j;
}
function xl(r, e) {
  if (e.layerId && r.getLayer(e.layerId))
    throw new Error(`A layer already exists with the layer id: ${e.layerId}`);
  const t = e.sourceId ?? at(), n = e.layerId ?? ot(), a = e.minzoom ?? 0, o = e.maxzoom ?? 23, i = e.zoomCompensation ?? !0, s = e.opacity ?? [
    { zoom: a, value: 0 },
    { zoom: a + 0.25, value: 1 },
    { zoom: o - 0.25, value: 1 },
    { zoom: o, value: 0 }
  ];
  let l = Array.isArray(e.colorRamp) ? e.colorRamp : Ma.TURBO.transparentStart();
  const u = l.getBounds();
  (u.min !== 0 || u.max !== 1) && (l = l.scale(0, 1)), l.hasTransparentStart() || (l = l.transparentStart());
  const c = e.intensity ?? [
    { zoom: 0, value: 0.01 },
    { zoom: 4, value: 0.2 },
    { zoom: 16, value: 1 }
  ], p = e.property ?? null, y = e.weight ?? 1;
  let f = 1;
  p ? typeof y == "number" ? (f = y, typeof e.weight == "number" && console.warn("The option `.property` is ignored when `.propertyValueWeights` is not of type `PropertyValueWeights`")) : Array.isArray(y) ? f = Ta(y, p) : console.warn("The option `.property` is ignored when `.propertyValueWeights` is not of type `PropertyValueWeights`") : typeof y == "number" ? f = y : Array.isArray(y) && console.warn("The options `.propertyValueWeights` can only be used when `.property` is provided.");
  const d = [
    { zoom: 0, value: 50 * 0.025 },
    { zoom: 2, value: 50 * 0.05 },
    { zoom: 4, value: 50 * 0.1 },
    { zoom: 8, value: 50 * 0.25 },
    { zoom: 16, value: 50 }
  ], m = e.radius ?? (i ? d : 10);
  let v = 1;
  typeof m == "number" ? v = m : Array.isArray(m) && "zoom" in m[0] ? v = z(m) : p && Array.isArray(m) && "propertyValue" in m[0] ? v = Ia(m, p, i) : !p && Array.isArray(m) && "propertyValue" in m[0] ? (v = z(d), console.warn("The option `.radius` can only be property-driven if the option `.property` is provided.")) : v = z(d);
  const w = {
    heatmapLayerId: n,
    heatmapSourceId: t
  };
  if (e.data && !r.getSource(t)) {
    let b = e.data;
    typeof b == "string" && kt(b) && (b = `https://api.maptiler.com/data/${b}/features.json?key=${F.apiKey}`), r.addSource(t, {
      type: "geojson",
      data: b
    });
  }
  return r.addLayer(
    {
      id: n,
      type: "heatmap",
      source: t,
      minzoom: a,
      maxzoom: o,
      paint: {
        "heatmap-weight": f,
        "heatmap-intensity": typeof c == "number" ? c : z(c),
        "heatmap-color": Ea(l),
        "heatmap-radius": v,
        "heatmap-opacity": typeof s == "number" ? s : z(s)
      }
    },
    e.beforeId
  ), w;
}
const Yl = /* @__PURE__ */ Object.freeze(/* @__PURE__ */ Object.defineProperty({
  __proto__: null,
  addHeatmap: xl,
  addPoint: Sl,
  addPolygon: wl,
  addPolyline: vl,
  colorDrivenByProperty: yr,
  colorPalettes: fr,
  computeRampedOutlineWidth: Aa,
  dashArrayMaker: Br,
  generateRandomLayerName: ot,
  generateRandomSourceName: at,
  getRandomColor: Dt,
  heatmapIntensityFromColorRamp: Ea,
  lerpZoomNumberValues: dr,
  opacityDrivenByProperty: hr,
  paintColorOptionsToPaintSpec: xe,
  radiusDrivenByProperty: mr,
  radiusDrivenByPropertyHeatmap: Ia,
  rampedOptionsToLayerPaintSpec: z,
  rampedPropertyValueWeight: Ta,
  takeScreenshot: ml
}, Symbol.toStringTag, { value: "Module" }));
no();
function Xl() {
  return "3.3.0";
}
const Ql = S.Map, eu = S.Marker, tu = S.Popup, ru = S.Style, nu = S.CanvasSource, au = S.GeoJSONSource, ou = S.ImageSource, iu = S.RasterTileSource, su = S.RasterDEMTileSource, lu = S.VectorTileSource, uu = S.VideoSource, cu = S.NavigationControl, pu = S.GeolocateControl, fu = S.AttributionControl, du = S.LogoControl, yu = S.ScaleControl, mu = S.FullscreenControl, hu = S.TerrainControl, gu = S.BoxZoomHandler, vu = S.ScrollZoomHandler, bu = S.CooperativeGesturesHandler, wu = S.KeyboardHandler, Su = S.TwoFingersTouchPitchHandler, xu = S.MapWheelEvent, ku = S.MapTouchEvent, Lu = S.MapMouseEvent, Cu = S.config, Au = S.getVersion, {
  setRTLTextPlugin: Tu,
  getRTLTextPluginStatus: Iu,
  LngLat: Eu,
  LngLatBounds: Mu,
  MercatorCoordinate: _u,
  Evented: zu,
  AJAXError: Pu,
  prewarm: Ru,
  clearPrewarmedResources: $u,
  Hash: ju,
  Point: Ou,
  EdgeInsets: Nu,
  DragRotateHandler: Fu,
  DragPanHandler: Du,
  TwoFingersTouchZoomRotateHandler: qu,
  DoubleClickZoomHandler: Bu,
  TwoFingersTouchZoomHandler: Uu,
  TwoFingersTouchRotateHandler: Gu,
  getWorkerCount: Vu,
  setWorkerCount: Hu,
  getMaxParallelImageRequests: Ku,
  setMaxParallelImageRequests: Wu,
  getWorkerUrl: Zu,
  setWorkerUrl: Ju,
  addSourceType: Yu,
  importScriptInWorkers: Xu,
  addProtocol: Qu,
  removeProtocol: ec
} = S;
export {
  Pu as AJAXError,
  ql as AttributionControl,
  fu as AttributionControlMLGL,
  Ul as BoxZoomHandler,
  gu as BoxZoomHandlerMLGL,
  Rl as CanvasSource,
  nu as CanvasSourceMLGL,
  x as ColorRamp,
  Ma as ColorRampCollection,
  Vl as CooperativeGesturesHandler,
  bu as CooperativeGesturesHandlerMLGL,
  ye as DOMcreate,
  Fr as DOMremove,
  Bu as DoubleClickZoomHandler,
  Du as DragPanHandler,
  Fu as DragRotateHandler,
  Nu as EdgeInsets,
  zu as Evented,
  wo as FullscreenControl,
  mu as FullscreenControlMLGL,
  $l as GeoJSONSource,
  au as GeoJSONSourceMLGL,
  go as GeolocateControl,
  pu as GeolocateControlMLGL,
  ol as GeolocationType,
  ju as Hash,
  jl as ImageSource,
  ou as ImageSourceMLGL,
  Hl as KeyboardHandler,
  wu as KeyboardHandlerMLGL,
  _ as Language,
  Eu as LngLat,
  Mu as LngLatBounds,
  vo as LogoControl,
  du as LogoControlMLGL,
  il as Map,
  Ql as MapMLGL,
  Jl as MapMouseEvent,
  Lu as MapMouseEventMLGL,
  nc as MapStyle,
  ac as MapStyleVariant,
  Zl as MapTouchEvent,
  ku as MapTouchEventMLGL,
  Wl as MapWheelEvent,
  xu as MapWheelEventMLGL,
  Fs as MaptilerGeolocateControl,
  Qr as MaptilerLogoControl,
  Os as MaptilerNavigationControl,
  Ds as MaptilerProjectionControl,
  js as MaptilerTerrainControl,
  Ml as Marker,
  eu as MarkerMLGL,
  _u as MercatorCoordinate,
  cu as NavigationControMLGL,
  ho as NavigationControl,
  Ou as Point,
  zl as Popup,
  tu as PopupMLGL,
  Nl as RasterDEMTileSource,
  su as RasterDEMTileSourceMLGL,
  Ol as RasterTileSource,
  iu as RasterTileSourceMLGL,
  oc as ReferenceMapStyle,
  bo as ScaleControl,
  yu as ScaleControlMLGL,
  Gl as ScrollZoomHandler,
  vu as ScrollZoomHandlerMLGL,
  Ja as SdkConfig,
  ic as ServiceError,
  Pl as Style,
  ru as StyleMLGL,
  hu as TerrainControMLGL,
  Bl as TerrainControl,
  Kl as TwoFingersTouchPitchHandler,
  Su as TwoFingersTouchPitchHandlerMLGL,
  Gu as TwoFingersTouchRotateHandler,
  Uu as TwoFingersTouchZoomHandler,
  qu as TwoFingersTouchZoomRotateHandler,
  Fl as VectorTileSource,
  lu as VectorTileSourceMLGL,
  Dl as VideoSource,
  uu as VideoSourceMLGL,
  Qu as addProtocol,
  Yu as addSourceType,
  sc as areSameLanguages,
  lc as bufferToPixelDataBrowser,
  uc as circumferenceAtLatitude,
  $u as clearPrewarmedResources,
  F as config,
  Cu as configMLGL,
  cc as coordinates,
  pc as data,
  El as displayWebGLContextLostWarning,
  fc as elevation,
  dc as expandMapStyle,
  yc as geocoding,
  mc as geolocation,
  hc as getAutoLanguage,
  Kr as getBrowserLanguage,
  gc as getBufferToPixelDataParser,
  vc as getLanguageInfoFromCode,
  bc as getLanguageInfoFromFlag,
  wc as getLanguageInfoFromKey,
  Au as getMapLibreVersion,
  Ku as getMaxParallelImageRequests,
  Iu as getRTLTextPluginStatus,
  Sc as getTileCache,
  Xl as getVersion,
  io as getWebGLSupportError,
  Vu as getWorkerCount,
  Zu as getWorkerUrl,
  ba as gpx,
  yl as gpxOrKml,
  va as hasChildNodeWithName,
  Yl as helpers,
  Xu as importScriptInWorkers,
  xc as isLanguageInfo,
  wa as kml,
  kc as mapStylePresetList,
  Lc as math,
  Cc as misc,
  Ru as prewarm,
  ec as removeProtocol,
  Wu as setMaxParallelImageRequests,
  Tu as setRTLTextPlugin,
  Hu as setWorkerCount,
  Ju as setWorkerUrl,
  Ac as staticMaps,
  Dr as str2xml,
  Tc as styleToStyle,
  Ic as toLanguageInfo,
  Ln as xml2str
};
//# sourceMappingURL=maptiler-sdk.mjs.map
